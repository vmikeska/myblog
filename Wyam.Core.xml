<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Wyam.Core</name>
    </assembly>
    <members>
        <member name="T:Wyam.Core.Documents.CustomDocument">
            <summary>
            Derive custom document types from this class to get built-in support.
            </summary>
        </member>
        <member name="M:Wyam.Core.Documents.CustomDocument.Clone">
            <summary>
            Clones this instance of the document. You must return a new instance of your
            custom document type, even if nothing will change, otherwise the document factory
            will throw an exception. The default implementation of this method performs a
            <code>object.MemberwiseClone()</code>.
            </summary>
            <returns>A new custom document instance with the same values as the current instance.</returns>
        </member>
        <member name="P:Wyam.Core.Documents.CustomDocument.WithoutSettings">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Core.Documents.CustomDocument.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Core.Documents.CustomDocument.Count">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Core.Documents.CustomDocument.ContainsKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Core.Documents.CustomDocument.TryGetValue(System.String,System.Object@)">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Core.Documents.CustomDocument.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Core.Documents.CustomDocument.Keys">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Core.Documents.CustomDocument.Values">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Core.Documents.CustomDocument.MetadataAs``1">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Core.Documents.CustomDocument.Get(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Core.Documents.CustomDocument.GetRaw(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Core.Documents.CustomDocument.Get``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Core.Documents.CustomDocument.Get``1(System.String,``0)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Core.Documents.CustomDocument.GetMetadata(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Core.Documents.CustomDocument.Dispose">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Core.Documents.CustomDocument.Source">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Core.Documents.CustomDocument.SourceString">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Core.Documents.CustomDocument.Id">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Core.Documents.CustomDocument.Metadata">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Core.Documents.CustomDocument.Content">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Core.Documents.CustomDocument.GetStream">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Core.Documents.CustomDocument.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Execution.Engine">
            <summary>
            The engine is the primary entry point for the generation process.
            </summary>
        </member>
        <member name="P:Wyam.Core.Execution.Engine.Version">
            <summary>
            Gets the version of Wyam currently being used.
            </summary>
        </member>
        <member name="M:Wyam.Core.Execution.Engine.#ctor">
            <summary>
            Creates the engine.
            </summary>
        </member>
        <member name="P:Wyam.Core.Execution.Engine.FileSystem">
            <summary>
            Gets the file system.
            </summary>
        </member>
        <member name="P:Wyam.Core.Execution.Engine.Settings">
            <summary>
            Gets the settings.
            </summary>
        </member>
        <member name="P:Wyam.Core.Execution.Engine.Pipelines">
            <summary>
            Gets the pipelines.
            </summary>
        </member>
        <member name="P:Wyam.Core.Execution.Engine.Documents">
            <summary>
            Gets the documents.
            </summary>
        </member>
        <member name="P:Wyam.Core.Execution.Engine.Namespaces">
            <summary>
            Gets the namespaces that should be brought in scope by modules that support dynamic compilation.
            </summary>
        </member>
        <member name="P:Wyam.Core.Execution.Engine.DynamicAssemblies">
            <summary>
            Gets a collection of all the raw assemblies that should be referenced by modules
            that support dynamic compilation (such as configuration assemblies).
            </summary>
        </member>
        <member name="P:Wyam.Core.Execution.Engine.ApplicationInput">
            <summary>
            Gets or sets the application input.
            </summary>
        </member>
        <member name="P:Wyam.Core.Execution.Engine.DocumentFactory">
            <summary>
            Gets or sets the document factory.
            </summary>
        </member>
        <member name="P:Wyam.Core.Execution.Engine.ContentStreamFactory">
            <summary>
            The factory that should provide content streams for documents.
            </summary>
        </member>
        <member name="M:Wyam.Core.Execution.Engine.CleanOutputPath">
            <summary>
            Deletes the output path and all files it contains.
            </summary>
        </member>
        <member name="M:Wyam.Core.Execution.Engine.CleanTempPath">
            <summary>
            Deletes the temp path and all files it contains.
            </summary>
        </member>
        <member name="M:Wyam.Core.Execution.Engine.ResetJsEngines">
            <summary>
            Resets the JavaScript Engine pool and clears the JavaScript Engine Switcher
            to an empty list of engine factories and default engine. Useful on configuration
            change where we might have a new configuration.
            </summary>
        </member>
        <member name="M:Wyam.Core.Execution.Engine.Execute">
            <summary>
            Executes the engine. This is the primary method that kicks off generation.
            </summary>
        </member>
        <member name="M:Wyam.Core.Execution.Engine.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Core.Execution.ExecutionContext.Dispose">
            <summary>
            The context is disposed after use by each module to ensure modules aren't accessing stale data
            if they continue to create documents or perform other operations after the module is done
            executing. A disposed context can no longer be used.
            </summary>
        </member>
        <member name="T:Wyam.Core.IO.Globbing.Globber">
            <summary>
            Helper methods to work with globbing patterns.
            </summary>
        </member>
        <member name="M:Wyam.Core.IO.Globbing.Globber.GetFiles(Wyam.Common.IO.IDirectory,System.String[])">
            <summary>
            Gets files from the specified directory using globbing patterns.
            </summary>
            <param name="directory">The directory to search.</param>
            <param name="patterns">The globbing pattern(s) to use.</param>
            <returns>Files that match the globbing pattern(s).</returns>
        </member>
        <member name="M:Wyam.Core.IO.Globbing.Globber.GetFiles(Wyam.Common.IO.IDirectory,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets files from the specified directory using globbing patterns.
            </summary>
            <param name="directory">The directory to search.</param>
            <param name="patterns">The globbing pattern(s) to use.</param>
            <returns>Files that match the globbing pattern(s).</returns>
        </member>
        <member name="M:Wyam.Core.IO.Globbing.Globber.ExpandBraces(System.String)">
            <summary>Expands all brace ranges in a pattern, returning a sequence containing every possible combination.</summary>
            <param name="pattern">The pattern to expand.</param>
            <returns>The expanded globbing patterns.</returns>
        </member>
        <member name="P:Wyam.Core.IO.VirtualInputDirectory.Exists">
            <summary>
            Gets a value indicating whether any of the input paths contain this directory.
            </summary>
            <value>
            <c>true</c> if this directory exists at one of the input paths; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Wyam.Core.JavaScript.PooledJsEngine">
            <summary>
            Wraps a <see cref="T:Wyam.Core.JavaScript.JsEngine"/> but overrides the
            dispose behavior so that instead of disposing the
            underlying engine, it returns the engine to the pool.
            </summary>
        </member>
        <member name="M:Wyam.Core.Meta.Metadata.GetValue(System.Object)">
            <summary>
            This resolves the metadata value by recursively expanding IMetadataValue.
            </summary>
        </member>
        <member name="M:Wyam.Core.Meta.Metadata.GetItem(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            This resolves the metadata value by expanding IMetadataValue.
            </summary>
        </member>
        <member name="T:Wyam.Core.Meta.MetadataStack">
            <summary>
            This class contains a stack of all the metadata generated at a particular pipeline stage.
            Getting a value checks each of the stacks and returns the first hit.
            This class is immutable, create a new document to get a new one with additional values.
            </summary>
        </member>
        <member name="T:Wyam.Core.Modules.Contents.Append">
            <summary>
            Appends the specified content to the existing content of each document.
            </summary>
            <category>Content</category>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Append.#ctor(System.Object)">
            <summary>
            Appends the string value of the specified object to the content of every input document.
            </summary>
            <param name="content">The content to append.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Append.#ctor(Wyam.Common.Configuration.ContextConfig)">
            <summary>
            Appends the string value of the returned object to to content of each document. This
            allows you to specify different content to append depending on the execution context.
            </summary>
            <param name="content">A delegate that returns the content to append.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Append.#ctor(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Appends the string value of the returned object to to content of each document.
            This allows you to specify different content to append for each document depending
            on the input document.
            </summary>
            <param name="content">A delegate that returns the content to append.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Append.#ctor(Wyam.Common.Modules.IModule[])">
            <summary>
            The specified modules are executed against an empty initial document and the results
            are appended to the content of every input document (possibly creating more
            than one output document for each input document).
            </summary>
            <param name="modules">The modules to execute.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Append.Execute(System.Object,Wyam.Common.Documents.IDocument,Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Contents.Content">
            <summary>
            Replaces the content of each input document with the string value of the specified content object.
            </summary>
            <remarks>
            In the case where modules are provided, they are executed against an
            empty initial document and the results are applied to each input document.
            </remarks>
            <category>Content</category>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Content.#ctor(System.Object)">
            <summary>
            Uses the string value of the specified object as the new content for every input document.
            </summary>
            <param name="content">The new content to use.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Content.#ctor(Wyam.Common.Configuration.ContextConfig)">
            <summary>
            Uses the string value of the returned object as the new content for each document.
            This allows you to specify different content depending on the execution context.
            </summary>
            <param name="content">A delegate that gets the new content to use.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Content.#ctor(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Uses the string value of the returned object as the new content for each document. This
            allows you to specify different content for each document depending on the input document.
            </summary>
            <param name="content">A delegate that gets the new content to use.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Content.#ctor(Wyam.Common.Modules.IModule[])">
            <summary>
            The specified modules are executed against an empty initial document and the results
            are applied to every input document (possibly creating more than one output
            document for each input document).
            </summary>
            <param name="modules">The modules to execute.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Content.Execute(System.Object,Wyam.Common.Documents.IDocument,Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Contents.Join">
            <summary>
            Joins documents together with an optional delimiter to form one document.
            </summary>
            <category>Content</category>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Join.#ctor">
            <summary>
            Concatenates multiple documents together to form a single document without a delimiter and with the default metadata only
            </summary>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Join.#ctor(Wyam.Core.Modules.Contents.JoinedMetadata)">
            <summary>
            Concatenates multiple documents together to form a single document without a delimiter using the specified meta data mode
            </summary>
            <param name="metaDataMode">The specified metadata mode</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Join.#ctor(System.String,Wyam.Core.Modules.Contents.JoinedMetadata)">
            <summary>
            Concatenates multiple documents together to form a single document with a specified delimiter using the specified meta data mode
            </summary>
            <param name="delimiter">The string to use as a separator between documents</param>
            <param name="metaDataMode">The specified metadata mode</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Join.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
            <summary>
            Returns a single document containing the concatenated content of all input documents with an optional delimiter and configurable metadata options
            </summary>
            <returns>A single document in a list</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Join.MetadataForOutputDocument(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument})">
            <summary>
            Returns the correct metadata for the new document based on the provided list of documents and the selected metadata mode.
            </summary>
            <param name="inputs">The list of input documents.</param>
            <returns>The set of metadata for all input documents.</returns>
        </member>
        <member name="T:Wyam.Core.Modules.Contents.JoinedMetadata">
            <summary>
            Specifies how to deal with metadata from joined documents.
            </summary>
        </member>
        <member name="F:Wyam.Core.Modules.Contents.JoinedMetadata.DefaultOnly">
            <summary>
            The joined document only includes the default global metadata.
            </summary>
        </member>
        <member name="F:Wyam.Core.Modules.Contents.JoinedMetadata.FirstDocument">
            <summary>
            The joined document includes the metadata from the first document in the sequence of documents to join.
            </summary>
        </member>
        <member name="F:Wyam.Core.Modules.Contents.JoinedMetadata.LastDocument">
            <summary>
            The joined document includes the metadata from the last document in the sequence of documents to join.
            </summary>
        </member>
        <member name="F:Wyam.Core.Modules.Contents.JoinedMetadata.AllWithFirstDuplicates">
            <summary>
            The joined document includes metadata from all joined documents and uses the value from the
            first document in the sequence of documents to join in the case of duplicate keys.
            </summary>
        </member>
        <member name="F:Wyam.Core.Modules.Contents.JoinedMetadata.AllWithLastDuplicates">
            <summary>
            The joined document includes metadata from all joined documents and uses the value from the
            last document in the sequence of documents to join in the case of duplicate keys.
            </summary>
        </member>
        <member name="T:Wyam.Core.Modules.Contents.Prepend">
            <summary>
            Prepends the specified content to the existing content of each document.
            </summary>
            <category>Content</category>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Prepend.#ctor(System.Object)">
            <summary>
            Prepends the string value of the specified object to the content of every input document.
            </summary>
            <param name="content">The content to prepend.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Prepend.#ctor(Wyam.Common.Configuration.ContextConfig)">
            <summary>
            Prepends the string value of the returned object to to content of each document. This
            allows you to specify different content to prepend depending on the execution context.
            </summary>
            <param name="content">A delegate that returns the content to prepend.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Prepend.#ctor(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Prepends the string value of the returned object to to content of each document. This
            allows you to specify different content to prepend for each document depending on the input document.
            </summary>
            <param name="content">A delegate that returns the content to prepend.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Prepend.#ctor(Wyam.Common.Modules.IModule[])">
            <summary>
            The specified modules are executed against an empty initial document and the results are
            prepended to the content of every input document (possibly creating more than one output
            document for each input document).
            </summary>
            <param name="modules">The modules to execute.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Prepend.Execute(System.Object,Wyam.Common.Documents.IDocument,Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Contents.Redirect">
            <summary>
            Handles redirected content by creating pages with meta refresh tags or other redirect files.
            </summary>
            <remarks>
            <para>When content moves you need some way to redirect from the old location to the new location.
            This is especially true when moving content from one publishing system to another that might
            have different conventions for things like paths.</para>
            <para>This module lets you manage redirected content
            by generating special pages that contain a "meta refresh tag". This tag tells client browsers
            that the content has moved and to redirect to the new location. Google and other search engines
            also understand meta refresh tags and will adjust their search indexes accordingly.</para>
            <para>Alternatively (or additionally), you can also create host-specific redirect files to
            control redirection on the server.</para>
            <para>By default, this module will read the paths that need to be redirected from the
            <c>RedirectFrom</c> metadata key. One or more paths can be specified in this metadata and
            corresponding redirect files will be created for each.</para>
            <para>This module outputs any meta refresh pages as well as any additional redirect files
            you specify. It does not output the original input files.</para>
            </remarks>
            <metadata cref="F:Wyam.Common.Meta.Keys.RedirectFrom" usage="Input" />
            <metadata cref="F:Wyam.Common.Meta.Keys.RelativeFilePath" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.WritePath" usage="Output" />
            <category>Content</category>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Redirect.WithPaths(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Controls where the redirected paths come from. By default, values from the metadata
            key <c>RedirectFrom</c> are used.
            </summary>
            <param name="paths">A delegate that should return one or more <see cref="T:Wyam.Common.IO.FilePath"/>.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Redirect.WithMetaRefreshPages(System.Boolean)">
            <summary>
            Controls whether meta refresh pages are output.
            </summary>
            <param name="metaRefreshPages">If <c>true</c>, meta refresh pages are generated.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Redirect.IncludeHost(System.Boolean)">
            <summary>
            Indicates whether the host should be automatically included in generated redirect links.
            </summary>
            <param name="includeHost"><c>true</c> to include the host.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Redirect.WithAdditionalOutput(Wyam.Common.IO.FilePath,System.Func{System.Collections.Generic.IDictionary{Wyam.Common.IO.FilePath,System.String},System.String})">
            <summary>
            Adds additional output files that you specify by supplying a delegate that takes a dictionary
            of redirected paths to destination URLs.
            </summary>
            <param name="path">The path of the output file (must be relative).</param>
            <param name="content">A delegate that takes a dictionary with keys equal to each redirected file
            and values equal to the destination URL. The delegate should return the content of the output file.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Redirect.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Contents.Replace">
            <summary>
            Replaces a search string in the content of each input document with new content.
            </summary>
            <category>Content</category>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Replace.#ctor(System.String,System.Object)">
            <summary>
            Replaces all occurrences of the search string in every input document
            with the string value of the specified object.
            </summary>
            <param name="search">The string to search for.</param>
            <param name="content">The content to replace the search string with.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Replace.#ctor(System.String,Wyam.Common.Configuration.ContextConfig)">
            <summary>
            Replaces all occurrences of the search string in every input document with the
            string value of the returned object. This allows you to specify different content
            depending on the execution context.
            </summary>
            <param name="search">The string to search for.</param>
            <param name="content">A delegate that returns the content to replace the search string with.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Replace.#ctor(System.String,Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Replaces all occurrences of the search string in every input document with the
            string value of the returned object. This allows you to specify different content
            for each document depending on the input document.
            </summary>
            <param name="search">The string to search for.</param>
            <param name="content">A delegate that returns the content to replace the search string with.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Replace.#ctor(System.String,Wyam.Common.Modules.IModule[])">
            <summary>
            The specified modules are executed against an empty initial document and the resulting
            document content replaces all occurrences of the search string in every input document
            (possibly creating more than one output document for each input document).
            </summary>
            <param name="search">The string to search for.</param>
            <param name="modules">Modules that output the content to replace the search string with.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Replace.#ctor(System.String,System.Func{System.Text.RegularExpressions.Match,System.Object})">
            <summary>
            Replaces all occurrences of the search string in every input document
            with the string value of the objects returned by the delegate. The delegate will be called
            for each Match in the supplied regular expression.
            </summary>
            <param name="search">The string to search for (interpreted as a regular expression).</param>
            <param name="contentFinder">A delegate that returns the content to replace the match.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Replace.#ctor(System.String,System.Func{System.Text.RegularExpressions.Match,Wyam.Common.Documents.IDocument,System.Object})">
            <summary>
            Replaces all occurrences of the search string in every input document
            with the string value of the objects returned by the delegate. The delegate will be called
            for each Match in the supplied regular expression.
            </summary>
            <param name="search">The string to search for (interpreted as a regular expression).</param>
            <param name="contentFinder">A delegate that returns the content to replace the match.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Replace.IsRegex(System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Indicates that the search string(s) should be treated as a regular expression(s)
            with the specified options.
            </summary>
            <param name="regexOptions">The options to use (if any).</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Replace.Execute(System.Object,Wyam.Common.Documents.IDocument,Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Contents.ReplaceIn">
            <summary>
            Replaces a search string in the specified content with the content of input documents.
            </summary>
            <remarks>
            This is sort of like the inverse of the Replace module and is very useful for simple
            template substitution.
            </remarks>
            <category>Content</category>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.ReplaceIn.#ctor(System.String,System.Object)">
            <summary>
            Replaces all occurrences of the search string in the string value of the
            specified object with the content of each input document.
            </summary>
            <param name="search">The string to search for.</param>
            <param name="content">The content within which to search for the search string.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.ReplaceIn.#ctor(System.String,Wyam.Common.Configuration.ContextConfig)">
            <summary>
            Replaces all occurrences of the search string in the string value of the
            returned object with the content of each input document. This allows you to
            specify different content depending on the execution context.
            </summary>
            <param name="search">The string to search for.</param>
            <param name="content">A delegate that returns the content within which
            to search for the search string.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.ReplaceIn.#ctor(System.String,Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Replaces all occurrences of the search string in the string value of the returned
            object with the content of each input document. This allows you to specify different
            content for each document depending on the input document.
            </summary>
            <param name="search">The string to search for.</param>
            <param name="content">A delegate that returns the content within which
            to search for the search string.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.ReplaceIn.#ctor(System.String,Wyam.Common.Modules.IModule[])">
            <summary>
            The specified modules are executed against an empty initial document and all
            occurrences of the search string in the resulting document content are replaced by the content of
            each input document (possibly creating more than one output document for each input document).
            </summary>
            <param name="search">The string to search for.</param>
            <param name="modules">Modules that output the content within which
            to search for the search string.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.ReplaceIn.IsRegex(System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Indicates that the search string(s) should be treated as a regular expression(s)
            with the specified options.
            </summary>
            <param name="regexOptions">The options to use (if any).</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.ReplaceIn.Execute(System.Object,Wyam.Common.Documents.IDocument,Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Contents.Sitemap">
            <summary>
            Generates a sitemap from the input documents.
            </summary>
            <remarks>
            This module generates a sitemap from the input documents. The output document contains the sitemap XML as it's content.
            You can supply a location for the each item in the sitemap as a <c>string</c> (with an optional function to format it
            into an absolute HTML path) or you can supply a <c>SitemapItem</c> for more control. You can also specify the
            <c>Hostname</c> metadata key (as a <c>string</c>) for each input document, which will be prepended to all locations.
            </remarks>
            <metadata cref="F:Wyam.Common.Meta.Keys.SitemapItem" usage="Input" />
            <category>Content</category>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Sitemap.#ctor(System.Func{System.String,System.String})">
            <summary>
            Creates a sitemap using the metadata key <c>SitemapItem</c> which should contain either a <c>string</c> that
            contains the location for each input document or a <c>SitemapItem</c> instance with the location
            and other information. If the key <c>SitemapItem</c> is not found or does not contain the correct type of object,
            a link to the document will be used.
            </summary>
            <param name="locationFormatter">A location formatter that will be applied to the location of each input after
            getting the value of the <c>SitemapItem</c> metadata key.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Sitemap.#ctor(System.String,System.Func{System.String,System.String})">
            <summary>
            Creates a sitemap using the specified metadata key which should contain either a <c>string</c> that
            contains the location for each input document or a <c>SitemapItem</c> instance with the location
            and other information. If the metadata key is not found or does not contain the correct type of object,
            a link to the document will be used.
            </summary>
            <param name="sitemapItemOrLocationMetadataKey">A metadata key that contains either a <c>SitemapItem</c> or
            a <c>string</c> location for each input document.</param>
            <param name="locationFormatter">A location formatter that will be applied to the location of each input after
            getting the value of the specified metadata key.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Sitemap.#ctor(Wyam.Common.Configuration.DocumentConfig,System.Func{System.String,System.String})">
            <summary>
            Creates a sitemap using the specified delegate which should return either a <c>string</c> that
            contains the location for each input document or a <c>SitemapItem</c> instance with the location
            and other information. If the delegate returns <c>null</c> or does not return the correct type of object,
            a link to the document will be used.
            </summary>
            <param name="sitemapItemOrLocation">A delegate that either returns a <c>SitemapItem</c> instance or a <c>string</c>
            with the desired item location. If the delegate returns <c>null</c>, the input document is not added to the sitemap.</param>
            <param name="locationFormatter">A location formatter that will be applied to the location of each input after
            getting the value of the specified metadata key.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Contents.Sitemap.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Control.Branch">
            <summary>
            Evaluates the specified modules with each input document as the initial
            document and then outputs the original input documents without modification.
            </summary>
            <remarks>
            This allows a sequence of modules to execute without impacting the "main" module sequence.
            In other words, Branch executes it's child modules as if there were no Branch module
            in the sequence, but then when it's child modules are done, the main sequence of
            modules is executed as if there were no Branch.
            </remarks>
            <example>
            Assume you have a module, AddOne, that just adds 1 to whatever numeric value is in
            the content of the input document(s). The input and output content of the
            following pipeline should demonstrate what Branch does:
            <code>
                                // Input Content      // Output Content
            Pipelines.Add(
                AddOne(),       // [Empty]            // 0
                AddOne(),       // 0                  // 1
                AddOne(),       // 1                  // 2
                Branch(
                    AddOne(),   // 2                  // 3
                    AddOne()    // 3                  // 4
                ),
                AddOne(),       // 2                  // 3
                AddOne()        // 3                  // 4
            );
            </code>
            You can see that the input content to the AddOne modules after the Branch is the
            same as the input content to the AddOne modules inside the branch. The result of
            the modules in the Branch had no impact on those modules that run after the Branch.
            This is true for both content and metadata. If any modules inside the Branch created
            or changed metadata, it would be forgotten once the Branch was done.
            </example>
            <category>Control</category>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Branch.#ctor(Wyam.Common.Modules.IModule[])">
            <summary>
            Evaluates the specified modules with each input document as the initial
            document and then outputs the original input documents without modification.
            </summary>
            <param name="modules">The modules to execute.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Branch.#ctor(System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule})">
            <summary>
            Evaluates the specified modules with each input document as the initial
            document and then outputs the original input documents without modification.
            </summary>
            <param name="modules">The modules to execute.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Branch.Where(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Limits the documents passed to the child modules to those that satisfy the
            supplied predicate. All original input documents are output without
            modification regardless of whether they satisfy the predicate.
            </summary>
            <param name="predicate">A delegate that should return a <c>bool</c>.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Branch.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Control.Combine">
            <summary>
            Combines all of the input documents into a single output document.
            </summary>
            <remarks>
            The first input document serves as the basis for the combine operation. The content of every
            following input document is appended to the existing combined content, and the metadata of
            every following document replaces that of the previous documents (any metadata for which
            keys don't exist in the following documents is retained). A single output document with
            the combined content and metadata is output.
            </remarks>
            <category>Control</category>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Combine.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Control.Concat">
            <summary>
            Executes modules and concatenates their output with the input documents.
            </summary>
            <remarks>
            The specified modules are executed with an empty initial document and then
            outputs the original input documents without modification concatenated with the
            results from the specified module sequence.
            </remarks>
            <category>Control</category>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Concat.#ctor(Wyam.Common.Modules.IModule[])">
            <summary>
            Executes the specified modules with an empty initial input document.
            </summary>
            <param name="modules">The modules to execute.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Concat.#ctor(System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule})">
            <summary>
            Executes the specified modules with an empty initial input document.
            </summary>
            <param name="modules">The modules to execute.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Concat.Where(System.Func{Wyam.Common.Execution.IExecutionContext,Wyam.Common.Documents.IDocument,System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},System.Boolean})">
            <summary>
            Specifies a predicate to use when determining which documents to concatenate with the original list.
            </summary>
            <param name="predicate">The predicate to evaluate.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Concat.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Control.ConcatBranch">
            <summary>
            Executes a sequence of modules against the input documents and concatenates their results and the original input.
            This is similar to <see cref="T:Wyam.Core.Modules.Control.Branch"/> except that the results of the specified modules are concatenated with the
            original input documents instead of being forgotten.
            </summary>
            <category>Control</category>
        </member>
        <member name="M:Wyam.Core.Modules.Control.ConcatBranch.#ctor(Wyam.Common.Modules.IModule[])">
            <summary>
            Evaluates the specified modules with each input document as the initial
            document and then outputs the original input documents without modification concatenated with the result documents
            from the specified modules.
            </summary>
            <param name="modules">The modules to execute.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.ConcatBranch.#ctor(System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule})">
            <summary>
            Evaluates the specified modules with each input document as the initial
            document and then outputs the original input documents without modification concatenated with the result documents
            from the specified modules.
            </summary>
            <param name="modules">The modules to execute.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.ConcatBranch.Where(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Limits the documents passed to the child modules to those that satisfy the
            supplied predicate. All original input documents are output without
            modification regardless of whether they satisfy the predicate.
            </summary>
            <param name="predicate">A delegate that should return a <c>bool</c>.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.ConcatBranch.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Control.Documents">
            <summary>
            Inserts documents into the current pipeline.
            </summary>
            <remarks>
            Documents can be inserted either by replacing pipeline documents with previously
            processed ones or by creating new ones. If getting previously processed documents from another pipeline,
            this module copies the documents and places them into the current pipeline. Note that because this module
            does not remove the documents from their original pipeline it's likely you will end up with documents that
            have the same content and metadata in two different pipelines. This module does not include the input
            documents as part of it's output. If you want to concatenate the result of this module with the input
            documents, wrap it with the <see cref="T:Wyam.Core.Modules.Control.Concat"/> module.
            </remarks>
            <category>Control</category>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Documents.#ctor">
            <summary>
            This outputs all existing documents from all pipelines (except the current one).
            </summary>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Documents.#ctor(System.String)">
            <summary>
            This outputs the documents from the specified pipeline.
            </summary>
            <param name="pipeline">The pipeline to output documents from.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Documents.#ctor(Wyam.Common.Configuration.ContextConfig)">
            <summary>
            This will get documents based on the context so you can perform custom document
            fetching behavior. The delegate will only be called once,
            regardless of the number of input documents. The return value
            is expected to be a <c>IEnumerable&lt;IDocument&gt;</c>.
            </summary>
            <param name="documents">A delegate that should return
            a <c>IEnumerable&lt;IDocument&gt;</c> containing the documents to output.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Documents.#ctor(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            This will get documents based on each input document. The output will be the
            aggregate of all returned documents for each input document. The return value
            is expected to be a <c>IEnumerable&lt;IDocument&gt;</c>.
            </summary>
            <param name="documents">A delegate that should return
            a <c>IEnumerable&lt;IDocument&gt;</c> containing the documents to
            output for each input document.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Documents.#ctor(System.Int32)">
            <summary>
            Generates a specified number of new empty documents.
            </summary>
            <param name="count">The number of new documents to output.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Documents.#ctor(System.String[])">
            <summary>
            Generates new documents with the specified content.
            </summary>
            <param name="content">The content for each output document.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Documents.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}[])">
            <summary>
            Generates new documents with the specified metadata.
            </summary>
            <param name="metadata">The metadata for each output document.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Documents.#ctor(System.Tuple{System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}}[])">
            <summary>
            Generates new documents with the specified content and metadata.
            </summary>
            <param name="contentAndMetadata">The content and metadata for each output document.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Documents.Where(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Only documents that satisfy the predicate will be output.
            </summary>
            <param name="predicate">A delegate that should return a <c>bool</c>.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Documents.FromPipelines(System.String[])">
            <summary>
            Gets documents from additional pipeline(s). The final sequence of documents will
            be in the order they appear from all specified pipelines. If the empty constructor
            is used that outputs documents from all pipelines, this will override that behavior
            and only output the specified pipelines. Likewise, if another constructor was used
            that relies on a <see cref="T:Wyam.Common.Configuration.ContextConfig"/> or <see cref="T:Wyam.Common.Configuration.DocumentConfig"/> then
            using this method will throw <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="pipelines">The additional pipelines to get documents from.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Documents.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Control.ForEach">
            <summary>
            Executes the input documents one at a time against the specified child modules.
            </summary>
            <remarks>
            Normally, documents are executed in a breadth-first traversal where all documents
            are executed against a module before continuing with the next module. This module
            allows you to conduct a depth-first traversal instead by executing each document
            one at a time against the child modules before continuing with the next document.
            It can be especially helpful when trying to control memory usage for large
            documents such as images because it lets you move the documents through the
            pipeline one at a time. The aggregate outputs from each sequence of child modules
            executed against each document will be output.
            </remarks>
            <example>
            <code>
            Pipelines.Add("ImageProcessing",
               // ReadFiles will create N new documents with a Stream
                // (but nothing will be read into memory yet)
                ReadFiles(@"images\*"),
                // Each document will be individually sent through the
                // sequence of ForEach child pipelines
                ForEach(
                    // This will load the *current* document into memory
                    // and perform image manipulations on it
                    ImageProcessor()
                        //...
                        ,
                    // and this will save the stream to disk, replacing it with
                    // a file stream, thus freeing up memory for the next file
                    WriteFiles()
                )
            );
            </code>
            </example>
            <category>Control</category>
        </member>
        <member name="M:Wyam.Core.Modules.Control.ForEach.#ctor(Wyam.Common.Modules.IModule[])">
            <summary>
            Specifies the modules to execute against the input document one at a time.
            </summary>
            <param name="modules">The modules to execute.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.ForEach.#ctor(System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule})">
            <summary>
            Specifies the modules to execute against the input document one at a time.
            </summary>
            <param name="modules">The modules to execute.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.ForEach.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Control.FrontMatter">
            <summary>
            Extracts the first part of content for each document and sends it to a child module for processing.
            </summary>
            <remarks>
            This module is typically used in conjunction with the Yaml module to enable putting YAML front
            matter in a file. First, the content of each input document is scanned for a line that consists
            entirely of the delimiter character or (- by default) or the delimiter string. Once found, the
            content before the delimiter is passed to the specified child modules. Any metadata from the child
            module output document(s) is added to the input document. Note that if the child modules result
            in more than one output document, multiple clones of the input document will be made for each one.
            The output document content is set to the original content without the front matter.
            </remarks>
            <category>Control</category>
        </member>
        <member name="M:Wyam.Core.Modules.Control.FrontMatter.#ctor(Wyam.Common.Modules.IModule[])">
            <summary>
            Uses the default delimiter character and passes any front matter to the specified child modules for processing.
            </summary>
            <param name="modules">The modules to execute against the front matter.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.FrontMatter.#ctor(System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule})">
            <summary>
            Uses the default delimiter character and passes any front matter to the specified child modules for processing.
            </summary>
            <param name="modules">The modules to execute against the front matter.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.FrontMatter.#ctor(System.String,Wyam.Common.Modules.IModule[])">
            <summary>
            Uses the specified delimiter string and passes any front matter to the specified child modules for processing.
            </summary>
            <param name="delimiter">The delimiter to use.</param>
            <param name="modules">The modules to execute against the front matter.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.FrontMatter.#ctor(System.String,System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule})">
            <summary>
            Uses the specified delimiter string and passes any front matter to the specified child modules for processing.
            </summary>
            <param name="delimiter">The delimiter to use.</param>
            <param name="modules">The modules to execute against the front matter.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.FrontMatter.#ctor(System.Char,Wyam.Common.Modules.IModule[])">
            <summary>
            Uses the specified delimiter character and passes any front matter to the specified child modules for processing.
            </summary>
            <param name="delimiter">The delimiter to use.</param>
            <param name="modules">The modules to execute against the front matter.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.FrontMatter.#ctor(System.Char,System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule})">
            <summary>
            Uses the specified delimiter character and passes any front matter to the specified child modules for processing.
            </summary>
            <param name="delimiter">The delimiter to use.</param>
            <param name="modules">The modules to execute against the front matter.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.FrontMatter.IgnoreDelimiterOnFirstLine(System.Boolean)">
            <summary>
            Ignores the delimiter if it appears on the first line. This is useful when processing Jekyll style front matter that
            has the delimiter both above and below the front matter content. The default behavior is <c>true</c>.
            </summary>
            <param name="ignore">If set to <c>true</c>, ignore the delimiter if it appears on the first line.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.FrontMatter.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Control.GroupBy">
            <summary>
            Splits a sequence of documents into groups based on a specified function or metadata key.
            </summary>
            <remarks>
            This module forms groups from the output documents of the specified modules.
            Each input document is cloned for each group and metadata related
            to the groups, including the sequence of documents for each group,
            is added to each clone. For example, if you have 2 input documents
            and the result of grouping is 3 groups, this module will output 6 documents.
            </remarks>
            <metadata cref="F:Wyam.Common.Meta.Keys.GroupDocuments" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.GroupKey" usage="Output" />
            <category>Control</category>
        </member>
        <member name="M:Wyam.Core.Modules.Control.GroupBy.#ctor(Wyam.Common.Configuration.DocumentConfig,Wyam.Common.Modules.IModule[])">
            <summary>
            Partitions the result of the specified modules into groups with matching keys
            based on the key delegate.
            The input documents to GroupBy are used as
            the initial input documents to the specified modules.
            </summary>
            <param name="key">A delegate that returns the group key.</param>
            <param name="modules">Modules to execute on the input documents prior to grouping.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.GroupBy.#ctor(Wyam.Common.Configuration.DocumentConfig,System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule})">
            <summary>
            Partitions the result of the specified modules into groups with matching keys
            based on the key delegate.
            The input documents to GroupBy are used as
            the initial input documents to the specified modules.
            </summary>
            <param name="key">A delegate that returns the group key.</param>
            <param name="modules">Modules to execute on the input documents prior to grouping.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.GroupBy.#ctor(System.String,Wyam.Common.Modules.IModule[])">
            <summary>
            Partitions the result of the specified modules into groups with matching keys
            based on the value at the specified metadata key.
            If a document to group does not contain the specified metadata key, it is not included in any output groups.
            The input documents to GroupBy are used as
            the initial input documents to the specified modules.
            </summary>
            <param name="keyMetadataKey">The key metadata key.</param>
            <param name="modules">Modules to execute on the input documents prior to grouping.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.GroupBy.#ctor(System.String,System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule})">
            <summary>
            Partitions the result of the specified modules into groups with matching keys
            based on the value at the specified metadata key.
            If a document to group does not contain the specified metadata key, it is not included in any output groups.
            The input documents to GroupBy are used as
            the initial input documents to the specified modules.
            </summary>
            <param name="keyMetadataKey">The key metadata key.</param>
            <param name="modules">Modules to execute on the input documents prior to grouping.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.GroupBy.Where(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Limits the documents to be grouped to those that satisfy the supplied predicate.
            </summary>
            <param name="predicate">A delegate that should return a <c>bool</c>.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.GroupBy.WithComparer(System.Collections.Generic.IEqualityComparer{System.Object})">
            <summary>
            Specifies an equality comparer to use for the grouping.
            </summary>
            <param name="comparer">The equality comparer to use.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.GroupBy.WithComparer``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Specifies a typed equality comparer to use for the grouping. A conversion to the
            comparer type will be attempted for all metadata values. If the conversion fails,
            the value will not be considered equal. Note that this will also have the effect
            of treating different convertible types as being of the same type. For example,
            if you have two group keys, 1 and "1" (in that order), and use a string-based comparison, you will
            only end up with a single group for those documents with a group key of 1 (since the <c>int</c> key came first).
            </summary>
            <param name="comparer">The typed equality comparer to use.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.GroupBy.WithEmptyOutputIfNoGroups(System.Boolean)">
            <summary>
            Specifies that no documents should be output if there are no groups. This is in contrast to the
            default behavior of outputting the unmodified input documents if no groups were found.
            </summary>
            <param name="emptyOutput"><c>true</c> to not output documents when no groups are found.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.GroupBy.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Control.GroupByMany">
            <summary>
            Splits a sequence of documents into groups based on a specified function or metadata key
            that returns or contains a sequence of group keys.
            </summary>
            <remarks>
            This module forms groups from the output documents of the specified modules.
            If the function or metadata key returns or contains an enumerable, each item in the enumerable
            will become one of the grouping keys. If a document contains multiple group keys, it will
            be included in multiple groups. A good example is a tag engine where each document can contain
            any number of tags and you want to make groups for each tag including all the documents with that tag.
            Each input document is cloned for each group and metadata related
            to the groups, including the sequence of documents for each group,
            is added to each clone. For example, if you have 2 input documents
            and the result of grouping is 3 groups, this module will output 6 documents.
            </remarks>
            <metadata cref="F:Wyam.Common.Meta.Keys.GroupDocuments" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.GroupKey" usage="Output" />
            <category>Control</category>
        </member>
        <member name="M:Wyam.Core.Modules.Control.GroupByMany.#ctor(Wyam.Common.Configuration.DocumentConfig,Wyam.Common.Modules.IModule[])">
            <summary>
            Partitions the result of the specified modules into groups with matching keys
            based on the key delegate.
            The input documents to GroupBy are used as
            the initial input documents to the specified modules.
            </summary>
            <param name="key">A delegate that returns the group keys.</param>
            <param name="modules">Modules to execute on the input documents prior to grouping.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.GroupByMany.#ctor(Wyam.Common.Configuration.DocumentConfig,System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule})">
            <summary>
            Partitions the result of the specified modules into groups with matching keys
            based on the key delegate.
            The input documents to GroupBy are used as
            the initial input documents to the specified modules.
            </summary>
            <param name="key">A delegate that returns the group keys.</param>
            <param name="modules">Modules to execute on the input documents prior to grouping.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.GroupByMany.#ctor(System.String,Wyam.Common.Modules.IModule[])">
            <summary>
            Partitions the result of the specified modules into groups with matching keys
            based on the value at the specified metadata key.
            If a document to group does not contain the specified metadata key, it is not included in any output groups.
            The input documents to GroupBy are used as
            the initial input documents to the specified modules.
            </summary>
            <param name="keyMetadataKey">The key metadata key.</param>
            <param name="modules">Modules to execute on the input documents prior to grouping.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.GroupByMany.#ctor(System.String,System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule})">
            <summary>
            Partitions the result of the specified modules into groups with matching keys
            based on the value at the specified metadata key.
            If a document to group does not contain the specified metadata key, it is not included in any output groups.
            The input documents to GroupBy are used as
            the initial input documents to the specified modules.
            </summary>
            <param name="keyMetadataKey">The key metadata key.</param>
            <param name="modules">Modules to execute on the input documents prior to grouping.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.GroupByMany.Where(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Limits the documents to be grouped to those that satisfy the supplied predicate.
            </summary>
            <param name="predicate">A delegate that should return a <c>bool</c>.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.GroupByMany.WithComparer(System.Collections.Generic.IEqualityComparer{System.Object})">
            <summary>
            Specifies an equality comparer to use for the grouping.
            </summary>
            <param name="comparer">The equality comparer to use.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.GroupByMany.WithComparer``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Specifies a typed equality comparer to use for the grouping. A conversion to the
            comparer type will be attempted for all metadata values. If the conversion fails,
            the value will not be considered equal. Note that this will also have the effect
            of treating different convertible types as being of the same type. For example,
            if you have two group keys, 1 and "1" (in that order), and use a string-based comparison, you will
            only end up with a single group for those documents with a group key of 1 (since the <c>int</c> key came first).
            </summary>
            <param name="comparer">The typed equality comparer to use.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.GroupByMany.WithEmptyOutputIfNoGroups(System.Boolean)">
            <summary>
            Specifies that no documents should be output if there are no groups. This is in contrast to the
            default behavior of outputting the unmodified input documents if no groups were found.
            </summary>
            <param name="emptyOutput"><c>true</c> to not output documents when no groups are found.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.GroupByMany.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Control.If">
            <summary>
            Evaluates a series of child modules for each input document if a specified condition is met.
            </summary>
            <remarks>
            Any result documents from the child modules will be returned as the result of the
            this module. Any input documents that don't match a predicate will be returned as
            outputs without modification.
            </remarks>
            <category>Control</category>
        </member>
        <member name="M:Wyam.Core.Modules.Control.If.#ctor(Wyam.Common.Configuration.DocumentConfig,Wyam.Common.Modules.IModule[])">
            <summary>
            Specifies a predicate and a series of child modules to be evaluated if the predicate returns <c>true</c>.
            The predicate will be evaluated against every input document individually.
            </summary>
            <param name="predicate">A predicate delegate that should return a <c>bool</c>.</param>
            <param name="modules">The modules to execute on documents where the predicate is <c>true</c>.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.If.#ctor(Wyam.Common.Configuration.ContextConfig,Wyam.Common.Modules.IModule[])">
            <summary>
            Specifies a predicate and a series of child modules to be evaluated if the predicate returns <c>true</c>.
            The predicate will be evaluated once for all input documents.
            </summary>
            <param name="predicate">A predicate delegate that should return a <c>bool</c>.</param>
            <param name="modules">The modules to execute on documents if the predicate is <c>true</c>.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.If.ElseIf(Wyam.Common.Configuration.DocumentConfig,Wyam.Common.Modules.IModule[])">
            <summary>
            Specifies an alternate condition to be tested on documents that did not satisfy
            previous conditions. You can chain together as many <c>ElseIf</c> calls as needed.
            The predicate will be evaluated against every input document individually.
            </summary>
            <param name="predicate">A predicate delegate that should return a <c>bool</c>.</param>
            <param name="modules">The modules to execute on documents where the predicate is <c>true</c>.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.If.ElseIf(Wyam.Common.Configuration.ContextConfig,Wyam.Common.Modules.IModule[])">
            <summary>
            Specifies an alternate condition to be tested on documents that did not satisfy
            previous conditions. You can chain together as many <c>ElseIf</c> calls as needed.
            The predicate will be evaluated once for all input documents.
            </summary>
            <param name="predicate">A predicate delegate that should return a <c>bool</c>.</param>
            <param name="modules">The modules to execute on documents if the predicate is <c>true</c>.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.If.Else(Wyam.Common.Modules.IModule[])">
            <summary>
            This should be at the end of your fluent method chain and will evaluate the
            specified child modules on all documents that did not satisfy previous predicates.
            The predicate will be evaluated against every input document individually.
            </summary>
            <param name="modules">The modules to execute on documents where no previous predicate was <c>true</c>.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.If.WithoutUnmatchedDocuments(System.Boolean)">
            <summary>
            The default behavior of this module is to "fall through" any documents that
            didn't match one of the conditions and add it to the result set. This method
            allows you to change that behavior and prevent unmatched documents from being
            added to the result set.
            </summary>
            <param name="withoutUnmatchedDocuments">Set to <c>true</c> to prevent unmatched documents from being added to the resut set.</param>
            <returns>The current module.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.If.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Control.Merge">
            <summary>
            Replaces the content and merges metadata of each input document with the results of specified modules.
            </summary>
            <remarks>
            Replaces the content and merges the metadata of each input document with the results of the specified modules
            executed against an empty initial document. If more than one output document is generated by the specified modules,
            each input document will be merged with each result document.
            </remarks>
            <category>Control</category>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Merge.#ctor(Wyam.Common.Modules.IModule[])">
            <summary>
            The specified modules are executed against an empty initial document and the results
            are applied to every input document (possibly creating more than one output
            document for each input document).
            </summary>
            <param name="modules">The modules to execute.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Merge.#ctor(System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule})">
            <summary>
            The specified modules are executed against an empty initial document and the results
            are applied to every input document (possibly creating more than one output
            document for each input document).
            </summary>
            <param name="modules">The modules to execute.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Merge.ForEachDocument">
            <summary>
            Specifies that the whole sequence of modules should be executed for every input document
            (as opposed to the default behavior of the sequence of modules only being executed once
            with an empty initial document). This method has no effect if no modules are specified.
            </summary>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Merge.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Control.OrderBy">
            <summary>
            Orders the input documents based on the specified key function.
            </summary>
            <remarks>
            The ordered documents are output as the result of this module.
            </remarks>
            <category>Control</category>
        </member>
        <member name="M:Wyam.Core.Modules.Control.OrderBy.#ctor(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Orders the input documents using the specified delegate to get the ordering key.
            </summary>
            <param name="key">A delegate that should return the key to use for ordering.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.OrderBy.ThenBy(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Orders the input documents using the specified delegate to get a secondary ordering key.
            You can chain as many ThenBy calls together as needed.
            </summary>
            <param name="key">A delegate that should return the key to use for ordering.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.OrderBy.Descending(System.Boolean)">
            <summary>
            Specifies whether the documents should be output in descending order (the default is ascending order).
            If you use this method after called ThenBy, the descending ordering will apply to the secondary sort.
            </summary>
            <param name="descending">If set to <c>true</c>, the documents are output in descending order.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.OrderBy.WithComparer(System.Collections.Generic.IComparer{System.Object})">
            <summary>
            Specifies a comparer to use for the ordering.
            </summary>
            <param name="comparer">The comparer to use.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.OrderBy.WithComparer``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Specifies a typed comparer to use for the ordering. A conversion to the
            comparer type will be attempted for all metadata values. If the conversion fails,
            the values will be considered equivalent. Note that this will also have the effect
            of treating different convertible types as being of the same type. For example,
            if you have two keys, 1 and "1", and use a string-based comparison, the
            documents will compare as equal.
            </summary>
            <param name="comparer">The typed comparer to use.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.OrderBy.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Control.Paginate">
             <summary>
             Splits a sequence of documents into multiple pages.
             </summary>
             <remarks>
             This module forms pages from the output documents of the specified modules.
             Each input document is cloned for each page and metadata related
             to the pages, including the sequence of documents for each page,
             is added to each clone. For example, if you have 2 input documents
             and the result of paging is 3 pages, this module will output 6 documents.
             Note that if there are no documents to paginate, this module will still
             output an empty page without any documents inside the page.
             </remarks>
             <example>
             If your input document is a Razor template for a blog archive, you can use
             Paginate to get pages of 10 blog posts each. If you have 50 blog posts, the
             result of the Paginate module will be 5 copies of your input archive template,
             one for each page. Your configuration file might look something like this:
             <code>
             Pipelines.Add("Posts",
                 ReadFiles("*.md"),
                 Markdown(),
                 WriteFiles("html")
             );
            
             Pipelines.Add("Archive",
                 ReadFiles("archive.cshtml"),
                 Paginate(10,
                     Documents("Posts")
                 ),
                 Razor(),
                 WriteFiles(string.Format("archive-{0}.html", @doc["CurrentPage"]))
             );
             </code>
             </example>
             <metadata cref="F:Wyam.Common.Meta.Keys.PageDocuments" usage="Output" />
             <metadata cref="F:Wyam.Common.Meta.Keys.CurrentPage" usage="Output" />
             <metadata cref="F:Wyam.Common.Meta.Keys.TotalPages" usage="Output" />
             <metadata cref="F:Wyam.Common.Meta.Keys.TotalItems" usage="Output" />
             <metadata cref="F:Wyam.Common.Meta.Keys.HasNextPage" usage="Output" />
             <metadata cref="F:Wyam.Common.Meta.Keys.HasPreviousPage" usage="Output" />
             <metadata cref="F:Wyam.Common.Meta.Keys.NextPage" usage="Output" />
             <metadata cref="F:Wyam.Common.Meta.Keys.PreviousPage" usage="Output" />
             <category>Control</category>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Paginate.#ctor(System.Int32,Wyam.Common.Modules.IModule[])">
            <summary>
            Partitions the result of the specified modules into the specified number of pages. The
            input documents to Paginate are used as the initial input documents to the specified modules.
            </summary>
            <param name="pageSize">The number of documents on each page.</param>
            <param name="modules">The modules to execute to get the documents to page.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Paginate.#ctor(System.Int32,System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule})">
            <summary>
            Partitions the result of the specified modules into the specified number of pages. The
            input documents to Paginate are used as the initial input documents to the specified modules.
            </summary>
            <param name="pageSize">The number of documents on each page.</param>
            <param name="modules">The modules to execute to get the documents to page.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Paginate.Where(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Limits the documents to be paged to those that satisfy the supplied predicate.
            </summary>
            <param name="predicate">A delegate that should return a <c>bool</c>.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Paginate.TakePages(System.Int32)">
            <summary>
            Only outputs a specific number of pages.
            </summary>
            <param name="count">The number of pages to output.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Paginate.SkipPages(System.Int32)">
            <summary>
            Skips a specified number of pages before outputting pages.
            </summary>
            <param name="count">The number of pages to skip.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Paginate.WithPageMetadata(System.String,Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Adds the specified metadata to each page index document. This must be performed
            within the paginate module. If you attempt to process the page index documents
            from the paginate module after execution, it will "disconnect" metadata for
            those documents like <see cref="F:Wyam.Common.Meta.Keys.NextPage"/> since you're effectivly
            creating new documents and the ones those keys refer to will be outdated.
            </summary>
            <param name="key">The key of the metadata to add.</param>
            <param name="metadata">A delegate with the value for the metadata.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Paginate.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Control.Sidecar">
            <summary>
            Extracts the content of a Sidecar file for each document and sends it to a child module for processing.
            </summary>
            <remarks>
            This module is typically used in conjunction with the Yaml module to enable putting YAML in a Sidecar file.
            First, an attempt is made to find the specified sidecar file for each input document. Once found, the
            content in this file is passed to the specified child module(s). Any metadata from the child
            module output document(s) is added to the input document. Note that if the child module(s) result
            in more than one output document, multiple clones of the input document will be made for each one.
            The output document content is set to the original input document content.
            </remarks>
            <metadata cref="F:Wyam.Common.Meta.Keys.SourceFilePath" usage="Input">
            Used as the default location at which to search for sidecar files for a given document.
            </metadata>
            <category>Control</category>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Sidecar.#ctor(Wyam.Common.Modules.IModule[])">
            <summary>
            Searches for sidecar files at the same path as the input document SourceFilePath with the additional extension .meta.
            If a sidecar file is found, it's content is passed to the specified child modules for processing.
            </summary>
            <param name="modules">The modules to execute against the sidecar file.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Sidecar.#ctor(System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule})">
            <summary>
            Searches for sidecar files at the same path as the input document SourceFilePath with the additional extension .meta.
            If a sidecar file is found, it's content is passed to the specified child modules for processing.
            </summary>
            <param name="modules">The modules to execute against the sidecar file.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Sidecar.#ctor(System.String,Wyam.Common.Modules.IModule[])">
            <summary>
            Searches for sidecar files at the same path as the input document SourceFilePath with the specified additional extension.
            If a sidecar file is found, it's content is passed to the specified child modules for processing.
            </summary>
            <param name="extension">The extension to search.</param>
            <param name="modules">The modules to execute against the sidecar file.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Sidecar.#ctor(System.String,System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule})">
            <summary>
            Searches for sidecar files at the same path as the input document SourceFilePath with the specified additional extension.
            If a sidecar file is found, it's content is passed to the specified child modules for processing.
            </summary>
            <param name="extension">The extension to search.</param>
            <param name="modules">The modules to execute against the sidecar file.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Sidecar.#ctor(Wyam.Common.Configuration.DocumentConfig,Wyam.Common.Modules.IModule[])">
            <summary>
            Uses a delegate to describe where to find the sidecar file for each input document.
            If a sidecar file is found, it's content is passed to the specified child modules for processing.
            </summary>
            <param name="sidecarPath">A delegate that returns a <see cref="T:Wyam.Common.IO.FilePath"/> with the desired sidecar path.</param>
            <param name="modules">The modules to execute against the sidecar file.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Sidecar.#ctor(Wyam.Common.Configuration.DocumentConfig,System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule})">
            <summary>
            Uses a delegate to describe where to find the sidecar file for each input document.
            If a sidecar file is found, it's content is passed to the specified child modules for processing.
            </summary>
            <param name="sidecarPath">A delegate that returns a <see cref="T:Wyam.Common.IO.FilePath"/> with the desired sidecar path.</param>
            <param name="modules">The modules to execute against the sidecar file.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Sidecar.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Control.Sort">
            <summary>
            Sorts the input documents based on the specified comparison delegate.
            </summary>
            <remarks>
            The sorted documents are output as the result of this module. This is similar
            to the <see cref="T:Wyam.Core.Modules.Control.OrderBy"/> module but gives greater control over the sorting
            process.
            </remarks>
            <category>Control</category>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Sort.#ctor(System.Comparison{Wyam.Common.Documents.IDocument})">
            <summary>
            Creates a sort module.
            </summary>
            <param name="sort">The sorting delegate to use.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Sort.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Control.Switch">
            <summary>
            Executes sequences of modules depending on whether the input document contains a specified value.
            </summary>
            <remarks>
            When creating a Switch module you specify a delegate that will get an object for each document. Cases are then
            defined via fluent methods that compare the returned object for each document against a supplied object (or array).
            If the defined object or any of the objects in the array for the case equal the one for the document, the modules
            in the case are executed. The output of the module is the aggregate output of executing the specified modules against
            documents matching each case. If a document document match a case, it is output against the default case (if defined)
            or output without modification (if no default is defined).
            </remarks>
            <category>Control</category>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Switch.#ctor(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Defines the delegate that will be invoked against each input document to get the case comparison value.
            </summary>
            <param name="value">A delegate that returns an object to compare cases against.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Switch.Case(System.Object,Wyam.Common.Modules.IModule[])">
            <summary>
            Defines a case.
            </summary>
            <param name="value">The value to compare to the one returned by the document delegate. Must be a primitive object or an array of primitive objects.</param>
            <param name="modules">The modules to execute if the case object (or any objects in the array) matches the document object.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Switch.Default(Wyam.Common.Modules.IModule[])">
            <summary>
            Defines modules to execute against documents that don't match a case.
            </summary>
            <param name="modules">The modules to execute against documents that don't match a case.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Switch.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Control.Take">
            <summary>
            Takes the first X documents from the current pipeline and discards the rest.
            </summary>
            <category>Control</category>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Take.#ctor(System.Int32)">
            <summary>
            Takes the first X documents from the current pipeline and discards the rest.
            </summary>
            <param name="x">An integer representing the number of documents to preserve from the current pipeline.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Take.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Control.Where">
            <summary>
            Filters the current sequence of modules using a predicate.
            </summary>
            <category>Control</category>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Where.#ctor(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Specifies the predicate to use for filtering documents.
            Only input documents for which the predicate returns <c>true</c> will be output.
            </summary>
            <param name="predicate">A predicate delegate that should return a <c>bool</c>.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Control.Where.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Extensibility.Execute">
            <summary>
            Executes custom code that returns documents, modules, or new content.
            </summary>
            <remarks>
            This module is very useful for customizing pipeline execution without having to write an entire module.
            Returning modules from the delegate is also useful for customizing existing modules based on the
            current set of documents. For example, you can use this module to execute the <see cref="T:Wyam.Core.Modules.Contents.Replace"/> module
            with customized search strings based on the results of other pipelines.
            </remarks>
            <category>Extensibility</category>
        </member>
        <member name="M:Wyam.Core.Modules.Extensibility.Execute.#ctor(Wyam.Common.Configuration.DocumentConfig,System.Boolean)">
            <summary>
            Specifies a delegate that should be invoked once for each input document. If the delegate
            returns a <c>IEnumerable&lt;IDocument&gt;</c> or <see cref="T:Wyam.Common.Documents.IDocument"/>, the document(s) will be the
            output(s) of this module. If the delegate returns a <c>IEnumerable&lt;IModule&gt;</c> or
            <see cref="T:Wyam.Common.Modules.IModule"/>, the module(s) will be executed with each input document as their input
            and the results will be the output of this module. If the delegate returns null,
            this module will just output the input document. If anything else is returned, the input
            document will be output with the string value of the delegate result as it's content.
            </summary>
            <param name="execute">A delegate to invoke that should return a <c>IEnumerable&lt;IDocument&gt;</c>,
            <see cref="T:Wyam.Common.Documents.IDocument"/>, <c>IEnumerable&lt;IModule&gt;</c>, <see cref="T:Wyam.Common.Modules.IModule"/>, object, or null.</param>
            <param name="parallel">The delegate is usually evaluated and each input document is processed in parallel.
            Setting this to <c>false</c> runs evaluates and processes each document in their original input order.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Extensibility.Execute.#ctor(System.Action{Wyam.Common.Documents.IDocument,Wyam.Common.Execution.IExecutionContext},System.Boolean)">
            <summary>
            Specifies a delegate that should be invoked once for each input document.
            The output from this module will be the input documents.
            </summary>
            <param name="execute">An action to execute on each input document.</param>
            <param name="parallel">The delegate is usually evaluated and each input document is processed in parallel.
            Setting this to <c>false</c> runs evaluates and processes each document in their original input order.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Extensibility.Execute.#ctor(Wyam.Common.Configuration.ContextConfig)">
            <summary>
            Specifies a delegate that should be invoked once for all input documents. If the delegate
            returns a <c>IEnumerable&lt;IDocument&gt;</c> or <see cref="T:Wyam.Common.Documents.IDocument"/>, the document(s) will be the
            output(s) of this module. If the delegate returns a <c>IEnumerable&lt;IModule&gt;</c> or
            <see cref="T:Wyam.Common.Modules.IModule"/>, the module(s) will be executed with the input documents as their input
            and the results will be the output of this module. If the delegate returns null,
            this module will just output the input documents. If anything else is returned, an exception will be thrown.
            </summary>
            <param name="execute">A delegate to invoke that should return a <c>IEnumerable&lt;IDocument&gt;</c>,
            <see cref="T:Wyam.Common.Documents.IDocument"/>, <c>IEnumerable&lt;IModule&gt;</c>, <see cref="T:Wyam.Common.Modules.IModule"/>, or null.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Extensibility.Execute.#ctor(System.Action{Wyam.Common.Execution.IExecutionContext})">
            <summary>
            Specifies a delegate that should be invoked once for all input documents.
            The output from this module will be the input documents.
            </summary>
            <param name="execute">An action to execute.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Extensibility.Execute.#ctor(System.Func{System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext,System.Object,System.Object})">
            <summary>
            Specifies a delegate that should be invoked for all input documents. If the delegate
            returns a <c>IEnumerable&lt;IDocument&gt;</c> or <see cref="T:Wyam.Common.Documents.IDocument"/>, the document(s) will be the
            output(s) of this module. If the delegate returns null or anything else, this module will just output the input documents.
            The third parameter of the delegate is primarly to aid overload resolution between this and the other constructors.
            The value <c>null</c> will be passed for now, though it might be used for something else in a future version.
            </summary>
            <param name="execute">A delegate to invoke that should return a <c>IEnumerable&lt;IDocument&gt;</c>, <see cref="T:Wyam.Common.Documents.IDocument"/>, or null.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Extensibility.Execute.Wyam#Common#Modules#IModule#Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Extensibility.ModuleCollection">
             <summary>
             Executes child modules enabling better reuse.
             </summary>
             <remarks>
             All child modules will be executed as if they were inline. This enables you to specify
             a sequence of modules outside of a pipeline and then reuse that sequence of modules
             in multiple pipelines. Note that this module is also handy for wrapping a single module
             that has a complex configuration if you expect to use it in multiple places.
             </remarks>
             <example>
             <code>
             ModuleCollection common = ModuleCollection(ModuleA(), ModuleB(), ModuleC());
            
             Piplines.Add("A",
                 ModuleX(),
                 ModuleY(),
                 common,
                 ModuleZ()
             );
            
             Piplines.Add("B",
                 ModuleX(),
                 common,
                 ModuleZ()
             );
             </code>
             </example>
             <category>Extensibility</category>
        </member>
        <member name="M:Wyam.Core.Modules.Extensibility.ModuleCollection.#ctor(Wyam.Common.Modules.IModule[])">
            <summary>
            Creates a module collection with the specified child modules.
            Any <c>null</c> items in the sequence of modules will be discarded.
            </summary>
            <param name="modules">The child modules.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Extensibility.ModuleCollection.#ctor(System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule})">
            <summary>
            Creates a module collection with the specified child modules.
            Any <c>null</c> items in the sequence of modules will be discarded.
            </summary>
            <param name="modules">The child modules.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Extensibility.ModuleCollection.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Extensibility.Trace">
            <summary>
            Outputs trace messages during execution.
            </summary>
            <remarks>
            This module has no effect on documents and the input documents are passed through to output documents.
            </remarks>
            <category>Extensibility</category>
        </member>
        <member name="M:Wyam.Core.Modules.Extensibility.Trace.#ctor(System.Object)">
            <summary>
            Outputs the string value of the specified object to trace.
            </summary>
            <param name="content">The content to trace.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Extensibility.Trace.#ctor(Wyam.Common.Configuration.ContextConfig)">
            <summary>
            Outputs the string value of the returned object to trace. This allows
            you to trace different content depending on the execution context.
            </summary>
            <param name="content">A delegate that returns the content to trace.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Extensibility.Trace.#ctor(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Outputs the string value of the returned object to trace. This allows
            you to trace different content for each document depending on the input document.
            </summary>
            <param name="content">A delegate that returns the content to trace.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Extensibility.Trace.#ctor(Wyam.Common.Modules.IModule[])">
            <summary>
            The specified modules are executed against an empty initial document and the
            resulting document content is output to trace.
            </summary>
            <param name="modules">The modules to execute.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Extensibility.Trace.EventType(System.Diagnostics.TraceEventType)">
            <summary>
            Sets the event type to trace.
            </summary>
            <param name="traceEventType">The event type to trace.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Extensibility.Trace.Execute(System.Object,Wyam.Common.Documents.IDocument,Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.IO.CopyFiles">
            <summary>
            Copies the content of files from one path on to another path.
            </summary>
            <remarks>
            For each output document, several metadata values are set with information about the file.
            By default, files are copied from the input folder (or a subfolder) to the same relative
            location in the output folder, but this doesn't have to be the case. The output of this module are documents
            with metadata representing the files copied by the module. Note that the input documents are not output by this
            module.
            </remarks>
            <metadata cref="F:Wyam.Common.Meta.Keys.SourceFilePath" usage="Output">The full path (including file name) of the source file.</metadata>
            <metadata cref="F:Wyam.Common.Meta.Keys.DestinationFilePath" usage="Output">The full path (including file name) of the destination file.</metadata>
            <category>Input/Output</category>
        </member>
        <member name="M:Wyam.Core.Modules.IO.CopyFiles.#ctor(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Copies all files that match the specified globbing patterns and/or absolute paths. This allows you to specify different
            patterns and/or paths depending on the input document.
            When this constructor is used, the module is evaluated once for every input document, which may result in copying the same file
            more than once (and may also result in IO conflicts since copying is typically done in parallel). It is recommended you only
            specify a function-based source path if there will be no overlap between the path returned from each input document.
            </summary>
            <param name="patterns">A delegate that returns one or more globbing patterns and/or absolute paths.</param>
        </member>
        <member name="M:Wyam.Core.Modules.IO.CopyFiles.#ctor(System.String[])">
            <summary>
            Copies all files that match the specified globbing patterns and/or absolute paths. When this constructor is used, the module is
            evaluated only once against empty input document. This makes it possible to string multiple CopyFiles modules together in one pipeline.
            Keep in mind that the result of the whole pipeline in this case will be documents representing the files copied only by the last CopyFiles
            module in the pipeline (since the output documents of the previous CopyFiles modules will have been consumed by the last one).
            </summary>
            <param name="patterns">The globbing patterns and/or absolute paths to read.</param>
        </member>
        <member name="M:Wyam.Core.Modules.IO.CopyFiles.Where(System.Func{Wyam.Common.IO.IFile,System.Boolean})">
            <summary>
            Specifies a predicate that must be satisfied for the file to be copied.
            </summary>
            <param name="predicate">A predicate that returns <c>true</c> if the file should be copied.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.CopyFiles.To(System.Func{Wyam.Common.IO.IFile,Wyam.Common.IO.FilePath})">
            <summary>
            Specifies an alternate destination path for each file (by default files are copied to their
            same relative path in the output directory). The output of the function should be the full
            file path (including file name) of the destination file. If the delegate returns
            <c>null</c> for a particular file, that file will not be copied.
            </summary>
            <param name="destinationPath">A delegate that specifies an alternate destination.
            The parameter contains the source <see cref="T:Wyam.Common.IO.IFile"/>.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.CopyFiles.To(System.Func{Wyam.Common.IO.IFile,Wyam.Common.IO.IFile,Wyam.Common.IO.FilePath})">
            <summary>
            Specifies an alternate destination path for each file (by default files are copied to their
            same relative path in the output directory). The output of the function should be the full
            file path (including file name) of the destination file. If the delegate returns
            <c>null</c> for a particular file, that file will not be copied. This overload allows you to
            view the <see cref="T:Wyam.Common.IO.IFile"/> where the module would normally have copied the file to and then
            manipulate it (or not) as appropriate.
            </summary>
            <param name="destinationPath">A delegate that specifies an alternate destination.
            The first parameter contains the source <see cref="T:Wyam.Common.IO.IFile"/> and the second contains
            an <see cref="T:Wyam.Common.IO.IFile"/> representing the calculated destination.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.CopyFiles.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.IO.Download">
            <summary>
            Downloads from HTTP and outputs the results as new documents.
            </summary>
            <remarks>
            The original input documents are ignored and are not part of the output
            of this module. If you want to retain the original input documents, consider using the
            <see cref="T:Wyam.Core.Modules.Control.ConcatBranch"/> module.
            </remarks>
            <metadata cref="F:Wyam.Common.Meta.Keys.SourceUri" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.SourceHeaders" usage="Output" />
            <category>Input/Output</category>
        </member>
        <member name="M:Wyam.Core.Modules.IO.Download.#ctor(System.String[])">
            <summary>
            Downloads the specified URIs with a default request header.
            </summary>
            <param name="uris">The URIs to download.</param>
        </member>
        <member name="M:Wyam.Core.Modules.IO.Download.#ctor(System.String,Wyam.Core.Modules.IO.RequestHeaders)">
            <summary>
            Downloads the specified URI with the specified request header.
            </summary>
            <param name="uri">The URI to download.</param>
            <param name="headers">The request header to use.</param>
        </member>
        <member name="M:Wyam.Core.Modules.IO.Download.WithUris(System.String[])">
            <summary>
            Downloads the specified URIs with a default request header.
            </summary>
            <param name="uris">The URIs to download.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.Download.WithUri(System.String,Wyam.Core.Modules.IO.RequestHeaders)">
            <summary>
            Downloads the specified URI with the specified request header.
            </summary>
            <param name="uri">The URI to download.</param>
            <param name="headers">The request header to use.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.Download.WithRequests(Wyam.Core.Modules.IO.DownloadRequest[])">
            <summary>
            Downloads the specified requests.
            </summary>
            <param name="requests">The requests to download.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.Download.CacheResponses(System.Boolean)">
            <summary>
            Indicates whether the downloaded response should be cached between regenerations.
            </summary>
            <param name="cacheResponses">If set to <c>true</c>, the response is cached (the default is <c>false</c>).</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.Download.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.IO.DownloadRequest">
            <summary>
            A download request for use with the <see cref="T:Wyam.Core.Modules.IO.Download"/> module.
            </summary>
        </member>
        <member name="P:Wyam.Core.Modules.IO.DownloadRequest.Uri">
            <summary>
            The URI to download from.
            </summary>
        </member>
        <member name="P:Wyam.Core.Modules.IO.DownloadRequest.Headers">
            <summary>
            Request headers.
            </summary>
        </member>
        <member name="P:Wyam.Core.Modules.IO.DownloadRequest.QueryString">
            <summary>
            The query string parameters. These will be combined with any that already exist in <see cref="P:Wyam.Core.Modules.IO.DownloadRequest.Uri"/>.
            </summary>
        </member>
        <member name="P:Wyam.Core.Modules.IO.DownloadRequest.Method">
            <summary>
            The method to use.
            </summary>
        </member>
        <member name="P:Wyam.Core.Modules.IO.DownloadRequest.Content">
            <summary>
            The content of the request (has no effect for some methods like GET).
            </summary>
        </member>
        <member name="P:Wyam.Core.Modules.IO.DownloadRequest.Credentials">
            <summary>
            The network credentials to use for the request.
            </summary>
        </member>
        <member name="M:Wyam.Core.Modules.IO.DownloadRequest.#ctor(System.String)">
            <summary>
            Creates a new download request.
            </summary>
            <param name="uri">The URI to download from.</param>
        </member>
        <member name="M:Wyam.Core.Modules.IO.DownloadRequest.#ctor(System.Uri)">
            <summary>
            Creates a new download request.
            </summary>
            <param name="uri">The URI to download from.</param>
        </member>
        <member name="M:Wyam.Core.Modules.IO.DownloadRequest.WithHeaders(Wyam.Core.Modules.IO.RequestHeaders)">
            <summary>
            Sets the request headers.
            </summary>
            <param name="headers">The request headers to set.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.DownloadRequest.WithQueryString(System.String,System.String)">
            <summary>
            Sets a query string value.
            </summary>
            <param name="name">The name of the query string parameter.</param>
            <param name="value">The value of the query string parameter.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.DownloadRequest.WithMethod(System.Net.Http.HttpMethod)">
            <summary>
            Sets the request method.
            </summary>
            <param name="method">The method to set.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.DownloadRequest.WithContent(System.Net.Http.HttpContent)">
            <summary>
            Sets the content of the request (only applicable to some request methods).
            </summary>
            <param name="content">The content to set.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.DownloadRequest.WithContent(System.String)">
            <summary>
            Sets the string content of the request (only applicable to some request methods).
            </summary>
            <param name="content">The content to set.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.DownloadRequest.WithCredentials(System.Net.NetworkCredential)">
            <summary>
            Sets the credentials to use for the request.
            </summary>
            <param name="credentials">The credentials to use.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.DownloadRequest.WithCredentials(System.String,System.String)">
            <summary>
            Sets the credentials to use for the request.
            </summary>
            <param name="userName">The username to use.</param>
            <param name="password">The password to use.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="T:Wyam.Core.Modules.IO.Include">
            <summary>
            Processes include statements to include files from the file system.
            </summary>
            <remarks>
            This module will look for include statements in the content of each document and
            will replace them with the content of the requested file from the file system.
            Include statements take the form <c>^"folder/file.ext"</c>. The given path will be
            converted to a <see cref="T:Wyam.Common.IO.FilePath"/> and can be absolute or relative. If relative,
            it should be relative to the document source. You can escape the include syntax by
            prefixing the <c>^</c> with a forward slash <c>\</c>.
            </remarks>
            <category>Input/Output</category>
        </member>
        <member name="M:Wyam.Core.Modules.IO.Include.WithRecursion(System.Boolean)">
            <summary>
            Specifies whether the include processing should be recursive. If <c>true</c> (which
            is the default), then include statements will also be processed in the content of
            included files recursively.
            </summary>
            <param name="recursion"><c>true</c> if included content should be recursively processed.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.Include.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.IO.ReadApplicationInput">
            <summary>
            Reads text provided to the application on startup.
            </summary>
            <remarks>
            This modules creates a single document from text provided to Wyam on startup. In most cases, this will be text or file contents
            "piped" to the Wyam.exe via the command line from a file or prior chained executable. Also known as "Standard Input" or "STDIN".
            </remarks>
            <example>
            An example of piping the output of a prior executable to Wyam.
            <code>
            AnotherProgram.exe | Wyam.exe
            </code>
            </example>
            <example>
            An example of redirecting the contents of a file to Wyam.
            <code>
            Wyam.exe &lt; my_initial_document.txt
            </code>
            </example>
            <example>
            This would read the application input, and write it to a file called "stdin.html"
            <code>
            Pipelines.Add("StandardInputDoc",
               ReadApplicationInput(),
               Meta("WritePath", "stdin.html"),
               WriteFiles()
            );
            </code>
            </example>
            <category>Input/Output</category>
        </member>
        <member name="M:Wyam.Core.Modules.IO.ReadApplicationInput.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.IO.ReadFiles">
            <summary>
            Reads the content of files from the file system into the content of new documents.
            </summary>
            <remarks>
            For each output document, several metadata values are set with information about the file. This module will
            be executed once and input documents will be ignored if search patterns are specified. Otherwise, if a delegate
            is specified, the module will be executed once per input document and the resulting output documents will be
            aggregated. In either case, the input documents will not be returned as output of this module. If you want to add
            additional files to a current pipeline, you should enclose your ReadFiles modules with <see cref="T:Wyam.Core.Modules.Control.Concat"/>.
            </remarks>
            <metadata cref="F:Wyam.Common.Meta.Keys.SourceFileRoot" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.SourceFileBase" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.SourceFileExt" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.SourceFileName" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.SourceFileDir" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.SourceFilePath" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.SourceFilePathBase" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.RelativeFilePath" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.RelativeFilePathBase" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.RelativeFileDir" usage="Output" />
            <category>Input/Output</category>
        </member>
        <member name="M:Wyam.Core.Modules.IO.ReadFiles.#ctor(Wyam.Common.Configuration.ContextConfig)">
            <summary>
            Reads all files that match the specified globbing patterns and/or absolute paths. This allows you to
            specify different patterns and/or paths depending on the context.
            </summary>
            <param name="patterns">A delegate that returns one or more globbing patterns and/or absolute paths.</param>
        </member>
        <member name="M:Wyam.Core.Modules.IO.ReadFiles.#ctor(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Reads all files that match the specified globbing patterns and/or absolute paths. This allows you to
            specify different patterns and/or paths depending on the input.
            </summary>
            <param name="patterns">A delegate that returns one or more globbing patterns and/or absolute paths.</param>
        </member>
        <member name="M:Wyam.Core.Modules.IO.ReadFiles.#ctor(System.String[])">
            <summary>
            Reads all files that match the specified globbing patterns and/or absolute paths.
            </summary>
            <param name="patterns">The globbing patterns and/or absolute paths to read.</param>
        </member>
        <member name="M:Wyam.Core.Modules.IO.ReadFiles.Where(System.Func{Wyam.Common.IO.IFile,System.Boolean})">
            <summary>
            Specifies a predicate that must be satisfied for the file to be read.
            </summary>
            <param name="predicate">A predicate that returns <c>true</c> if the file should be read.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.ReadFiles.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.IO.RequestHeaders">
            <summary>
            The request headers to use with the <see cref="T:Wyam.Core.Modules.IO.Download"/> module.
            </summary>
        </member>
        <member name="M:Wyam.Core.Modules.IO.RequestHeaders.#ctor">
            <summary>
            Creates a new empty set of request headers.
            </summary>
        </member>
        <member name="M:Wyam.Core.Modules.IO.RequestHeaders.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Creates the specified request headers.
            </summary>
            <param name="headers">The request headers to create.</param>
        </member>
        <member name="M:Wyam.Core.Modules.IO.RequestHeaders.Add(System.String,System.String)">
            <summary>
            Adds a new request header.
            </summary>
            <param name="name">The name of the request header to add.</param>
            <param name="value">The value of the request header to add.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.RequestHeaders.Add(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a new request header with multiple values.
            </summary>
            <param name="name">The name of the request header to add.</param>
            <param name="value">The value of the request header to add.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.RequestHeaders.Remove(System.String)">
            <summary>
            Removes a request header.
            </summary>
            <param name="name">The name of the request header to remove.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="T:Wyam.Core.Modules.IO.UnwrittenFiles">
            <summary>
            Outputs only those documents that have not yet been written to the file system.
            </summary>
            <remarks>
            The constructors and file resolution logic follows the same semantics as <see cref="T:Wyam.Core.Modules.IO.WriteFiles"/>.
            This module is useful for eliminating documents from the pipeline on subsequent runs depending
            on if they've already been written to disk. For example, you might want to put this module
            right after <see cref="T:Wyam.Core.Modules.IO.ReadFiles"/> for a pipeline that does a lot of expensive image processing since
            there's no use in processing images that have already been processed. Note that only the
            file name is checked and that this module cannot determine if the content would have been
            the same had a document not been removed from the pipeline. Also note that <strong>you should only
            use this module if you're sure that no other pipelines rely on the output documents</strong>. Because
            this module removes documents from the pipeline, those documents will never reach the
            end of the pipeline and any other modules or pages that rely on them (for example, an
            image directory) will not be correct.
            </remarks>
            <category>Input/Output</category>
        </member>
        <member name="M:Wyam.Core.Modules.IO.UnwrittenFiles.#ctor(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Uses a delegate to describe where to write the content of each document.
            The output of the function should be either a full path to the disk
            location (including file name) or a path relative to the output folder.
            </summary>
            <param name="path">A delegate that returns a <c>string</c> with the desired path.</param>
        </member>
        <member name="M:Wyam.Core.Modules.IO.UnwrittenFiles.#ctor(System.String)">
            <summary>
            Writes the document content to disk with the specified extension with the same
            base file name and relative path as the input file. This requires metadata
            for <c>RelativeFilePath</c> to be set (which is done by default by the <see cref="T:Wyam.Core.Modules.IO.ReadFiles"/> module).
            </summary>
            <param name="extension">The extension to use for writing the file.</param>
        </member>
        <member name="M:Wyam.Core.Modules.IO.UnwrittenFiles.#ctor">
            <summary>
            Writes the document content to disk with the same file name and relative path
            as the input file. This requires metadata for <c>RelativeFilePath</c> to be set
            (which is done by default by the <see cref="T:Wyam.Core.Modules.IO.ReadFiles"/> module).
            </summary>
        </member>
        <member name="M:Wyam.Core.Modules.IO.UnwrittenFiles.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.IO.WriteFiles">
            <summary>
            Writes the content of each input document to the file system.
            </summary>
            <remarks>
            If the metadata keys <c>WriteFileName</c> (which requires <c>RelativeFileDir</c> to be
            set, usually by the ReadFiles module), <c>WriteExtension</c> (which
            requires <c>RelativeFilePath</c> to be set, usually by the <see cref="T:Wyam.Core.Modules.IO.ReadFiles"/> module)
            or <c>WritePath</c> are set on an input document, that value will be used instead
            of what's specified in the module. For example, if you have a bunch
            of Razor .cshtml files that need to be rendered to .html files but one of them
            should be output as a .xml file instead, define the <c>WriteExtension</c> metadata value
            in the front matter of the page.
            </remarks>
            <metadata cref="F:Wyam.Common.Meta.Keys.RelativeFilePath" usage="Input">
            Used in combination with <see cref="F:Wyam.Common.Meta.Keys.WriteExtension"/> to determine an
            alternate location to write the file.
            </metadata>
            <metadata cref="F:Wyam.Common.Meta.Keys.RelativeFileDir" usage="Input">
            Used in combination with <see cref="F:Wyam.Common.Meta.Keys.WriteFileName"/> to determine an
            alternate location to write the file.
            </metadata>
            <metadata cref="F:Wyam.Common.Meta.Keys.WriteExtension" usage="Input" />
            <metadata cref="F:Wyam.Common.Meta.Keys.WriteFileName" usage="Input" />
            <metadata cref="F:Wyam.Common.Meta.Keys.WritePath" usage="Input" />
            <metadata cref="F:Wyam.Common.Meta.Keys.WritePath" usage="Output">
            The write path is output if the module is in metadata-only mode so that following
            executions of the <see cref="T:Wyam.Core.Modules.IO.WriteFiles"/> module will write the document to the
            calculated output path.
            </metadata>
            <metadata cref="F:Wyam.Common.Meta.Keys.RelativeFilePath" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.RelativeFilePathBase" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.RelativeFileDir" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.DestinationFileBase" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.DestinationFileExt" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.DestinationFileName" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.DestinationFileDir" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.DestinationFilePath" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.DestinationFilePathBase" usage="Output" />
            <category>Input/Output</category>
        </member>
        <member name="M:Wyam.Core.Modules.IO.WriteFiles.#ctor(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Uses a delegate to describe where to write the content of each document.
            The output of the function should be either a full path to the disk
            location (including file name) or a path relative to the output folder.
            </summary>
            <param name="path">A delegate that returns a <see cref="T:Wyam.Common.IO.FilePath"/> with the desired path.</param>
        </member>
        <member name="M:Wyam.Core.Modules.IO.WriteFiles.#ctor(System.String)">
            <summary>
            Writes the document content to disk with the specified extension with the same
            base file name and relative path as the input file. This requires metadata
            for <c>RelativeFilePath</c> to be set (which is done by default by the <see cref="T:Wyam.Core.Modules.IO.ReadFiles"/> module).
            </summary>
            <param name="extension">The extension to use for writing the file.</param>
        </member>
        <member name="M:Wyam.Core.Modules.IO.WriteFiles.#ctor">
            <summary>
            Writes the document content to disk with the same file name and relative path
            as the input file. This requires metadata for <c>RelativeFilePath</c> to be set,
            which is done by the <see cref="T:Wyam.Core.Modules.IO.ReadFiles"/> module or can be set manually.
            </summary>
        </member>
        <member name="M:Wyam.Core.Modules.IO.WriteFiles.OnlyMetadata(System.Boolean)">
            <summary>
            Indicates that only metadata should be added to the document and a file should not
            actually be written to the file system. This is useful for preprocessing documents
            so they appear in a pipeline with the correct write metadata, while actually
            writing them later with a second <see cref="T:Wyam.Core.Modules.IO.WriteFiles"/> module invocation.
            Only the following metadata values are written when this flag is turned on:
            <c>WritePath</c>, <c>RelativeFilePath</c>, <c>RelativeFilePathBase</c>,
            and <c>RelativeFileDir</c>. The <c>Destination...</c> metadata values are
            not added to the document when only setting metadata..
            </summary>
            <param name="onlyMetadata">If set to <c>true</c>, metadata will be added
            to the input document(s) without actually writing them to the file system.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.WriteFiles.UseWriteMetadata(System.Boolean)">
            <summary>
            By default the metadata values for <c>WritePath</c>, <c>WriteFileName</c>, and <c>WriteExtension</c>
            are checked and used first, even if a delegate is specified in the constructor. This method can be used
            to turn off the default behavior and always rely on the delegate for obtaining the write location.
            </summary>
            <param name="useWriteMetadata">If set to <c>false</c>, metadata of the input document will not be used.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.WriteFiles.IgnoreEmptyContent(System.Boolean)">
            <summary>
            Ignores documents with empty content, which is the default behavior.
            </summary>
            <param name="ignoreEmptyContent">If set to <c>true</c>, documents with empty content will be ignored.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.WriteFiles.Append(System.Boolean)">
            <summary>
            Appends content to each file instead of overwriting them.
            </summary>
            <param name="append">Appends to existing files if set to <c>true</c>.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.WriteFiles.Where(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Specifies a predicate that must be satisfied for the file to be written.
            </summary>
            <param name="predicate">A predicate that returns <c>true</c> if the file should be written.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.WriteFiles.ShouldProcess(Wyam.Common.Documents.IDocument,Wyam.Common.Execution.IExecutionContext)">
            <summary>
            Checks whether the input document should be processed.
            </summary>
            <param name="input">The input document to check/</param>
            <param name="context">The execution context.</param>
            <returns><c>true</c> if the input document should be processed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.WriteFiles.GetOutputPath(Wyam.Common.Documents.IDocument,Wyam.Common.Execution.IExecutionContext)">
            <summary>
            Gets the output path of the input document.
            </summary>
            <param name="input">The input document.</param>
            <param name="context">The execution context.</param>
            <returns>The outout path.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.IO.WriteFiles.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Metadata.CopyMeta">
            <summary>
            Copies the specified meta key to a new meta key, with an optional format argument.
            </summary>
            <category>Metadata</category>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.CopyMeta.#ctor(System.String,System.String,System.String)">
            <summary>
            The specified object in fromKey is copied to toKey. If a format is provided, the fromKey value is processed through string.Format before being copied (if the existing value is a DateTime, the format is passed as the argument to ToString).
            </summary>
            <param name="fromKey">The metadata key to copy from.</param>
            <param name="toKey">The metadata key to copy to.</param>
            <param name="format">The formatting to apply to the new value.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.CopyMeta.WithFormat(System.String)">
            <summary>
            Specifies the format to use when copying the value.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.CopyMeta.WithFormat(System.Func{System.String,System.String})">
            <summary>
            Specifies the format to use when copying the value.
            </summary>
            <param name="execute">A function to get the format to use.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.CopyMeta.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Metadata.DirectoryMeta">
            <summary>
            Applies metadata from specified input documents to all input documents based on a directory hierarchy.
            </summary>
            <remarks>
            <para>
            This module allows you to specify certain documents that contain common metadata for all other
            documents in the same directory (and optionally nested directories). It assumes that all input documents
            are generated from the file system (for example, from the <see cref="T:Wyam.Core.Modules.IO.ReadFiles"/> module). In other words,
            both the documents that contain the common metadata and the documents to which the common metadata should
            be applied should be passed as inputs to this module.
            </para>
            <para>
            Documents that contain the common metadata are specified by file name using the <c>WithMetadataFile</c> method.
            You can specify more than one metadata file and/or metadata files at different levels in the directory
            hierarchy. If the same metadata key exists across multiple common metadata documents, the following can be
            used to determine which metadata value will get set in the target output documents:
            <list type="bullet">
            <item><description>
            Pre-existing metadata in the target document (common metadata will
            not overwrite existing metadata unless the <c>replace</c> flag is set).
            </description></item>
            <item><description>
            Common metadata documents in the same directory as the target document
            (those registered first have a higher priority).
            </description></item>
            <item><description>
            Common metadata documents in parent directories of the target document (but only if the <c>inherited</c> flag
            is set and those closer to the target document have a higher priority).
            </description></item>
            </list>
            </para>
            <para>
            By default, documents that are identified as containing common metadata will be filtered and won't be
            contained in the sequence of output documents. <c>PreserveMetadataFiles</c> can be used to change this behavior.
            </para>
            </remarks>
            <category>Metadata</category>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.DirectoryMeta.WithPreserveMetadataFiles">
            <summary>
            Preserves the files that hold the common metadata and ensures they are included in the module output. Without this option, theses documents will
            be consumed by this module and will not be present in the module output.
            </summary>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.DirectoryMeta.WithMetadataFile(Wyam.Common.Configuration.DocumentConfig,System.Boolean,System.Boolean)">
            <summary>
            Specifies a file name to use as common metadata using a delegate so that the common metadata document can be specific to the input document.
            </summary>
            <param name="metadataFileName">A delegate that returns a <c>bool</c> indicating if the current document contains the metadata you want to use.</param>
            <param name="inherited">If set to <c>true</c>, metadata from documents with this file name will be inherited by documents in nested directories.</param>
            <param name="replace">If set to <c>true</c>, metadata from this document will replace any existing metadata on the target document.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.DirectoryMeta.WithMetadataFile(Wyam.Common.IO.FilePath,System.Boolean,System.Boolean)">
            <summary>
            Specifies a file name to use as common metadata.
            </summary>
            <param name="metadataFileName">Name of the metadata file.</param>
            <param name="inherited">If set to <c>true</c>, metadata from documents with this file name will be inherited by documents in nested directories.</param>
            <param name="replace">If set to <c>true</c>, metadata from this document will replace any existing metadata on the target document.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.DirectoryMeta.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Metadata.FileName">
            <summary>
            Optimizes a specified metadata key as a filename.
            </summary>
            <remarks>
            This module takes the value of the specified metadata key and optimizes it
            for use as a filename by removing reserved characters, white-listing characters,
            etc.
            </remarks>
            <metadata cref="F:Wyam.Common.Meta.Keys.SourceFileName" usage="Input" />
            <metadata cref="F:Wyam.Common.Meta.Keys.RelativeFileDir" usage="Input" />
            <metadata cref="F:Wyam.Common.Meta.Keys.WriteFileName" usage="Output" />
            <metadata cref="F:Wyam.Common.Meta.Keys.WritePath" usage="Output" />
            <category>Metadata</category>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.FileName.#ctor">
            <summary>
            Sets the metadata key <c>WriteFileName</c> to an optimized version of <c>SourceFileName</c>.
            Also sets the metadata key <c>WritePath</c> to <c>Path.Combine(RelativeFileDir, WriteFileName)</c>.
            </summary>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.FileName.#ctor(System.String)">
            <summary>
            Sets the metadata key <c>WriteFileName</c> to an optimized version of the specified input metadata key.
            Also sets the metadata key <c>WritePath</c> to <c>Path.Combine(RelativeFileDir, WriteFileName)</c>.
            </summary>
            <param name="inputKey">The metadata key to use for the input filename.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.FileName.#ctor(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Sets the metadata key <c>WriteFileName</c> to an optimized version of the return value of the delegate.
            Also sets the metadata key <c>WritePath</c> to <c>Path.Combine(RelativeFileDir, WriteFileName)</c>.
            </summary>
            <param name="fileName">A delegate that should return a <c>string</c> with the filename to optimize.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.FileName.#ctor(System.String,System.String)">
            <summary>
            Sets the specified metadata key to an optimized version of the specified input metadata key.
            Does not automatically set the <c>WritePath</c> metadata key.
            </summary>
            <param name="inputKey">The metadata key to use for the input filename.</param>
            <param name="outputKey">The metadata key to use for the optimized filename.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.FileName.#ctor(Wyam.Common.Configuration.DocumentConfig,System.String)">
            <summary>
            Sets the specified metadata key to an optimized version of the return value of the delegate.
            Does not automatically set the <c>WritePath</c> metadata key.
            </summary>
            <param name="fileName">A delegate that should return a <c>string</c> with the filename to optimize.</param>
            <param name="outputKey">The metadata key to use for the optimized filename.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.FileName.PreservePath(System.Boolean)">
            <summary>
            Indicates whether to set the metadata key <c>WritePath</c> to <c>Path.Combine(RelativeFileDir, WriteFileName)</c>.
            </summary>
            <param name="preservePath">If set to <c>true</c>, the <c>WritePath</c> metadata key is set.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.FileName.PreservePath(System.String)">
            <summary>
            Indicates whether to set the specified metadata key to <c>Path.Combine(RelativeFileDir, WriteFileName)</c>.
            </summary>
            <param name="outputKey">The metadata key to set.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.FileName.WithAllowedCharacters(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Specifies the characters to allow in the filename.
            </summary>
            <param name="allowedCharacters">The allowed characters.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.FileName.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Metadata.Flatten">
            <summary>
            Flattens a tree structure given child documents are stored in a given metadata key ("Children" by default).
            The flattened documents are returned in no particular order.
            </summary>
            <metadata cref="F:Wyam.Common.Meta.Keys.Children" usage="Input"/>
            <category>Metadata</category>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Flatten.#ctor">
            <summary>
            Creates a new flatten module.
            </summary>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Flatten.#ctor(System.String)">
            <summary>
            Creates a new flatten module with the specified children key.
            </summary>
            <param name="childrenKey">The metadata key that contains the children.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Flatten.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Metadata.Index">
            <summary>
            Adds a one-based index to every document as metadata.
            </summary>
            <metadata cref="F:Wyam.Common.Meta.Keys.Index" usage="Output" />
            <category>Metadata</category>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Index.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Metadata.Meta">
            <summary>
            Adds the specified metadata to each input document.
            </summary>
            <category>Metadata</category>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Meta.#ctor(System.String,System.Object)">
            <summary>
            The specified object is added as metadata for the specified key for every input document.
            </summary>
            <param name="key">The metadata key to set.</param>
            <param name="metadata">The object to add as metadata.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Meta.#ctor(System.String,Wyam.Common.Configuration.ContextConfig)">
            <summary>
            Uses a function to determine an object to be added as metadata for each document.
            This allows you to specify different metadata for each document depending on the context.
            </summary>
            <param name="key">The metadata key to set.</param>
            <param name="metadata">A delegate that returns the object to add as metadata.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Meta.#ctor(System.String,Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Uses a function to determine an object to be added as metadata for each document.
            This allows you to specify different metadata for each document depending on the input.
            </summary>
            <param name="key">The metadata key to set.</param>
            <param name="metadata">A delegate that returns the object to add as metadata.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Meta.#ctor(Wyam.Common.Modules.IModule[])">
            <summary>
            The specified modules are executed against an empty initial document and all metadata that exist in all of the result documents
            are added as metadata to each input document.
            </summary>
            <param name="modules">The modules to execute.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Meta.ForEachDocument(System.Boolean)">
            <summary>
            Specifies that the whole sequence of modules should be executed for every input document
            (as opposed to the default behavior of the sequence of modules only being executed once
            with an empty initial document). This method has no effect if no modules are specified.
            </summary>
            <param name="forEachDocument"><c>true</c> to execute for every input document.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Meta.IgnoreNull(System.Boolean)">
            <summary>
            Ignores null values and does not add a metadata item for them.
            </summary>
            <param name="ignoreNull"><c>true</c> to ignore null values.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Meta.OnlyIfNonExisting(System.Boolean)">
            <summary>
            Only sets the new metadata value if a value doesn't already exist.
            The default behavior is to set the new value regardless.
            </summary>
            <param name="onlyIfNonExisting"><c>true</c> if the new value should only be set if it doesn't already exist.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Meta.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Metadata.Objects">
            <summary>
            Creates documents from a set of objects. Any input documents will be ignored.
            The objects can be anything, and the collection can be heterogenous.
            Dictionary&lt;string, object&gt; will be handled natively and each key-value pair
            will be added to the output document metdata.
            Anything else will be reflected and turned into a Dictionary&lt;string, object&gt;
            with metadata for each property.
            </summary>
            <category>Metadata</category>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Objects.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates documents from the specified objects.
            </summary>
            <param name="objects">The objects to create documents for.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Objects.GetItems(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Metadata.Sql">
            <summary>
            Creates documents from the results of a SQL query. Each row is output
            as a new document and every column is used as the metadata (or content) of
            the new document. Input documents are ignored.
            </summary>
            <category>Metadata</category>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Sql.#ctor(System.String,System.String)">
            <summary>
            Creates documents from a SQL query given the specified connection string and query.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="sql">The SQL query.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Sql.GetItems(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Sql.GetDictionary(System.Data.DataRow)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Metadata.Title">
            <summary>
            Sets a title metadata key for documents based on their file path or source.
            </summary>
            <remarks>
            This will split the title at special characters, capitalize first letters, remove extensions, etc.
            </remarks>
            <metadata cref="F:Wyam.Common.Meta.Keys.RelativeFilePath" usage="Input" />
            <metadata cref="F:Wyam.Common.Meta.Keys.Title" usage="Output" />
            <category>Metadata</category>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Title.#ctor">
            <summary>
            This will use the existing title metadata key if one exists,
            otherwise it will set a title based on the document source
            or the RelativeFilePath key if no source is available.
            </summary>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Title.#ctor(System.String)">
            <summary>
            This sets the title of all input documents to the specified string.
            </summary>
            <param name="title">The title to set.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Title.#ctor(Wyam.Common.Configuration.ContextConfig)">
            <summary>
            This sets the title of all input documents to a value from the delegate.
            </summary>
            <param name="title">A delegate that must return a string.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Title.#ctor(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            This sets the title of all input documents to a value from the delegate.
            </summary>
            <param name="title">A delegate that must return a string.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Title.WithKey(System.String)">
            <summary>
            Specifies the key to set for the title. By default this module sets
            a value for the key Title.
            </summary>
            <param name="key">The metadata key to set.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Title.KeepExisting(System.Boolean)">
            <summary>
            Indicates that an existing value in the title key should be kept. The
            default value is <c>true</c>. Setting to <c>false</c> will always
            set the title metadata to the result of this module, even if the
            result is null or empty.
            </summary>
            <param name="keepExisting">Whether to keep the existing title metadata value.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Title.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Title.GetTitle(Wyam.Common.Documents.IDocument,Wyam.Common.Execution.IExecutionContext)">
            <summary>
            Gets a normalized title given a document.
            </summary>
            <param name="doc">The document.</param>
            <param name="context">The execution context.</param>
            <returns>A normalized title.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Title.GetTitle(Wyam.Common.IO.FilePath)">
            <summary>
            Gets a normalized title given a file path.
            </summary>
            <param name="path">The file path.</param>
            <returns>A normalized title.</returns>
        </member>
        <member name="T:Wyam.Core.Modules.Metadata.Tree">
            <summary>
            Adds metadata to the input documents that describes the position of each one in a tree structure.
            </summary>
            <remarks>
            <para>
            By default, this module is configured to generate a tree that mimics the directory structure of each document's input path
            by looking at it's RelativeFilePath metadata value. Any documents with a file name of "index.*" are automatically
            promoted to the node that represents the parent folder level. For any folder that does not contain an "index.*" file,
            an empty placeholder tree node is used to represent the folder.
            </para>
            <para>
            Note that if you clone documents from the tree, the relationships of the cloned document (parent, child, etc.)
            will not be updated to the new clones. In other words, your new document will still be pointing to the old
            versions of it's parent, children, etc. To update the tree after cloning documents you will need to recreate it
            by rerunning this module on all the newly created documents again.
            </para>
            </remarks>
            <metadata cref="F:Wyam.Common.Meta.Keys.RelativeFilePath" usage="Input">
            Used to calculate the segments of the document in the tree.
            </metadata>
            <metadata cref="F:Wyam.Common.Meta.Keys.Parent" usage="Output"/>
            <metadata cref="F:Wyam.Common.Meta.Keys.Children" usage="Output"/>
            <metadata cref="F:Wyam.Common.Meta.Keys.PreviousSibling" usage="Output"/>
            <metadata cref="F:Wyam.Common.Meta.Keys.NextSibling" usage="Output"/>
            <metadata cref="F:Wyam.Common.Meta.Keys.Next" usage="Output"/>
            <metadata cref="F:Wyam.Common.Meta.Keys.Previous" usage="Output"/>
            <metadata cref="F:Wyam.Common.Meta.Keys.TreePath" usage="Output"/>
            <category>Metadata</category>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Tree.#ctor">
            <summary>
            Creates a new tree module.
            </summary>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Tree.WithPlaceholderFactory(System.Func{System.Object[],Wyam.Common.Meta.MetadataItems,Wyam.Common.Execution.IExecutionContext,Wyam.Common.Documents.IDocument})">
            <summary>
            Allows you to specify a factory function for the creation of placeholder documents which get
            created to represent nodes in the tree for which there was no input document. The factory
            gets passed the current tree path, the set of tree metadata that should be set in the document,
            and the execution context which can be used to create a new document. If the factory function
            returns null, a new document with the tree metadata is created.
            </summary>
            <param name="factory">The factory function.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Tree.WithSort(System.Comparison{Wyam.Common.Documents.IDocument})">
            <summary>
            This specifies how the children of a given tree node should be sorted. The default behavior is to
            sort based on the string value of the last component of the child node's tree path (I.e., the folder
            or file name). The output document for each tree node is used as the input to the sort delegate.
            </summary>
            <param name="sort">A comparison delegate.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Tree.WithRoots(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Specifies for each document if it is a root of a tree. This results in splitting the generated tree into multiple smaller ones,
            removing the root node from the set of children of it's parent and setting it's parent to <c>null</c>.
            </summary>
            <param name="isRoot">A predicate (must return <c>bool</c>) that specifies if the current document is treated as the root of a new tree.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Tree.WithTreePath(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Defines the structure of the tree. If the delegate returns <c>null</c> the document
            is excluded from the tree.
            </summary>
            <param name="treePath">A delegate that must return a sequence of objects.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Tree.WithMetadataNames(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Changes the default metadata keys.
            </summary>
            <param name="parentKey">The metadata key where parent documents should be stored.</param>
            <param name="childrenKey">The metadata key where child documents should be stored.</param>
            <param name="previousSiblingKey">The metadata key where the previous sibling document should be stored.</param>
            <param name="nextSiblingKey">The metadata key where the next sibling document should be stored.</param>
            <param name="previousKey">The metadata key where the previous document should be stored.</param>
            <param name="nextKey">The metadata key where the next document should be stored.</param>
            <param name="treePathKey">The metadata key where the tree path should be stored.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Tree.WithNesting(System.Boolean,System.Boolean)">
            <summary>
            Indicates that the module should only output root nodes (instead of all
            nodes which is the default behavior).
            </summary>
            <param name="nesting"><c>true</c> to enable nesting and only output the root nodes.</param>
            <param name="collapseRoot">
            Indicates that the root of the tree should be collapsed and the module
            should output first-level documents as if they were root documents. This setting
            has no effect if not nesting.
            </param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Tree.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Metadata.ValidateMeta`1">
            <summary>
            Tests metadata for existence, typing, and supplied assertions.
            </summary>
            <typeparam name="T">The type of the metadata value to convert to for validation.</typeparam>
            <remarks>
            This module performs tests on metadata. It can ensure metadata exists, that it can be converted to the correct type, and that is passes
            arbitrary tests (delegates) to ensure validity. Metadata can be specified as optional, in which case, typing and assertion testing
            will only be run if the metadata exists. If any check fails, this module throws an exception with a descriptive error message then
            halts further execution.
            </remarks>
            <example>
            This example will ensure "Title" exists. (It will also perform a type check, but since "object" matches anything, the type check will
            always succeed.)
            <code>
            ValidateMeta&lt;object&gt;("Title")
            </code>
            </example>
            <example>
            This example will ensure that if "Date" exists, it can convert to a valid DateTime.
            <code>
            ValidateMeta&lt;DateTime&gt;("Date")
               .IsOptional()
            </code>
            </example>
            <example>
            This example will ensure "Age" (1) exists, (2) can convert to an integer, (3) and is greater than 0 and less than 121.
            If it fails any assertion, the provided error message will be output. (In this case, those two assertions could be rolled
            into one, but then they would share an error message. Separate assertions allow more specific error messages.) Assertions will
            be checked in order. Any assertion can assume all previous assertions have passed. Error messages will be appended with
            the document Source and Id properties to assist in identifying invalid documents.
            <code>
            ValidateMeta&lt;int&gt;("Age")
               .WithAssertion(a =&gt; a &gt; 0, "You have to be born.")
               .WithAssertion(a =&gt; a &lt;= 120, "You are way, way too old.")
            </code>
            </example>
            <category>Metadata</category>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.ValidateMeta`1.#ctor(System.String)">
            <summary>
            Performs validation checks on metadata.
            </summary>
            <param name="key">The meta key representing the value to test.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.ValidateMeta`1.IsOptional">
            <summary>
            Declares the entire check as optional. Is this is set, and the meta key doesn't exist, no checks will be run.
            </summary>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.ValidateMeta`1.WithAssertion(System.Func{`0,System.Boolean},System.String)">
            <summary>
            Performs validation checks on metadata.
            </summary>
            <param name="execute">The assertion function, of type Func&lt;T, bool&gt; where T is the generic parameter of the ValidateMeta
            declaration. Assertions are strongly-typed and can assume the value has been converted to the correct type. If the function returns
            false, the check failed, an exception will be thrown, and execution will halt.</param>
            <param name="message">The error message to output on failure.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.ValidateMeta`1.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Metadata.Xml">
            <summary>
            Creates new documents from elements within XML. This module will either
            ignore input documents and use specificed XML content or use the content
            from input documents depending on how it's configured. An XPath expression
            can be used to find target XML elements, and the InnerXml of each child element
            of the target elements as well as the values of each attribute
            will be placed into the metadata of the generated documents.
            </summary>
            <category>Metadata</category>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Xml.#ctor">
            <summary>
            Creates new documents from input documents. The child elements of the root element will be used.
            </summary>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Xml.#ctor(System.String)">
            <summary>
            Creates new documents from input documents.
            </summary>
            <param name="itemXPath">The XPath expression to use to find child items. If null, all child elements will be used.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Xml.#ctor(System.String,System.String)">
            <summary>
            Creates new documents from the specified XML data.
            </summary>
            <param name="data">The XML data.</param>
            <param name="itemXPath">The XPath expression to use to find child items. If <c>null</c>, all child elements will be used.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Xml.WithItemXPath(System.String)">
            <summary>
            Sets the XPath expression to use to find child items. If null, all child elements will be used.
            </summary>
            <param name="itemXPath">The XPath expression to use.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Xml.WithMetadataXPath(System.String,System.String)">
            <summary>
            Adds additional XPath patterns to be run on each element and assigned to a metadata key.
            To be safe, these patterns should start with "./" so they scope only to the element.
            The InnerXml of the first matching node will be used as the value of the metadata.
            </summary>
            <param name="key">The metadata key to store the value in.</param>
            <param name="xpath">The XPath expression for the additional metadata.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Core.Modules.Metadata.Xml.GetItems(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Modules.Templates.Xslt">
            <summary>
            Transforms input documents using a supplied XSLT template.
            </summary>
            <remarks>
            This module uses <see cref="T:System.Xml.Xsl.XslCompiledTransform"/> with default settings. This means that the
            XSLT <c>document()</c> function and embedded scripts are disabled. For more information
            see the <a href="https://msdn.microsoft.com/en-us/library/system.xml.xsl.xslcompiledtransform.aspx">MSDN documentation</a>.
            </remarks>
            <category>Templates</category>
        </member>
        <member name="M:Wyam.Core.Modules.Templates.Xslt.#ctor(Wyam.Common.IO.FilePath)">
            <summary>
            Transforms input documents using a specified XSLT file from the file system.
            </summary>
            <param name="xsltPath">The path of the XSLT file to use.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Templates.Xslt.#ctor(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Transforms input documents using a specified XSLT file from the file system
            as provided by a delegate. This allows you to use different XSLT files depending
            on the input document.
            </summary>
            <param name="xsltPath">A delegate that should return a <see cref="T:Wyam.Common.IO.FilePath"/> with the XSLT file to use.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Templates.Xslt.#ctor(Wyam.Common.Modules.IModule[])">
            <summary>
            Transforms input documents using the output content from the specified modules. The modules are executed for each input
            document with the current document as the input to the specified modules.
            </summary>
            <param name="modules">Modules that should output a single document containing the XSLT template in it's content.</param>
        </member>
        <member name="M:Wyam.Core.Modules.Templates.Xslt.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Core.Util.ConvertingComparer`1">
            <summary>
            Adapts a typed equality comparer to untyped metadata by attempting to convert the
            metadata values to the comparer type before running the comparison. If neither type
            can be converted to <typeparamref name="TValue"/>, the comparison returns 0 (equivalent).
            </summary>
            <typeparam name="TValue">The value type to convert to for comparisons.</typeparam>
        </member>
        <member name="T:Wyam.Core.Util.ConvertingEqualityComparer`1">
            <summary>
            Adapts a typed equality comparer to untyped metadata by attempting to convert the
            metadata values to the comparer type before running the comparison. If neither type
            can be converted to <typeparamref name="TValue"/>, the comparison fails.
            </summary>
            <typeparam name="TValue">The value type to convert to for comparisons.</typeparam>
        </member>
    </members>
</doc>
