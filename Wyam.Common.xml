<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Wyam.Common</name>
    </assembly>
    <members>
        <member name="T:Wyam.Common.Caching.Crc32">
            <summary>
            A helper class to quickly calculate CRC32 codes.
            </summary>
            <remarks>
            The implementation was originaly taken from the ASP.NET v5 Razor caching implementation.
            </remarks>
        </member>
        <member name="M:Wyam.Common.Caching.Crc32.Calculate(System.IO.Stream)">
            <summary>
            Calculates a CRC32 code from a stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>A CRC32.</returns>
        </member>
        <member name="M:Wyam.Common.Caching.Crc32.Calculate(System.String)">
            <summary>
            Calculates a CRC32 code from a string.
            </summary>
            <param name="str">The string.</param>
            <returns>A CRC32.</returns>
        </member>
        <member name="T:Wyam.Common.Caching.IExecutionCache">
            <summary>
            Provides a cache that can be used by modules during execution to persist data
            between engine executions. Cached data is keyed by both a document and an
            optional key string.
            </summary>
        </member>
        <member name="M:Wyam.Common.Caching.IExecutionCache.ContainsKey(Wyam.Common.Documents.IDocument)">
            <summary>
            Checks if the document key is in the cache.
            </summary>
            <param name="document">The document key.</param>
            <returns><c>true</c> if the key is in the cache, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Wyam.Common.Caching.IExecutionCache.ContainsKey(Wyam.Common.Documents.IDocument,System.String)">
            <summary>
            Checks if the document and string key is in the cache.
            </summary>
            <param name="document">The document key.</param>
            <param name="key">The string key.</param>
            <returns><c>true</c> if the key is in the cache, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Wyam.Common.Caching.IExecutionCache.ContainsKey(System.String)">
            <summary>
            Checks if the string key is in the cache.
            </summary>
            <param name="key">The string key.</param>
            <returns><c>true</c> if the key is in the cache, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Wyam.Common.Caching.IExecutionCache.TryGetValue(Wyam.Common.Documents.IDocument,System.Object@)">
            <summary>
            Attempts to get a cached value from a document key.
            </summary>
            <param name="document">The document key.</param>
            <param name="value">The cached value.</param>
            <returns><c>true</c> for a cache hit, <c>false</c> for a cache miss.</returns>
        </member>
        <member name="M:Wyam.Common.Caching.IExecutionCache.TryGetValue(Wyam.Common.Documents.IDocument,System.String,System.Object@)">
            <summary>
            Attempts to get a cached value from a document and string key.
            </summary>
            <param name="document">The document key.</param>
            <param name="key">The string key.</param>
            <param name="value">The cached value.</param>
            <returns><c>true</c> for a cache hit, <c>false</c> for a cache miss.</returns>
        </member>
        <member name="M:Wyam.Common.Caching.IExecutionCache.TryGetValue(System.String,System.Object@)">
            <summary>
            Attempts to get a cached value from a string key.
            </summary>
            <param name="key">The string key.</param>
            <param name="value">The cached value.</param>
            <returns><c>true</c> for a cache hit, <c>false</c> for a cache miss.</returns>
        </member>
        <member name="M:Wyam.Common.Caching.IExecutionCache.TryGetValue``1(Wyam.Common.Documents.IDocument,``0@)">
            <summary>
            Attempts to get a typed cached value from a document key.
            </summary>
            <typeparam name="TValue">The type of the cached value.</typeparam>
            <param name="document">The document key.</param>
            <param name="value">The cached value.</param>
            <returns><c>true</c> for a cache hit, <c>false</c> for a cache miss.</returns>
        </member>
        <member name="M:Wyam.Common.Caching.IExecutionCache.TryGetValue``1(Wyam.Common.Documents.IDocument,System.String,``0@)">
            <summary>
            Attempts to get a typed cached value from a document and string key.
            </summary>
            <typeparam name="TValue">The type of the cached value.</typeparam>
            <param name="document">The document key.</param>
            <param name="key">The string key.</param>
            <param name="value">The cached value.</param>
            <returns><c>true</c> for a cache hit, <c>false</c> for a cache miss.</returns>
        </member>
        <member name="M:Wyam.Common.Caching.IExecutionCache.TryGetValue``1(System.String,``0@)">
            <summary>
            Attempts to get a typed cached value from a string key.
            </summary>
            <typeparam name="TValue">The type of the cached value.</typeparam>
            <param name="key">The string key.</param>
            <param name="value">The cached value.</param>
            <returns><c>true</c> for a cache hit, <c>false</c> for a cache miss.</returns>
        </member>
        <member name="M:Wyam.Common.Caching.IExecutionCache.Set(Wyam.Common.Documents.IDocument,System.Object)">
            <summary>
            Sets a cached value from a document key.
            </summary>
            <param name="document">The document key.</param>
            <param name="value">The cached value.</param>
        </member>
        <member name="M:Wyam.Common.Caching.IExecutionCache.Set(Wyam.Common.Documents.IDocument,System.String,System.Object)">
            <summary>
            Sets a cached value from a document and string key.
            </summary>
            <param name="document">The document key.</param>
            <param name="key">The string key.</param>
            <param name="value">The cached value.</param>
        </member>
        <member name="M:Wyam.Common.Caching.IExecutionCache.Set(System.String,System.Object)">
            <summary>
            Sets a cached value from a document key.
            </summary>
            <param name="key">The string key.</param>
            <param name="value">The cached value.</param>
        </member>
        <member name="T:Wyam.Common.Configuration.ConfigExtensions">
            <summary>
            Extensions for dealing with config delegates.
            </summary>
        </member>
        <member name="M:Wyam.Common.Configuration.ConfigExtensions.Invoke``1(Wyam.Common.Configuration.ContextConfig,Wyam.Common.Execution.IExecutionContext)">
            <summary>
            Invokes the delegate.
            </summary>
            <typeparam name="T">The desired result type.</typeparam>
            <param name="config">The delegate.</param>
            <param name="context">The execution context.</param>
            <returns>A typed result from invoking the delegate.</returns>
        </member>
        <member name="M:Wyam.Common.Configuration.ConfigExtensions.Invoke``1(Wyam.Common.Configuration.ContextConfig,Wyam.Common.Execution.IExecutionContext,System.String)">
            <summary>
            Invokes the delegate with additional information in the exception message if the conversion fails.
            </summary>
            <typeparam name="T">The desired result type.</typeparam>
            <param name="config">The delegate.</param>
            <param name="context">The execution context.</param>
            <param name="errorDetails">A string to add to the exception message should the conversion fail.</param>
            <returns>A typed result from invoking the delegate.</returns>
        </member>
        <member name="M:Wyam.Common.Configuration.ConfigExtensions.TryInvoke``1(Wyam.Common.Configuration.ContextConfig,Wyam.Common.Execution.IExecutionContext)">
            <summary>
            Attempts to invoke the delegate and returns a default value of <typeparamref name="T"/> if the conversion fails.
            </summary>
            <typeparam name="T">The desired result type.</typeparam>
            <param name="config">The delegate.</param>
            <param name="context">The execution context.</param>
            <returns>A typed result from invoking the delegate, or the default value of <typeparamref name="T"/> if the conversion fails.</returns>
        </member>
        <member name="M:Wyam.Common.Configuration.ConfigExtensions.Invoke``1(Wyam.Common.Configuration.DocumentConfig,Wyam.Common.Documents.IDocument,Wyam.Common.Execution.IExecutionContext)">
            <summary>
            Invokes the delegate.
            </summary>
            <typeparam name="T">The desired result type.</typeparam>
            <param name="config">The delegate.</param>
            <param name="document">The document.</param>
            <param name="context">The execution context.</param>
            <returns>A typed result from invoking the delegate.</returns>
        </member>
        <member name="M:Wyam.Common.Configuration.ConfigExtensions.Invoke``1(Wyam.Common.Configuration.DocumentConfig,Wyam.Common.Documents.IDocument,Wyam.Common.Execution.IExecutionContext,System.String)">
            <summary>
            Invokes the delegate with additional information in the exception message if the conversion fails.
            </summary>
            <typeparam name="T">The desired result type.</typeparam>
            <param name="config">The delegate.</param>
            <param name="document">The document.</param>
            <param name="context">The execution context.</param>
            <param name="errorDetails">A string to add to the exception message should the conversion fail.</param>
            <returns>A typed result from invoking the delegate.</returns>
        </member>
        <member name="M:Wyam.Common.Configuration.ConfigExtensions.TryInvoke``1(Wyam.Common.Configuration.DocumentConfig,Wyam.Common.Documents.IDocument,Wyam.Common.Execution.IExecutionContext)">
            <summary>
            Attempts to invoke the delegate and returns a default value of <typeparamref name="T"/> if the conversion fails.
            </summary>
            <typeparam name="T">The desired result type.</typeparam>
            <param name="config">The delegate.</param>
            <param name="document">The document.</param>
            <param name="context">The execution context.</param>
            <returns>A typed result from invoking the delegate, or the default value of <typeparamref name="T"/> if the conversion fails.</returns>
        </member>
        <member name="T:Wyam.Common.Configuration.ConfigHelper`1">
            <summary>
            This class satisfies a common use case for modules where you need to get some configuration value
            either directly, from a delegate at the module level, or from a delegate at a per-document level
            and the user should be able to specify any of these possibilities (typically via module constructor
            overloads).
            </summary>
            <typeparam name="T">The type of the value you want to eventually convert to.</typeparam>
        </member>
        <member name="M:Wyam.Common.Configuration.ConfigHelper`1.#ctor(`0)">
            <summary>
            Creates a new helper with the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Wyam.Common.Configuration.ConfigHelper`1.#ctor(Wyam.Common.Configuration.ContextConfig,`0)">
            <summary>
            Creates a new helper with the specified delegate.
            </summary>
            <param name="config">The delegate.</param>
            <param name="defaultValue">A default value to use if the delegate is null.</param>
        </member>
        <member name="M:Wyam.Common.Configuration.ConfigHelper`1.#ctor(Wyam.Common.Configuration.DocumentConfig,`0)">
            <summary>
            Creates a new helper with the specified delegate.
            </summary>
            <param name="config">The delegate.</param>
            <param name="defaultValue">A default value to use if the delegate is null.</param>
        </member>
        <member name="M:Wyam.Common.Configuration.ConfigHelper`1.GetValue(Wyam.Common.Documents.IDocument,Wyam.Common.Execution.IExecutionContext,System.Func{`0,`0})">
            <summary>
            Call this each time you need the value, passing in a post-processing function if required.
            If no document delegate is specified, then this will get and cache the value on first request.
            </summary>
            <param name="document">The document.</param>
            <param name="context">The execution context.</param>
            <param name="postProcessing">An optional post-processing function.</param>
            <returns>The result value.</returns>
        </member>
        <member name="T:Wyam.Common.Configuration.ContextConfig">
            <summary>
            A delegate that uses the execution context.
            </summary>
            <param name="ctx">The execution context.</param>
            <returns>A result object.</returns>
        </member>
        <member name="T:Wyam.Common.Configuration.DocumentConfig">
            <summary>
            A delegate that uses a document and the execution context.
            </summary>
            <param name="doc">The document.</param>
            <param name="ctx">The execution context.</param>
            <returns>A result object.</returns>
        </member>
        <member name="T:Wyam.Common.Configuration.INamespacesCollection">
            <summary>
            A collection of namespace strings used to inform modules of which namespaces
            should be available during dynamic code generation and/or execution.
            </summary>
        </member>
        <member name="M:Wyam.Common.Configuration.INamespacesCollection.Add(System.String)">
            <summary>
            Adds a namespace to the collection.
            </summary>
            <param name="ns">The namespace to add.</param>
            <returns><c>true</c> if the namespace was already in the collection, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Wyam.Common.Configuration.INamespacesCollection.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a range of namespaces to the collection.
            </summary>
            <param name="namespaces">The namespaces to add.</param>
        </member>
        <member name="T:Wyam.Common.Configuration.IRawAssemblyCollection">
            <summary>
            A collection of raw assembly bytes for dynamically
            compiled assemblies such as the configuration script.
            </summary>
        </member>
        <member name="M:Wyam.Common.Configuration.IRawAssemblyCollection.Add(System.Byte[])">
            <summary>
            Adds a raw assembly to the collection.
            </summary>
            <param name="rawAssembly">The bytes of the assembly to add.</param>
        </member>
        <member name="T:Wyam.Common.Configuration.IReadOnlySettings">
            <summary>
            Settings that can be globally set.
            </summary>
        </member>
        <member name="T:Wyam.Common.Configuration.IRecipe">
            <summary>
            A recipe configures a <see cref="T:Wyam.Common.Execution.IEngine"/> in a predefined way using code.
            Recipes should have an empty default constructor and shouldn't maintain
            any state.
            </summary>
        </member>
        <member name="M:Wyam.Common.Configuration.IRecipe.Apply(Wyam.Common.Execution.IEngine)">
            <summary>
            Applies the recipe to the engine.
            </summary>
            <param name="engine">The engine.</param>
        </member>
        <member name="M:Wyam.Common.Configuration.IRecipe.Scaffold(Wyam.Common.IO.IFile,Wyam.Common.IO.IDirectory)">
            <summary>
            Scaffolds an example for the recipe in the specified directory.
            </summary>
            <param name="configFile">
            The configuration file or <c>null</c> if the user
            chose not to overwrite an existing configuration file. An existing configuration file
            will not be automatically deleted, nor will a new configuration file be automatically
            created. If new configuration file content needs to be written,
            it's up to the recipe to create it or delete the existing file.
            </param>
            <param name="inputDirectory">The directory to place the example in.</param>
        </member>
        <member name="T:Wyam.Common.Configuration.ISettings">
            <summary>
            Stores global settings that control behavior and execution.
            </summary>
            <metadata cref="F:Wyam.Common.Meta.Keys.Host" usage="Setting" />
            <metadata cref="F:Wyam.Common.Meta.Keys.LinksUseHttps" usage="Setting" />
            <metadata cref="F:Wyam.Common.Meta.Keys.LinkRoot" usage="Setting" />
            <metadata cref="F:Wyam.Common.Meta.Keys.LinkHideIndexPages" usage="Setting" />
            <metadata cref="F:Wyam.Common.Meta.Keys.LinkHideExtensions" usage="Setting" />
            <metadata cref="F:Wyam.Common.Meta.Keys.UseCache" usage="Setting" />
            <metadata cref="F:Wyam.Common.Meta.Keys.CleanOutputPath" usage="Setting" />
            <metadata cref="F:Wyam.Common.Meta.Keys.DateTimeInputCulture" usage="Setting" />
            <metadata cref="F:Wyam.Common.Meta.Keys.DateTimeDisplayCulture" usage="Setting" />
        </member>
        <member name="T:Wyam.Common.Configuration.Recipe">
            <summary>
            A utility class that can be used as the base for recipes. It is not necessary to
            derive from this class to create a recipe, implementing <see cref="T:Wyam.Common.Configuration.IRecipe"/> is
            sufficient. However, this class does provide some helpful functionality such as
            using reflection to automatically iterate and add all <see cref="T:Wyam.Common.Execution.Pipeline"/>
            static properties.
            </summary>
        </member>
        <member name="M:Wyam.Common.Configuration.Recipe.Apply(Wyam.Common.Execution.IEngine)">
            <summary>
            This will reflect over all static <see cref="T:Wyam.Common.Execution.Pipeline"/> properties in the
            derived class and will add their modules as pipelines to the engine. This operation
            depends on <see cref="T:Wyam.Common.Util.SourceInfoAttribute"/> having been applied to all the properties
            in order to ensure proper ordering.
            </summary>
            <param name="engine">The engine.</param>
        </member>
        <member name="M:Wyam.Common.Configuration.Recipe.Scaffold(Wyam.Common.IO.IFile,Wyam.Common.IO.IDirectory)">
            <inheritdoc/>
        </member>
        <member name="T:Wyam.Common.Documents.CollectionExtensions">
            <summary>
            Extensions for working with specific types of collections.
            </summary>
        </member>
        <member name="M:Wyam.Common.Documents.CollectionExtensions.WhereContainsKey(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String)">
            <summary>
            Returns all documents that contain the specified metadata key.
            </summary>
            <param name="documents">The documents.</param>
            <param name="metadataKey">The key.</param>
            <returns>All documents that contain the specified metadata key.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.CollectionExtensions.WhereContainsAllKeys(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String[])">
            <summary>
            Returns all documents that contain all of the specified metadata keys.
            </summary>
            <param name="documents">The documents.</param>
            <param name="metadataKeys">The metadata keys.</param>
            <returns>All documents that contain all of the specified metadata keys.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.CollectionExtensions.WhereContainsAnyKeys(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String[])">
            <summary>
            Returns all documents that contain any of the specified metadata keys.
            </summary>
            <param name="documents">The documents.</param>
            <param name="metadataKeys">The metadata keys.</param>
            <returns>All documents that contain any of the specified metadata keys.</returns>
        </member>
        <member name="T:Wyam.Common.Documents.FileContentStream">
            <summary>
            This creates a file stream that deletes the underlying file on dispose.
            </summary>
        </member>
        <member name="T:Wyam.Common.Documents.FileContentStreamFactory">
            <summary>
            Provides content streams that are backed by a file in the file system. This
            trades performance (disk I/O is considerably slower than memory) for a
            reduced memory footprint.
            </summary>
        </member>
        <member name="M:Wyam.Common.Documents.FileContentStreamFactory.GetStream(Wyam.Common.Execution.IExecutionContext,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Common.Documents.GroupByExtensions">
            <summary>
            Extensions grouping document sequences.
            </summary>
        </member>
        <member name="M:Wyam.Common.Documents.GroupByExtensions.GroupBy``1(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String)">
            <summary>
            Groups the elements of a sequence of documents using the values of a specified metadata key.
            If a document does not contain the specified metadata key, it is not included in the result set.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="documents">The documents.</param>
            <param name="keyMetadataKey">The key metadata key.</param>
            <returns>A sequence of groups.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.GroupByExtensions.GroupBy``1(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Groups the elements of a sequence of documents and the values of a specified metadata key
            and compares the keys by using a specified comparer.
            If a document does not contain the specified metadata key, it is not included in the result set.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="documents">The documents.</param>
            <param name="keyMetadataKey">The key metadata key.</param>
            <param name="comparer">The comparer.</param>
            <returns>A sequence of groups.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.GroupByExtensions.GroupBy``2(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String,System.String)">
            <summary>
            Groups the elements of a sequence of documents and the values of a specified metadata key
            using the value of the specified element metadata for the elements of the group.
            If a document does not contain the specified key or element metadata keys, it is not included in the result set.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="documents">The documents.</param>
            <param name="keyMetadataKey">The key metadata key.</param>
            <param name="elementMetadataKey">The element metadata key.</param>
            <returns>A sequence of groups.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.GroupByExtensions.GroupBy``2(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Groups the elements of a sequence of documents and the values of a specified metadata key
            using the value of the specified element metadata for the elements of the group
            and compares the keys by using a specified comparer.
            If a document does not contain the specified key or element metadata keys, it is not included in the result set.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="documents">The documents.</param>
            <param name="keyMetadataKey">The key metadata key.</param>
            <param name="elementMetadataKey">The element metadata key.</param>
            <param name="comparer">The comparer.</param>
            <returns>A sequence of groups.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.GroupByExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String)">
            <summary>
            Groups the elements of a sequence of documents according to a specified metadata key
            that contains a sequence of keys.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="documents">The documents.</param>
            <param name="keyMetadataKey">The key metadata key.</param>
            <returns>A sequence of groups.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.GroupByExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Groups the elements of a sequence of documents according to a specified metadata key
            that contains a sequence of keys
            and compares the keys by using a specified comparer.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="documents">The documents.</param>
            <param name="keyMetadataKey">The key metadata key.</param>
            <param name="comparer">The comparer.</param>
            <returns>A sequence of groups.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.GroupByExtensions.GroupByMany``2(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String,System.String)">
            <summary>
            Groups the elements of a sequence of documents according to a specified metadata key
            that contains a sequence of keys
            and gets the elements for each group by using a specified metadata key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="documents">The documents.</param>
            <param name="keyMetadataKey">The key metadata key.</param>
            <param name="elementMetadataKey">The element metadata key.</param>
            <returns>A sequence of groups.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.GroupByExtensions.GroupByMany``2(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Groups the elements of a sequence of documents according to a specified metadata key
            that contains a sequence of keys.
            The keys are compared by using a comparer and each group's elements
            are obtained by using a specified metadata key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="documents">The documents.</param>
            <param name="keyMetadataKey">The key metadata key.</param>
            <param name="elementMetadataKey">The element metadata key.</param>
            <param name="comparer">The comparer.</param>
            <returns>A sequence of groups.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.GroupByExtensions.GroupByManyToMany``2(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String,System.String)">
            <summary>
            Groups the elements of a sequence of documents according to a specified metadata key
            that contains a sequence of keys
            and gets the elements for each group by using a specified metadata key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="documents">The documents.</param>
            <param name="keyMetadataKey">The key metadata key.</param>
            <param name="elementMetadataKey">The element metadata key.</param>
            <returns>A sequence of groups.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.GroupByExtensions.GroupByManyToMany``2(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Groups the elements of a sequence of documents according to a specified metadata key
            that contains a sequence of keys.
            The keys are compared by using a comparer and each group's elements
            are obtained by using a specified metadata key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="documents">The documents.</param>
            <param name="keyMetadataKey">The key metadata key.</param>
            <param name="elementMetadataKey">The element metadata key.</param>
            <param name="comparer">The comparer.</param>
            <returns>A sequence of groups.</returns>
        </member>
        <member name="T:Wyam.Common.Documents.IContentStreamFactory">
            <summary>
            Provides streams to use for document content.
            </summary>
        </member>
        <member name="M:Wyam.Common.Documents.IContentStreamFactory.GetStream(Wyam.Common.Execution.IExecutionContext,System.String)">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> that can be used for document content. If <paramref name="content"/>
            is not null, the stream is initialized with the specified content.
            <remarks>The position should be set to the beginning of the stream when returned.</remarks>
            </summary>
            <param name="context">The current execution context.</param>
            <param name="content">Content to initialize the stream with.</param>
            <returns>A stream for document content.</returns>
        </member>
        <member name="T:Wyam.Common.Documents.IDocument">
            <summary>
            Contains content and metadata for each item as it propagates through the pipeline.
            </summary>
            <remarks>
            Documents are immutable so you must call one of the <c>GetDocument</c> methods of <see cref="T:Wyam.Common.Documents.IDocumentFactory"/>
            to create a new document. Implements <see cref="T:Wyam.Common.Meta.IMetadata"/> and all metadata calls are passed through
            to the document's internal <see cref="T:Wyam.Common.Meta.IMetadata"/> instance (exposed via the <see cref="P:Wyam.Common.Documents.IDocument.Metadata"/>
            property). Note that both the <see cref="P:Wyam.Common.Documents.IDocument.Content"/> property and the result of the <see cref="M:Wyam.Common.Documents.IDocument.GetStream"/>
            method are guaranteed not to be null. When a document is created, either a string or a <see cref="T:System.IO.Stream"/>
            is provided. Whenever the other of the two is requested, the system will convert the current representation
            for you.
            </remarks>
        </member>
        <member name="P:Wyam.Common.Documents.IDocument.Source">
            <summary>An identifier for the document meant to reflect the source of the data. These should be unique (such as a file name).</summary>
            <value>The source of the document, or <c>null</c> if the document doesn't have a source.</value>
        </member>
        <member name="M:Wyam.Common.Documents.IDocument.SourceString">
            <summary>
            Gets a string representation of the source that's guaranteed non-null, used primarily for trace messages.
            </summary>
            <returns>A string representation of the source.</returns>
        </member>
        <member name="P:Wyam.Common.Documents.IDocument.Id">
            <summary>An identifier that is generated when the document is created and stays the same after cloning.</summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Wyam.Common.Documents.IDocument.Metadata">
            <summary>Gets the metadata associated with this document.</summary>
            <value>The metadata associated with this document.</value>
        </member>
        <member name="P:Wyam.Common.Documents.IDocument.Content">
            <summary>Gets the content associated with this document as a string. This will result in reading the entire content stream.</summary>
            <value>The content associated with this document.</value>
        </member>
        <member name="M:Wyam.Common.Documents.IDocument.GetStream">
            <summary>
            Gets the content associated with this document as a <see cref="T:System.IO.Stream"/>.
            The underlying stream will be reset to position 0 each time this method is called.
            The stream you get from this call must be disposed as soon as reading is complete.
            Other threads will block on this call until the previously returned stream is disposed.
            </summary>
            <returns>A <see cref="T:System.IO.Stream"/> of the content associated with this document.</returns>
        </member>
        <member name="P:Wyam.Common.Documents.IDocument.WithoutSettings">
            <summary>
            Gets the metadata for this document without any global settings included.
            </summary>
            <returns>The document metadata without global settings.</returns>
        </member>
        <member name="T:Wyam.Common.Documents.IDocumentCollection">
            <summary>
            Contains a collection of documents output by each pipeline.
            The documents are populated for each pipeline as it is
            executed and will contain the most recent set of document
            outputs for the most recently executed module, even if the
            pipeline is not complete.
            </summary>
        </member>
        <member name="M:Wyam.Common.Documents.IDocumentCollection.ByPipeline">
            <summary>
            Gets documents by pipeline.
            </summary>
            <returns>All documents output by each pipeline.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.IDocumentCollection.FromPipeline(System.String)">
            <summary>
            Gets documents from a specific pipeline.
            </summary>
            <param name="pipeline">The pipeline.</param>
            <returns>The documents output by the specified pipeline.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.IDocumentCollection.ExceptPipeline(System.String)">
            <summary>
            Gets all documents output by every pipeline except those from the specified pipeline.
            </summary>
            <param name="pipeline">The pipeline.</param>
            <returns>All documents output by every pipeline except the specified one.</returns>
        </member>
        <member name="P:Wyam.Common.Documents.IDocumentCollection.Item(System.String)">
            <summary>
            Gets documents from a specific pipeline.
            </summary>
            <value>
            The documents output by the specified pipeline..
            </value>
            <param name="pipline">The pipeline.</param>
            <returns>The documents output by the specified pipeline.</returns>
        </member>
        <member name="T:Wyam.Common.Documents.IDocumentFactory">
            <summary>
            Responsible for creating new document instances.
            </summary>
        </member>
        <member name="M:Wyam.Common.Documents.IDocumentFactory.GetDocument(Wyam.Common.Execution.IExecutionContext)">
            <summary>
            Gets a new document with default initial metadata.
            </summary>
            <param name="context">The current execution context.</param>
            <returns>The new document.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.IDocumentFactory.GetDocument(Wyam.Common.Execution.IExecutionContext,Wyam.Common.Documents.IDocument,Wyam.Common.IO.FilePath,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Clones the specified source document with a new source and additional metadata (all existing metadata is retained)
            or gets a new document if the source document is null or <c>AsNewDocuments()</c> was called on the module.
            </summary>
            <param name="context">The current execution context.</param>
            <param name="sourceDocument">The source document.</param>
            <param name="source">The source (if the source document contains a source, then this is ignored and the source document's source is used instead).</param>
            <param name="items">The metadata items.</param>
            <returns>The cloned or new document.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.IDocumentFactory.GetDocument(Wyam.Common.Execution.IExecutionContext,Wyam.Common.Documents.IDocument,Wyam.Common.IO.FilePath,System.IO.Stream,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Boolean)">
            <summary>
            Clones the specified source document with a new source, new content stream, and additional metadata (all existing metadata is retained)
            or gets a new document if the source document is null or <c>AsNewDocuments()</c> was called on the module.
            If <paramref name="disposeStream"/> is true (which it is by default), the provided
            <see cref="T:System.IO.Stream"/> will automatically be disposed when the document is disposed (I.e., the
            document takes ownership of the <see cref="T:System.IO.Stream"/>).
            </summary>
            <param name="context">The current execution context.</param>
            <param name="sourceDocument">The source document.</param>
            <param name="source">The source (if the source document contains a source, then this is ignored and the source document's source is used instead).</param>
            <param name="stream">The content stream.</param>
            <param name="items">The metadata items.</param>
            <param name="disposeStream">If set to <c>true</c> the provided <see cref="T:System.IO.Stream"/> is disposed when the document is.</param>
            <returns>The cloned or new document.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.IDocumentFactory.GetDocument(Wyam.Common.Execution.IExecutionContext,Wyam.Common.Documents.IDocument,System.IO.Stream,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Boolean)">
            <summary>
            Clones the specified source document with a new content stream, and additional metadata (all existing metadata is retained)
            or gets a new document if the source document is null or <c>AsNewDocuments()</c> was called on the module.
            If <paramref name="disposeStream"/> is true (which it is by default), the provided
            <see cref="T:System.IO.Stream"/> will automatically be disposed when the document is disposed (I.e., the
            document takes ownership of the <see cref="T:System.IO.Stream"/>).
            </summary>
            <param name="context">The current execution context.</param>
            <param name="sourceDocument">The source document.</param>
            <param name="stream">The content stream.</param>
            <param name="items">The metadata items.</param>
            <param name="disposeStream">If set to <c>true</c> the provided <see cref="T:System.IO.Stream"/> is disposed when the document is.</param>
            <returns>The cloned or new document.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.IDocumentFactory.GetDocument(Wyam.Common.Execution.IExecutionContext,Wyam.Common.Documents.IDocument,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Clones the specified source document with identical content and additional metadata (all existing metadata is retained)
            or gets a new document if the source document is null or <c>AsNewDocuments()</c> was called on the module.
            </summary>
            <param name="context">The current execution context.</param>
            <param name="sourceDocument">The source document.</param>
            <param name="items">The metadata items.</param>
            <returns>The cloned or new document.</returns>
        </member>
        <member name="T:Wyam.Common.Documents.MemoryContentStreamFactory">
            <summary>
            Provides content streams that are stored in memory without pooling. This trades better performance
            for increased memory usage.
            </summary>
        </member>
        <member name="M:Wyam.Common.Documents.MemoryContentStreamFactory.GetStream(Wyam.Common.Execution.IExecutionContext,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Common.Documents.ToLookupExtensions">
            <summary>
            Extensions for creating lookups from document sequences.
            </summary>
        </member>
        <member name="M:Wyam.Common.Documents.ToLookupExtensions.ToLookup``1(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String)">
            <summary>
            Creates a lookup from a sequence of documents using the values of a specified metadata key.
            If a document does not contain the specified metadata key, it is not included in the result set.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="documents">The documents.</param>
            <param name="keyMetadataKey">The key metadata key.</param>
            <returns>A lookup.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.ToLookupExtensions.ToLookup``1(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a lookup from a sequence of documents and the values of a specified metadata key
            and compares the keys by using a specified comparer.
            If a document does not contain the specified metadata key, it is not included in the result set.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="documents">The documents.</param>
            <param name="keyMetadataKey">The key metadata key.</param>
            <param name="comparer">The comparer.</param>
            <returns>A lookup.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.ToLookupExtensions.ToLookup``2(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String,System.String)">
            <summary>
            Creates a lookup from a sequence of documents and the values of a specified metadata key
            using the value of the specified element metadata for the elements of the lookup.
            If a document does not contain the specified key or element metadata keys, it is not included in the result set.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="documents">The documents.</param>
            <param name="keyMetadataKey">The key metadata key.</param>
            <param name="elementMetadataKey">The element metadata key.</param>
            <returns>A lookup.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.ToLookupExtensions.ToLookup``2(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a lookup from a sequence of documents and the values of a specified metadata key
            using the value of the specified element metadata for the elements of the lookup
            and compares the keys by using a specified comparer.
            If a document does not contain the specified key or element metadata keys, it is not included in the result set.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="documents">The documents.</param>
            <param name="keyMetadataKey">The key metadata key.</param>
            <param name="elementMetadataKey">The element metadata key.</param>
            <param name="comparer">The comparer.</param>
            <returns>A lookup.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.ToLookupExtensions.ToLookupMany``1(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String)">
            <summary>
            Creates a lookup from a sequence of documents according to a specified metadata key
            that contains a sequence of keys.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="documents">The documents.</param>
            <param name="keyMetadataKey">The key metadata key.</param>
            <returns>A lookup.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.ToLookupExtensions.ToLookupMany``1(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a lookup from a sequence of documents according to a specified metadata key
            that contains a sequence of keys
            and compares the keys by using a specified comparer.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="documents">The documents.</param>
            <param name="keyMetadataKey">The key metadata key.</param>
            <param name="comparer">The comparer.</param>
            <returns>A lookup.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.ToLookupExtensions.ToLookupMany``2(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String,System.String)">
            <summary>
            Creates a lookup from a sequence of documents according to a specified metadata key
            that contains a sequence of keys
            and gets the elements for each group by using a specified metadata key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="documents">The documents.</param>
            <param name="keyMetadataKey">The key metadata key.</param>
            <param name="elementMetadataKey">The element metadata key.</param>
            <returns>A lookup.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.ToLookupExtensions.ToLookupMany``2(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a lookup from a sequence of documents according to a specified metadata key
            that contains a sequence of keys.
            The keys are compared by using a comparer and each group's elements
            are obtained by using a specified metadata key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="documents">The documents.</param>
            <param name="keyMetadataKey">The key metadata key.</param>
            <param name="elementMetadataKey">The element metadata key.</param>
            <param name="comparer">The comparer.</param>
            <returns>A lookup.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.ToLookupExtensions.ToLookupManyToMany``2(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String,System.String)">
            <summary>
            Creates a lookup from a sequence of documents according to a specified metadata key
            that contains a sequence of keys
            and gets the elements for each group by using a specified metadata key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="documents">The documents.</param>
            <param name="keyMetadataKey">The key metadata key.</param>
            <param name="elementMetadataKey">The element metadata key.</param>
            <returns>A lookup.</returns>
        </member>
        <member name="M:Wyam.Common.Documents.ToLookupExtensions.ToLookupManyToMany``2(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.String,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a lookup from a sequence of documents according to a specified metadata key
            that contains a sequence of keys.
            The keys are compared by using a comparer and each group's elements
            are obtained by using a specified metadata key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="documents">The documents.</param>
            <param name="keyMetadataKey">The key metadata key.</param>
            <param name="elementMetadataKey">The element metadata key.</param>
            <param name="comparer">The comparer.</param>
            <returns>A lookup.</returns>
        </member>
        <member name="T:Wyam.Common.Execution.DateTimeCultureExtensions">
            <summary>
            Extensions for working with input and output date cultures.
            </summary>
        </member>
        <member name="M:Wyam.Common.Execution.DateTimeCultureExtensions.TryParseInputDateTime(Wyam.Common.Execution.IExecutionContext,System.String,System.DateTime@)">
            <summary>
            Attempts to parse and input date using the input date culture setting.
            </summary>
            <param name="context">The execution context.</param>
            <param name="s">The string to parse.</param>
            <param name="result">The resulting <see cref="T:System.DateTime"/> instance.</param>
            <returns><c>true</c> if the input string could be parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.DateTimeCultureExtensions.GetDateTimeInputCulture(Wyam.Common.Execution.IExecutionContext)">
            <summary>
            Gets the <see cref="T:System.Globalization.CultureInfo"/> for the date input culture.
            </summary>
            <param name="context">The execution context.</param>
            <returns>The date input culture.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.DateTimeCultureExtensions.ToShortDateString(System.DateTime,Wyam.Common.Execution.IExecutionContext,System.String)">
            <summary>
            Gets a short date display string using the date display culture setting.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> to generate a string for.</param>
            <param name="context">The execution context.</param>
            <param name="targetCulture">The culture that should be used if the date display setting isn't provided. If the
            current culture is of the same family, then it will be used. If not, the specified target culture will be used.</param>
            <returns>A short date display string.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.DateTimeCultureExtensions.ToLongDateString(System.DateTime,Wyam.Common.Execution.IExecutionContext,System.String)">
            <summary>
            Gets a long date display string using the date display culture setting.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> to generate a string for.</param>
            <param name="context">The execution context.</param>
            <param name="targetCulture">The culture that should be used if the date display setting isn't provided. If the
            current culture is of the same family, then it will be used. If not, the specified target culture will be used.</param>
            <returns>A long date display string.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.DateTimeCultureExtensions.GetDateTimeDisplayCulture(Wyam.Common.Execution.IExecutionContext,System.String)">
            <summary>
            Gets the <see cref="T:System.Globalization.CultureInfo"/> for the date display culture.
            </summary>
            <param name="context">The execution context.</param>
            <param name="targetCulture">The culture that should be used if the date display setting isn't provided. If the
            current culture is of the same family, then it will be used. If not, the specified target culture will be used.</param>
            <returns>The date display culture.</returns>
        </member>
        <member name="T:Wyam.Common.Execution.IEngine">
            <summary>
            The engine is the primary entry point for the generation process.
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IEngine.FileSystem">
            <summary>
            Gets the file system.
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IEngine.Settings">
            <summary>
            Gets the settings.
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IEngine.Pipelines">
            <summary>
            Gets the pipelines.
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IEngine.Documents">
            <summary>
            Gets the documents.
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IEngine.Namespaces">
            <summary>
            Gets the namespaces that should be brought in scope by modules that support dynamic compilation.
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IEngine.DynamicAssemblies">
            <summary>
            Gets a collection of all the raw assemblies that should be referenced by modules
            that support dynamic compilation (such as configuration assemblies).
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IEngine.ApplicationInput">
            <summary>
            Gets or sets the application input.
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IEngine.DocumentFactory">
            <summary>
            Gets or sets the document factory.
            </summary>
        </member>
        <member name="T:Wyam.Common.Execution.IExecutionContext">
            <summary>
            All of the information that represents a given build. Also implements
            <see cref="T:Wyam.Common.Meta.IMetadata"/> to expose the global metadata.
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IExecutionContext.ExecutionId">
            <summary>
            Uniquly identifies the current execution cycle. This can be used to initialize and/or
            reset static data for a module on new generations (I.e., due to watching).
            For example, cache data could be cleared when this changes between runs.
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IExecutionContext.DynamicAssemblies">
            <summary>
            Gets the raw bytes for dynamically compiled assemblies (such as the configuration script).
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IExecutionContext.Namespaces">
            <summary>
            Gets a set of namespaces that should be brought into scope for modules that perform dynamic compilation.
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IExecutionContext.Pipeline">
            <summary>
            Gets the currently executing pipeline.
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IExecutionContext.Module">
            <summary>
            Gets the currently executing module.
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IExecutionContext.ExecutionCache">
            <summary>
            Gets the current execution cache. Modules can use the cache to store data between executions.
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IExecutionContext.FileSystem">
            <summary>
            Gets the current file system.
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IExecutionContext.Settings">
            <summary>
            Gets the current settings metadata.
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IExecutionContext.Documents">
            <summary>
            Gets the collection of all previously processed documents.
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IExecutionContext.ApplicationInput">
            <summary>
            Gets any input that was passed to the application (for example, on stdin via piping).
            </summary>
            <value>
            The application input.
            </value>
        </member>
        <member name="M:Wyam.Common.Execution.IExecutionContext.GetContentStream(System.String)">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> that can be used for document content. If <paramref name="content"/>
            is not null, the stream is initialized with the specified content. It is prefered to use
            this method to obtain a stream over creating your own if the source of the content does
            not already provide one. The returned streams are optimized for memory usage and performance.
            <remarks>The position is set to the beginning of the stream when returned.</remarks>
            </summary>
            <param name="content">Content to initialize the stream with.</param>
            <returns>A stream for document content.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.IExecutionContext.GetDocument">
            <summary>
            Gets a new document with default initial metadata.
            </summary>
            <returns>The new document.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.IExecutionContext.GetDocument(Wyam.Common.IO.FilePath,System.IO.Stream,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Boolean)">
            <summary>
            Gets a new document with the specified source, content stream, and metadata (in addition to the default initial metadata).
            If <paramref name="disposeStream"/> is true (which it is by default), the provided
            <see cref="T:System.IO.Stream"/> will automatically be disposed when the document is disposed (I.e., the
            document takes ownership of the <see cref="T:System.IO.Stream"/>).
            </summary>
            <param name="source">The source.</param>
            <param name="stream">The content stream.</param>
            <param name="items">The metadata items.</param>
            <param name="disposeStream">If set to <c>true</c> the provided <see cref="T:System.IO.Stream"/> is disposed when the document is.</param>
            <returns>The new document.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.IExecutionContext.GetDocument(System.IO.Stream,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Boolean)">
            <summary>
            Gets a new document with the specified content stream and metadata (in addition to the default initial metadata).
            If <paramref name="disposeStream"/> is true (which it is by default), the provided
            <see cref="T:System.IO.Stream"/> will automatically be disposed when the document is disposed (I.e., the
            document takes ownership of the <see cref="T:System.IO.Stream"/>).
            </summary>
            <param name="stream">The content stream.</param>
            <param name="items">The metadata items.</param>
            <param name="disposeStream">If set to <c>true</c> the provided <see cref="T:System.IO.Stream"/> is disposed when the document is.</param>
            <returns>The new document.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.IExecutionContext.GetDocument(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Gets a new document with the specified metadata (in addition to the default initial metadata).
            </summary>
            <param name="items">The metadata items.</param>
            <returns>The new document.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.IExecutionContext.GetDocument(Wyam.Common.Documents.IDocument,Wyam.Common.IO.FilePath,System.IO.Stream,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Boolean)">
            <summary>
            Clones the specified source document with a new source, new content stream, and additional metadata (all existing metadata is retained)
            or gets a new document if the source document is null or <c>AsNewDocuments()</c> was called on the module.
            If <paramref name="disposeStream"/> is true (which it is by default), the provided
            <see cref="T:System.IO.Stream"/> will automatically be disposed when the document is disposed (I.e., the
            document takes ownership of the <see cref="T:System.IO.Stream"/>).
            </summary>
            <param name="sourceDocument">The source document.</param>
            <param name="source">The source (if the source document contains a source, then this is ignored and the source document's source is used instead).</param>
            <param name="stream">The content stream.</param>
            <param name="items">The metadata items.</param>
            <param name="disposeStream">If set to <c>true</c> the provided <see cref="T:System.IO.Stream"/> is disposed when the document is.</param>
            <returns>The cloned or new document.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.IExecutionContext.GetDocument(Wyam.Common.Documents.IDocument,System.IO.Stream,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Boolean)">
            <summary>
            Clones the specified source document with a new content stream, and additional metadata (all existing metadata is retained)
            or gets a new document if the source document is null or <c>AsNewDocuments()</c> was called on the module.
            If <paramref name="disposeStream"/> is true (which it is by default), the provided
            <see cref="T:System.IO.Stream"/> will automatically be disposed when the document is disposed (I.e., the
            document takes ownership of the <see cref="T:System.IO.Stream"/>).
            </summary>
            <param name="sourceDocument">The source document.</param>
            <param name="stream">The content stream.</param>
            <param name="items">The metadata items.</param>
            <param name="disposeStream">If set to <c>true</c> the provided <see cref="T:System.IO.Stream"/> is disposed when the document is.</param>
            <returns>The cloned or new document.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.IExecutionContext.GetDocument(Wyam.Common.Documents.IDocument,Wyam.Common.IO.FilePath,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Clones the specified source document with a new source and additional metadata (all existing metadata is retained)
            or gets a new document if the source document is null or <c>AsNewDocuments()</c> was called on the module.
            </summary>
            <param name="sourceDocument">The source document.</param>
            <param name="source">The source (if the source document contains a source, then this is ignored and the source document's source is used instead).</param>
            <param name="items">The metadata items.</param>
            <returns>The cloned or new document.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.IExecutionContext.GetDocument(Wyam.Common.Documents.IDocument,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Clones the specified source document with identical content and additional metadata (all existing metadata is retained)
            or gets a new document if the source document is null or <c>AsNewDocuments()</c> was called on the module.
            </summary>
            <param name="sourceDocument">The source document.</param>
            <param name="items">The metadata items.</param>
            <returns>The cloned or new document.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.IExecutionContext.TryConvert``1(System.Object,``0@)">
            <summary>
            Provides access to the same enhanced type conversion used to convert metadata types.
            </summary>
            <typeparam name="T">The destination type.</typeparam>
            <param name="value">The value to convert.</param>
            <param name="result">The result of the conversion.</param>
            <returns><c>true</c> if the conversion could be completed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.IExecutionContext.Execute(System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule},System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument})">
            <summary>
            Executes the specified modules with the specified input documents and returns the result documents.
            </summary>
            <param name="modules">The modules to execute.</param>
            <param name="inputs">The input documents.</param>
            <returns>The result documents from the executed modules.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.IExecutionContext.Execute(System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Executes the specified modules with an empty initial input document with optional additional metadata and returns the result documents.
            </summary>
            <param name="modules">The modules to execute.</param>
            <param name="metadata">The metadata to use.</param>
            <returns>The result documents from the executed modules.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.IExecutionContext.Execute(System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule},System.Collections.Generic.IEnumerable{Wyam.Common.Meta.MetadataItem})">
            <summary>
            Executes the specified modules with an empty initial input document with optional additional metadata and returns the result documents.
            </summary>
            <param name="modules">The modules to execute.</param>
            <param name="metadata">The metadata to use.</param>
            <returns>The result documents from the executed modules.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.IExecutionContext.GetJsEnginePool(System.Action{Wyam.Common.JavaScript.IJsEngine},System.Int32,System.Int32,System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Gets a new <see cref="T:Wyam.Common.JavaScript.IJsEnginePool"/>. The returned engine pool should be disposed
            when no longer needed.
            </summary>
            <param name="initializer">
            The code to run when a new engine is created. This should configure
            the environment and set up any required JavaScript libraries.
            </param>
            <param name="startEngines">The number of engines to initially start when a pool is created.</param>
            <param name="maxEngines">The maximum number of engines that will be created in the pool.</param>
            <param name="maxUsagesPerEngine">The maximum number of times an engine can be reused before it is disposed.</param>
            <param name="engineTimeout">
            The default timeout to use when acquiring an engine from the pool (defaults to 5 seconds).
            If an engine can not be acquired in this timeframe, an exception will be thrown.
            </param>
            <returns>A new JavaScript engine pool.</returns>
        </member>
        <member name="T:Wyam.Common.Execution.IPipeline">
            <summary>
            Represents a named collection of modules that should be executed by the engine.
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IPipeline.Name">
            <summary>
            The name of the pipeline.
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IPipeline.ProcessDocumentsOnce">
            <summary>
            Specifies that a given pipeline doesn't use data from other pipelines and prevents reprocessing of documents after the first pass.
            </summary>
            <remarks>
            when set, the pipeline looks for the first occurrence of a given <see cref="P:Wyam.Common.Documents.IDocument.Source"/> and then caches all final result
            documents that have the same source. On subsequent executions, if a document with a previously seen <see cref="P:Wyam.Common.Documents.IDocument.Source"/>
            is found and it has the same content, that document is removed from the module output and therefore won't get passed to the next
            module. At the end of the pipeline, all the documents from the first pass that have the same source as the removed one are added
            back to the result set (so later pipelines can still access them in the documents collection if needed).
            </remarks>
        </member>
        <member name="T:Wyam.Common.Execution.IPipelineCollection">
            <summary>
            A collection of pipelines.
            </summary>
        </member>
        <member name="M:Wyam.Common.Execution.IPipelineCollection.Add(System.String,Wyam.Common.Modules.IModuleList)">
            <summary>
            Adds a new named pipeline to the collection.
            </summary>
            <param name="name">The name of the pipeline to add.</param>
            <param name="modules">The modules the pipeline should contain.</param>
            <returns>The added pipeline.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.IPipelineCollection.Add(Wyam.Common.Execution.IPipeline)">
            <summary>
            Adds an existing pipeline to the collection.
            </summary>
            <param name="pipeline">The pipeline to add.</param>
            <returns>The added pipeline.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.IPipelineCollection.Insert(System.Int32,System.String,Wyam.Common.Modules.IModuleList)">
            <summary>
            Inserts a new pipeline into the collection.
            </summary>
            <param name="index">The index at which to insert the new pipeline.</param>
            <param name="name">The name of the pipeline to insert.</param>
            <param name="modules">The modules the pipeline should contain.</param>
            <returns>The inserted pipeline.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.IPipelineCollection.Insert(System.Int32,Wyam.Common.Execution.IPipeline)">
            <summary>
            Inserts an existing pipeline into the collection.
            </summary>
            <param name="index">The index at which to insert the pipeline.</param>
            <param name="pipeline">The pipeline to insert.</param>
            <returns>The inserted pipeline.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.IPipelineCollection.Remove(System.String)">
            <summary>
            Removes a pipeline from the collection by name.
            </summary>
            <param name="name">The name of the pipeline to remove.</param>
            <returns><c>true</c> if the pipeline was found and remove, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.IPipelineCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a pipeline from the collection by index.
            </summary>
            <param name="index">The index of the pipeline to remove.</param>
        </member>
        <member name="M:Wyam.Common.Execution.IPipelineCollection.IndexOf(System.String)">
            <summary>
            Gets the index of a named pipeline.
            </summary>
            <param name="name">The name of the pipeline.</param>
            <returns>The index of the pipeline.</returns>
        </member>
        <member name="P:Wyam.Common.Execution.IPipelineCollection.Count">
            <summary>
            Gets the number of pipeline in the collection.
            </summary>
        </member>
        <member name="M:Wyam.Common.Execution.IPipelineCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Common.Execution.IReadOnlyPipeline">
            <summary>
            A read-only pipeline.
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IReadOnlyPipeline.Name">
            <summary>
            The name of the pipeline.
            </summary>
        </member>
        <member name="P:Wyam.Common.Execution.IReadOnlyPipeline.ProcessDocumentsOnce">
            <summary>
            Indicates whether this pipeline only processes documents once.
            </summary>
        </member>
        <member name="T:Wyam.Common.Execution.LinkExtensions">
            <summary>
            Extensions to generate web links using global settings.
            </summary>
        </member>
        <member name="M:Wyam.Common.Execution.LinkExtensions.GetLink(Wyam.Common.Execution.IExecutionContext)">
            <summary>
            Gets a link for the root of the site using the host and root path specified in the settings.
            </summary>
            <param name="context">The execution context.</param>
            <returns>A link for the root of the site.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.LinkExtensions.GetLink(Wyam.Common.Execution.IExecutionContext,Wyam.Common.Meta.IMetadata,System.Boolean)">
            <summary>
            Gets a link for the specified metadata (typically a document) using the
            "RelativeFilePath" metadata value and the default settings from the
            <see cref="T:Wyam.Common.Configuration.IReadOnlySettings" />. This version should be used inside modules to ensure
            consistent link generation. Note that you can optionally include the host or not depending
            on if you want to generate host-specific links. By default, the host is not included so that
            sites work the same on any server including the preview server.
            </summary>
            <param name="context">The execution context.</param>
            <param name="metadata">The metadata or document to generate a link for.</param>
            <param name="includeHost">If set to <c>true</c> the host configured in the output settings will
            be included in the link, otherwise the host will be omitted and only the root path will be included (default).</param>
            <returns>
            A string representation of the path suitable for a web link.
            </returns>
        </member>
        <member name="M:Wyam.Common.Execution.LinkExtensions.GetLink(Wyam.Common.Execution.IExecutionContext,Wyam.Common.Meta.IMetadata,System.String,System.Boolean)">
            <summary>
            Gets a link for the specified metadata (typically a document) using the
            specified metadata value (by default, "RelativeFilePath") and the default settings from the
            <see cref="T:Wyam.Common.Configuration.IReadOnlySettings" />. This version should be used inside modules to ensure
            consistent link generation. Note that you can optionally include the host or not depending
            on if you want to generate host-specific links. By default, the host is not included so that
            sites work the same on any server including the preview server.
            </summary>
            <param name="context">The execution context.</param>
            <param name="metadata">The metadata or document to generate a link for.</param>
            <param name="key">The key at which a <see cref="T:Wyam.Common.IO.FilePath"/> can be found for generating the link.</param>
            <param name="includeHost">If set to <c>true</c> the host configured in the output settings will
            be included in the link, otherwise the host will be omitted and only the root path will be included (default).</param>
            <returns>
            A string representation of the path suitable for a web link.
            </returns>
        </member>
        <member name="M:Wyam.Common.Execution.LinkExtensions.GetLink(Wyam.Common.Execution.IExecutionContext,System.String,System.Boolean)">
            <summary>
            Converts the specified path into a string appropriate for use as a link using default settings from the
            <see cref="T:Wyam.Common.Configuration.IReadOnlySettings" />. This version should be used inside modules to ensure
            consistent link generation. Note that you can optionally include the host or not depending
            on if you want to generate host-specific links. By default, the host is not included so that
            sites work the same on any server including the preview server.
            </summary>
            <param name="context">The execution context.</param>
            <param name="path">The path to generate a link for.</param>
            <param name="includeHost">If set to <c>true</c> the host configured in the output settings will
            be included in the link, otherwise the host will be omitted and only the root path will be included (default).</param>
            <returns>
            A string representation of the path suitable for a web link.
            </returns>
        </member>
        <member name="M:Wyam.Common.Execution.LinkExtensions.GetLink(Wyam.Common.Execution.IExecutionContext,System.String,System.String,Wyam.Common.IO.DirectoryPath,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Converts the path into a string appropriate for use as a link, overriding one or more
            settings from the <see cref="T:Wyam.Common.Configuration.IReadOnlySettings" />.
            </summary>
            <param name="context">The execution context.</param>
            <param name="path">The path to generate a link for.</param>
            <param name="host">The host to use for the link.</param>
            <param name="root">The root of the link. The value of this parameter is prepended to the path.</param>
            <param name="useHttps">If set to <c>true</c>, HTTPS will be used as the scheme for the link.</param>
            <param name="hideIndexPages">If set to <c>true</c>, "index.htm" and "index.html" file
            names will be hidden.</param>
            <param name="hideExtensions">If set to <c>true</c>, extensions will be hidden.</param>
            <returns>
            A string representation of the path suitable for a web link with the specified
            root and hidden file name or extension.
            </returns>
        </member>
        <member name="M:Wyam.Common.Execution.LinkExtensions.GetLink(Wyam.Common.Execution.IExecutionContext,Wyam.Common.IO.NormalizedPath,System.Boolean)">
            <summary>
            Converts the specified path into a string appropriate for use as a link using default settings from the
            <see cref="T:Wyam.Common.Configuration.IReadOnlySettings" />. This version should be used inside modules to ensure
            consistent link generation. Note that you can optionally include the host or not depending
            on if you want to generate host-specific links. By default, the host is not included so that
            sites work the same on any server including the preview server.
            </summary>
            <param name="context">The execution context.</param>
            <param name="path">The path to generate a link for.</param>
            <param name="includeHost">If set to <c>true</c> the host configured in the output settings will
            be included in the link, otherwise the host will be omitted and only the root path will be included (default).</param>
            <returns>
            A string representation of the path suitable for a web link.
            </returns>
        </member>
        <member name="M:Wyam.Common.Execution.LinkExtensions.GetLink(Wyam.Common.Execution.IExecutionContext,Wyam.Common.IO.NormalizedPath,System.String,Wyam.Common.IO.DirectoryPath,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Converts the path into a string appropriate for use as a link, overriding one or more
            settings from the <see cref="T:Wyam.Common.Configuration.IReadOnlySettings" />.
            </summary>
            <param name="context">The execution context.</param>
            <param name="path">The path to generate a link for.</param>
            <param name="host">The host to use for the link.</param>
            <param name="root">The root of the link. The value of this parameter is prepended to the path.</param>
            <param name="useHttps">If set to <c>true</c>, HTTPS will be used as the scheme for the link.</param>
            <param name="hideIndexPages">If set to <c>true</c>, "index.htm" and "index.html" file
            names will be hidden.</param>
            <param name="hideExtensions">If set to <c>true</c>, extensions will be hidden.</param>
            <returns>
            A string representation of the path suitable for a web link with the specified
            root and hidden file name or extension.
            </returns>
        </member>
        <member name="M:Wyam.Common.Execution.LinkExtensions.GetLink(Wyam.Common.Execution.IExecutionContext,Wyam.Common.IO.NormalizedPath,System.String,Wyam.Common.IO.DirectoryPath,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Converts the path into a string appropriate for use as a link, overriding one or more
            settings from the <see cref="T:Wyam.Common.Configuration.IReadOnlySettings" />.
            </summary>
            <param name="context">The execution context.</param>
            <param name="path">The path to generate a link for.</param>
            <param name="host">The host to use for the link.</param>
            <param name="root">The root of the link. The value of this parameter is prepended to the path.</param>
            <param name="useHttps">If set to <c>true</c>, HTTPS will be used as the scheme for the link.</param>
            <param name="hideIndexPages">If set to <c>true</c>, "index.htm" and "index.html" file
            names will be hidden.</param>
            <param name="hideExtensions">If set to <c>true</c>, extensions will be hidden.</param>
            <param name="lowercase">If set to <c>true</c>, links will be rendered in all lowercase.</param>
            <returns>
            A string representation of the path suitable for a web link with the specified
            root and hidden file name or extension.
            </returns>
        </member>
        <member name="T:Wyam.Common.Execution.Pipeline">
            <summary>
            A utility class for specifying pipelines. Note that this is not required
            for pipeline creation and is typically only used when a pipeline needs to
            be specified outside the context of a configuration file (such as a recipe,
            though it's not even required for those). Instances of this class
            are typically assigned to read-only properties in a <see cref="T:Wyam.Common.Configuration.Recipe"/> class and by
            convention the class name should match the property name (an exception will be thrown during
            recipe application if not). This class also implements string conversions and operators
            that return the pipeline name (so it can be used as a key for the pipeline it defines).
            Note that once this pipeline is added to an <see cref="T:Wyam.Common.Execution.IPipelineCollection"/>, the actual
            instance probably won't be what's stored by the collection and should not be used for comparisons.
            </summary>
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.#ctor">
            <summary>
            Creates a pipeline with an empty modules collection
            and a default name equal to the class name.
            </summary>
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.#ctor(Wyam.Common.Modules.IModule[])">
            <summary>
            Creates a pipeline with the specified modules
            and a default name equal to the class name.
            </summary>
            <param name="modules">The modules in the pipeline.</param>
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.#ctor(System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule})">
            <summary>
            Creates a pipeline with the specified modules
            and a default name equal to the class name.
            </summary>
            <param name="modules">The modules in the pipeline.</param>
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.#ctor(System.String,Wyam.Common.Modules.IModule[])">
            <summary>
            Creates a pipeline with the specified modules
            and the specified name.
            </summary>
            <param name="name">The name of the pipeline.</param>
            <param name="modules">The modules in the pipeline.</param>
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.#ctor(System.String,System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule})">
            <summary>
            Creates a pipeline with the specified modules
            and the specified name.
            </summary>
            <param name="name">The name of the pipeline.</param>
            <param name="modules">The modules in the pipeline.</param>
        </member>
        <member name="P:Wyam.Common.Execution.Pipeline.Name">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Common.Execution.Pipeline.ProcessDocumentsOnce">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.op_Implicit(Wyam.Common.Execution.Pipeline)~System.String">
            <summary>
            Provides the name for the pipeline when converted to a string.
            </summary>
            <param name="pipeline">The current instance.</param>
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.ToString">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.Add(Wyam.Common.Modules.IModule)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.Clear">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.Contains(Wyam.Common.Modules.IModule)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.CopyTo(Wyam.Common.Modules.IModule[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.Remove(Wyam.Common.Modules.IModule)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Common.Execution.Pipeline.Count">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.Add(Wyam.Common.Modules.IModule[])">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.Insert(System.Int32,Wyam.Common.Modules.IModule[])">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.IndexOf(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Common.Execution.Pipeline.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.IndexOf(Wyam.Common.Modules.IModule)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.Insert(System.Int32,Wyam.Common.Modules.IModule)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Common.Execution.Pipeline.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.Contains(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.TryGetValue(System.String,Wyam.Common.Modules.IModule@)">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Common.Execution.Pipeline.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.Add(System.String,Wyam.Common.Modules.IModule)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.Insert(System.Int32,System.String,Wyam.Common.Modules.IModule)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Execution.Pipeline.AsKeyValuePairs">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Common.Execution.PipelineCollectionExtensions">
            <summary>
            Extensions for working with pipeline collections.
            </summary>
        </member>
        <member name="M:Wyam.Common.Execution.PipelineCollectionExtensions.Add(Wyam.Common.Execution.IPipelineCollection,Wyam.Common.Modules.IModuleList)">
            <summary>
            Adds a new unnamed pipeline to the collection.
            </summary>
            <param name="pipelines">The pipeline collection.</param>
            <param name="modules">The modules the new pipeline should contain.</param>
            <returns>The newly added pipeline.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.PipelineCollectionExtensions.Add(Wyam.Common.Execution.IPipelineCollection,Wyam.Common.Modules.IModule[])">
            <summary>
            Adds a new unnamed pipeline to the collection.
            </summary>
            <param name="pipelines">The pipeline collection.</param>
            <param name="modules">The modules the new pipeline should contain.</param>
            <returns>The newly added pipeline.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.PipelineCollectionExtensions.Add(Wyam.Common.Execution.IPipelineCollection,System.String,Wyam.Common.Modules.IModule[])">
            <summary>
            Adds a new named pipeline to the collection.
            </summary>
            <param name="pipelines">The pipeline collection.</param>
            <param name="name">The name of the new pipeline.</param>
            <param name="modules">The modules the new pipeline should contain.</param>
            <returns>The newly added pipeline.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.PipelineCollectionExtensions.Insert(Wyam.Common.Execution.IPipelineCollection,System.Int32,Wyam.Common.Modules.IModuleList)">
            <summary>
            Inserts a new unnamed pipeline into the collection.
            </summary>
            <param name="pipelines">The pipeline collection.</param>
            <param name="index">The index at which to insert the new pipeline.</param>
            <param name="modules">The modules the new pipeline should contain.</param>
            <returns>The newly inserted pipeline.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.PipelineCollectionExtensions.Insert(Wyam.Common.Execution.IPipelineCollection,System.Int32,Wyam.Common.Modules.IModule[])">
            <summary>
            Inserts a new unnamed pipeline into the collection.
            </summary>
            <param name="pipelines">The pipeline collection.</param>
            <param name="index">The index at which to insert the new pipeline.</param>
            <param name="modules">The modules the new pipeline should contain.</param>
            <returns>The newly inserted pipeline.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.PipelineCollectionExtensions.Insert(Wyam.Common.Execution.IPipelineCollection,System.Int32,System.String,Wyam.Common.Modules.IModule[])">
            <summary>
            Inserts a new named pipeline into the collection.
            </summary>
            <param name="pipelines">The pipeline collection.</param>
            <param name="index">The index at which to insert the new pipeline.</param>
            <param name="name">The name of the new pipeline.</param>
            <param name="modules">The modules the new pipeline should contain.</param>
            <returns>The newly inserted pipeline.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.PipelineCollectionExtensions.InsertBefore(Wyam.Common.Execution.IPipelineCollection,System.String,Wyam.Common.Modules.IModule[])">
            <summary>
            Inserts a new unnamed pipeline before an existing named pipeline.
            </summary>
            <param name="pipelines">The pipeline collection.</param>
            <param name="target">The pipeline before which the new pipeline should be inserted.</param>
            <param name="modules">The modules the new pipeline should contain.</param>
            <returns>The newly inserted pipeline.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.PipelineCollectionExtensions.InsertBefore(Wyam.Common.Execution.IPipelineCollection,System.String,Wyam.Common.Modules.IModuleList)">
            <summary>
            Inserts a new unnamed pipeline before an existing named pipeline.
            </summary>
            <param name="pipelines">The pipeline collection.</param>
            <param name="target">The pipeline before which the new pipeline should be inserted.</param>
            <param name="modules">The modules the new pipeline should contain.</param>
            <returns>The newly inserted pipeline.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.PipelineCollectionExtensions.InsertBefore(Wyam.Common.Execution.IPipelineCollection,System.String,System.String,Wyam.Common.Modules.IModule[])">
            <summary>
            Inserts a new named pipeline before an existing named pipeline.
            </summary>
            <param name="pipelines">The pipeline collection.</param>
            <param name="target">The pipeline before which the new pipeline should be inserted.</param>
            <param name="name">The name of the new pipeline.</param>
            <param name="modules">The modules the new pipeline should contain.</param>
            <returns>The newly inserted pipeline.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.PipelineCollectionExtensions.InsertBefore(Wyam.Common.Execution.IPipelineCollection,System.String,System.String,Wyam.Common.Modules.IModuleList)">
            <summary>
            Inserts a new named pipeline before an existing named pipeline.
            </summary>
            <param name="pipelines">The pipeline collection.</param>
            <param name="target">The pipeline before which the new pipeline should be inserted.</param>
            <param name="name">The name of the new pipeline.</param>
            <param name="modules">The modules the new pipeline should contain.</param>
            <returns>The newly inserted pipeline.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.PipelineCollectionExtensions.InsertBefore(Wyam.Common.Execution.IPipelineCollection,System.String,Wyam.Common.Execution.IPipeline)">
            <summary>
            Inserts an existing pipeline before an existing named pipeline.
            </summary>
            <param name="pipelines">The pipeline collection.</param>
            <param name="target">The pipeline before which the specified pipeline should be inserted.</param>
            <param name="pipeline">The pipeline to insert.</param>
            <returns>The inserted pipeline.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.PipelineCollectionExtensions.InsertAfter(Wyam.Common.Execution.IPipelineCollection,System.String,Wyam.Common.Modules.IModule[])">
            <summary>
            Inserts a new unnamed pipeline after an existing named pipeline.
            </summary>
            <param name="pipelines">The pipeline collection.</param>
            <param name="target">The pipeline after which the new pipeline should be inserted.</param>
            <param name="modules">The modules the new pipeline should contain.</param>
            <returns>The newly inserted pipeline.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.PipelineCollectionExtensions.InsertAfter(Wyam.Common.Execution.IPipelineCollection,System.String,Wyam.Common.Modules.IModuleList)">
            <summary>
            Inserts a new unnamed pipeline after an existing named pipeline.
            </summary>
            <param name="pipelines">The pipeline collection.</param>
            <param name="target">The pipeline after which the new pipeline should be inserted.</param>
            <param name="modules">The modules the new pipeline should contain.</param>
            <returns>The newly inserted pipeline.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.PipelineCollectionExtensions.InsertAfter(Wyam.Common.Execution.IPipelineCollection,System.String,System.String,Wyam.Common.Modules.IModule[])">
            <summary>
            Inserts a new named pipeline after an existing named pipeline.
            </summary>
            <param name="pipelines">The pipeline collection.</param>
            <param name="target">The pipeline after which the new pipeline should be inserted.</param>
            <param name="name">The name of the new pipeline.</param>
            <param name="modules">The modules the new pipeline should contain.</param>
            <returns>The newly inserted pipeline.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.PipelineCollectionExtensions.InsertAfter(Wyam.Common.Execution.IPipelineCollection,System.String,System.String,Wyam.Common.Modules.IModuleList)">
            <summary>
            Inserts a new named pipeline after an existing named pipeline.
            </summary>
            <param name="pipelines">The pipeline collection.</param>
            <param name="target">The pipeline after which the new pipeline should be inserted.</param>
            <param name="name">The name of the new pipeline.</param>
            <param name="modules">The modules the new pipeline should contain.</param>
            <returns>The newly inserted pipeline.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.PipelineCollectionExtensions.InsertAfter(Wyam.Common.Execution.IPipelineCollection,System.String,Wyam.Common.Execution.IPipeline)">
            <summary>
            Inserts an existing pipeline after an existing named pipeline.
            </summary>
            <param name="pipelines">The pipeline collection.</param>
            <param name="target">The pipeline after which the specified pipeline should be inserted.</param>
            <param name="pipeline">The pipeline to insert.</param>
            <returns>The inserted pipeline.</returns>
        </member>
        <member name="T:Wyam.Common.Execution.PipelineExtensions">
            <summary>
            Extension methods for <see cref="T:Wyam.Common.Execution.IPipeline"/>.
            </summary>
        </member>
        <member name="M:Wyam.Common.Execution.PipelineExtensions.WithProcessDocumentsOnce(Wyam.Common.Execution.IPipeline,System.Boolean)">
            <summary>
            Specifies that a given pipeline doesn't use data from other pipelines and prevents reprocessing of documents after the first pass.
            </summary>
            <remarks>
            when set, the pipeline looks for the first occurrence of a given <see cref="P:Wyam.Common.Documents.IDocument.Source"/> and then caches all final result
            documents that have the same source. On subsequent executions, if a document with a previously seen <see cref="P:Wyam.Common.Documents.IDocument.Source"/>
            is found and it has the same content, that document is removed from the module output and therefore won't get passed to the next
            module. At the end of the pipeline, all the documents from the first pass that have the same source as the removed one are added
            back to the result set (so later pipelines can still access them in the documents collection if needed).
            </remarks>
            <param name="pipeline">The pipeline to set.</param>
            <param name="processDocumentsOnce"><c>true</c> to process documents once, <c>false</c> for the default behavior.</param>
            <returns>The specified pipeline.</returns>
        </member>
        <member name="T:Wyam.Common.Execution.TraceExceptionsExtensions">
            <summary>
            Extensions to send exception messages to trace output with relevant context such as currently executing module and document.
            </summary>
        </member>
        <member name="M:Wyam.Common.Execution.TraceExceptionsExtensions.TraceExceptions(Wyam.Common.Execution.IExecutionContext,Wyam.Common.Documents.IDocument,System.Action{Wyam.Common.Documents.IDocument})">
            <summary>
            If an exception is thrown within the action, an error messages will be sent to the trace output
            containing information about the document source, the current module, and the exception message.
            The exception will also be re-thrown once the message has been sent to the trace listeners.
            </summary>
            <param name="context">The current execution context.</param>
            <param name="document">The document to be processed.</param>
            <param name="action">The action to evaluate with the document.</param>
        </member>
        <member name="M:Wyam.Common.Execution.TraceExceptionsExtensions.TraceExceptions``1(Wyam.Common.Execution.IExecutionContext,Wyam.Common.Documents.IDocument,System.Func{Wyam.Common.Documents.IDocument,``0})">
            <summary>
            If an exception is thrown within the action, an error messages will be sent to the trace output
            containing information about the document source, the current module, and the exception message.
            The exception will also be re-thrown once the message has been sent to the trace listeners.
            </summary>
            <typeparam name="TResult">The return type of the function.</typeparam>
            <param name="context">The current execution context.</param>
            <param name="document">The document to be processed.</param>
            <param name="func">The function to evaluate with the document.</param>
            <returns>The result of the function.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.TraceExceptionsExtensions.TraceExceptions(Wyam.Common.Execution.IExecutionContext,System.Action)">
            <summary>
            If an exception is thrown within the action, an error messages will be sent to the trace output
            containing information about the current module and the exception message.
            The exception will also be re-thrown once the message has been sent to the trace listeners.
            </summary>
            <param name="context">The current execution context.</param>
            <param name="action">The action to evaluate.</param>
        </member>
        <member name="M:Wyam.Common.Execution.TraceExceptionsExtensions.TraceExceptions``1(Wyam.Common.Execution.IExecutionContext,System.Func{``0})">
            <summary>
            If an exception is thrown within the action, an error messages will be sent to the trace output
            containing information about the current module and the exception message.
            The exception will also be re-thrown once the message has been sent to the trace listeners.
            </summary>
            <typeparam name="TResult">The return type of the function.</typeparam>
            <param name="context">The current execution context.</param>
            <param name="func">The function to evaluate.</param>
            <returns>The result of the function.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.TraceExceptionsExtensions.ForEach(Wyam.Common.Execution.IExecutionContext,System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.Action{Wyam.Common.Documents.IDocument})">
            <summary>
            If an exception is thrown within the action, an error messages will be sent to the trace output
            containing information about the document source, the current module, and the exception message.
            The exception will also be re-thrown once the message has been sent to the trace listeners.
            </summary>
            <param name="context">The current execution context.</param>
            <param name="documents">The documents to be processed.</param>
            <param name="action">The action to evaluate with the documents.</param>
        </member>
        <member name="M:Wyam.Common.Execution.TraceExceptionsExtensions.ParallelForEach(Wyam.Common.Execution.IExecutionContext,System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},System.Action{Wyam.Common.Documents.IDocument})">
            <summary>
            If an exception is thrown within the action, an error messages will be sent to the trace output
            containing information about the document source, the current module, and the exception message.
            The exception will also be re-thrown once the message has been sent to the trace listeners.
            </summary>
            <param name="context">The current execution context.</param>
            <param name="documents">The documents to be processed.</param>
            <param name="action">The action to evaluate with the documents.</param>
        </member>
        <member name="M:Wyam.Common.Execution.TraceExceptionsExtensions.Select``1(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext,System.Func{Wyam.Common.Documents.IDocument,``0})">
            <summary>
            Evaluates a LINQ <c>Select</c> method and traces any exceptions.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="context">The execution context.</param>
            <param name="selector">The selector function.</param>
            <returns>The result sequence.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.TraceExceptionsExtensions.SelectMany``1(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext,System.Func{Wyam.Common.Documents.IDocument,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Evaluates a LINQ <c>SelectMany</c> method and traces any exceptions.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="context">The execution context.</param>
            <param name="selector">The selector function.</param>
            <returns>The result sequence.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.TraceExceptionsExtensions.Where(System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext,System.Func{Wyam.Common.Documents.IDocument,System.Boolean})">
            <summary>
            Evaluates a LINQ <c>Where</c> method and traces any exceptions.
            </summary>
            <param name="source">The source sequence.</param>
            <param name="context">The execution context.</param>
            <param name="predicate">The predicate function.</param>
            <returns>The result sequence.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.TraceExceptionsExtensions.Select(System.Linq.ParallelQuery{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext,System.Func{Wyam.Common.Documents.IDocument,Wyam.Common.Documents.IDocument})">
            <summary>
            Evaluates a PLINQ <c>Select</c> method over a sequence of <see cref="T:Wyam.Common.Documents.IDocument"/> and traces any exceptions.
            </summary>
            <param name="query">The source query.</param>
            <param name="context">The execution context.</param>
            <param name="selector">The selector function.</param>
            <returns>The result query.</returns>
        </member>
        <member name="M:Wyam.Common.Execution.TraceExceptionsExtensions.SelectMany(System.Linq.ParallelQuery{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext,System.Func{Wyam.Common.Documents.IDocument,System.Collections.Generic.IEnumerable{Wyam.Common.Documents.IDocument}})">
            <summary>
            Evaluates a PLINQ <c>SelectMany</c> method over a sequence of <see cref="T:Wyam.Common.Documents.IDocument"/> and traces any exceptions.
            </summary>
            <param name="query">The source query.</param>
            <param name="context">The execution context.</param>
            <param name="selector">The selector function.</param>
            <returns>The result query.</returns>
        </member>
        <member name="T:Wyam.Common.IO.DirectoryEqualityComparer">
            <summary>
            Compares <see cref="T:Wyam.Common.IO.IDirectory"/> equality.
            </summary>
        </member>
        <member name="M:Wyam.Common.IO.DirectoryEqualityComparer.Equals(Wyam.Common.IO.IDirectory,Wyam.Common.IO.IDirectory)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.IO.DirectoryEqualityComparer.GetHashCode(Wyam.Common.IO.IDirectory)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Common.IO.DirectoryPath">
            <summary>
            Represents a directory path.
            </summary>
        </member>
        <member name="M:Wyam.Common.IO.DirectoryPath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Wyam.Common.IO.DirectoryPath"/> class.
            The path will be considered absolute if the underlying OS file system
            considers it absolute.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Wyam.Common.IO.DirectoryPath.#ctor(System.String,Wyam.Common.IO.PathKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Wyam.Common.IO.DirectoryPath"/> class.
            </summary>
            <param name="path">The path.</param>
            <param name="pathKind">Specifies whether the path is relative, absolute, or indeterminate.</param>
        </member>
        <member name="M:Wyam.Common.IO.DirectoryPath.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Wyam.Common.IO.DirectoryPath" /> class
            with the specified file provider.
            The path will be considered absolute if the underlying OS file system
            considers it absolute.
            </summary>
            <param name="fileProvider">The file provider.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Wyam.Common.IO.DirectoryPath.#ctor(System.String,System.String,Wyam.Common.IO.PathKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Wyam.Common.IO.DirectoryPath" /> class
            with the specified file provider.
            </summary>
            <param name="fileProvider">The file provider.</param>
            <param name="path">The path.</param>
            <param name="pathKind">Specifies whether the path is relative, absolute, or indeterminate.</param>
        </member>
        <member name="M:Wyam.Common.IO.DirectoryPath.#ctor(System.Uri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Wyam.Common.IO.DirectoryPath" /> class
            with the specified file provider.
            The path will be considered absolute if the underlying OS file system
            considers it absolute.
            </summary>
            <param name="fileProvider">The file provider.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Wyam.Common.IO.DirectoryPath.#ctor(System.Uri,System.String,Wyam.Common.IO.PathKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Wyam.Common.IO.DirectoryPath" /> class
            with the specified file provider.
            </summary>
            <param name="fileProvider">The file provider.</param>
            <param name="path">The path.</param>
            <param name="pathKind">Specifies whether the path is relative, absolute, or indeterminate.</param>
        </member>
        <member name="M:Wyam.Common.IO.DirectoryPath.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Wyam.Common.IO.DirectoryPath" /> class
            with the specified file provider and/or path.
            </summary>
            <param name="path">The path (and file provider if this is an absolute URI).</param>
        </member>
        <member name="P:Wyam.Common.IO.DirectoryPath.Name">
            <summary>
            Gets the name of the directory.
            </summary>
            <value>The directory name.</value>
            <remarks>
            If this is passed a file path, it will return the file name.
            This is by-and-large equivalent to how DirectoryInfo handles this scenario.
            If we wanted to return the *actual* directory name, we'd need to pull in IFileSystem,
            and do various checks to make sure things exists.
            </remarks>
        </member>
        <member name="P:Wyam.Common.IO.DirectoryPath.Parent">
            <summary>
            Gets the parent path or <c>null</c> if this is a root path.
            </summary>
            <value>
            The parent path or <c>null</c> if this is a root path.
            </value>
        </member>
        <member name="P:Wyam.Common.IO.DirectoryPath.RootRelative">
            <summary>
            Gets current path relative to it's root. If this is already a relative
            path or there is no root path, this just returns the current path.
            </summary>
            <value>
            The current path relative to it's root.
            </value>
        </member>
        <member name="M:Wyam.Common.IO.DirectoryPath.GetFilePath(Wyam.Common.IO.FilePath)">
            <summary>
            Combines the current path with the file name of a <see cref="T:Wyam.Common.IO.FilePath"/>. The current file provider
            is maintained.
            </summary>
            <param name="path">The path.</param>
            <returns>A combination of the current path and the file name of the provided <see cref="T:Wyam.Common.IO.FilePath"/>.</returns>
        </member>
        <member name="M:Wyam.Common.IO.DirectoryPath.GetRelativePath(Wyam.Common.IO.DirectoryPath)">
            <summary>
            Get the relative path to another directory. If this path and the target path
            do not share the same file provider, the target path is returned.
            </summary>
            <param name="target">The target directory path.</param>
            <returns>A <see cref="T:Wyam.Common.IO.DirectoryPath"/>.</returns>
        </member>
        <member name="M:Wyam.Common.IO.DirectoryPath.GetRelativePath(Wyam.Common.IO.FilePath)">
            <summary>
            Get the relative path to another file. If this path and the target path
            do not share the same file provider, the target path is returned.
            </summary>
            <param name="target">The target file path.</param>
            <returns>A <see cref="T:Wyam.Common.IO.FilePath"/>.</returns>
        </member>
        <member name="M:Wyam.Common.IO.DirectoryPath.CombineFile(Wyam.Common.IO.FilePath)">
            <summary>
            Combines the current path with a <see cref="T:Wyam.Common.IO.FilePath"/>.
            If the provided <see cref="T:Wyam.Common.IO.FilePath"/> is not relative, then it is returned.
            </summary>
            <param name="path">The path.</param>
            <returns>A combination of the current path and the provided <see cref="T:Wyam.Common.IO.FilePath"/>, unless
            the provided <see cref="T:Wyam.Common.IO.FilePath"/> is absolute in which case it is returned.</returns>
        </member>
        <member name="M:Wyam.Common.IO.DirectoryPath.Combine(Wyam.Common.IO.DirectoryPath)">
            <summary>
            Combines the current path with another <see cref="T:Wyam.Common.IO.DirectoryPath"/>.
            If the provided <see cref="T:Wyam.Common.IO.DirectoryPath"/> is not relative, then it is returned.
            </summary>
            <param name="path">The path.</param>
            <returns>A combination of the current path and the provided <see cref="T:Wyam.Common.IO.DirectoryPath"/>, unless
            the provided <see cref="T:Wyam.Common.IO.DirectoryPath"/> is absolute in which case it is returned.</returns>
        </member>
        <member name="M:Wyam.Common.IO.DirectoryPath.Collapse">
            <summary>
            Collapses a <see cref="T:Wyam.Common.IO.DirectoryPath"/> containing ellipses.
            </summary>
            <returns>A collapsed <see cref="T:Wyam.Common.IO.DirectoryPath"/>.</returns>
        </member>
        <member name="M:Wyam.Common.IO.DirectoryPath.op_Implicit(System.String)~Wyam.Common.IO.DirectoryPath">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Wyam.Common.IO.DirectoryPath"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Wyam.Common.IO.DirectoryPath"/>.</returns>
        </member>
        <member name="M:Wyam.Common.IO.DirectoryPath.FromString(System.String)">
            <summary>
            Performs a conversion from <see cref="T:System.String"/> to <see cref="T:Wyam.Common.IO.DirectoryPath"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Wyam.Common.IO.DirectoryPath"/>.</returns>
        </member>
        <member name="M:Wyam.Common.IO.DirectoryPath.op_Implicit(System.Uri)~Wyam.Common.IO.DirectoryPath">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Uri"/> to <see cref="T:Wyam.Common.IO.DirectoryPath"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Wyam.Common.IO.DirectoryPath"/>.</returns>
        </member>
        <member name="M:Wyam.Common.IO.DirectoryPath.FromUri(System.Uri)">
            <summary>
            Performs a conversion from <see cref="T:System.Uri"/> to <see cref="T:Wyam.Common.IO.DirectoryPath"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Wyam.Common.IO.DirectoryPath"/>.</returns>
        </member>
        <member name="T:Wyam.Common.IO.FileEqualityComparer">
            <summary>
            Compares <see cref="T:Wyam.Common.IO.IFile"/> equality.
            </summary>
        </member>
        <member name="M:Wyam.Common.IO.FileEqualityComparer.Equals(Wyam.Common.IO.IFile,Wyam.Common.IO.IFile)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.IO.FileEqualityComparer.GetHashCode(Wyam.Common.IO.IFile)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Common.IO.FilePath">
            <summary>
            Represents a file path.
            </summary>
        </member>
        <member name="M:Wyam.Common.IO.FilePath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Wyam.Common.IO.FilePath"/> class.
            The path will be considered absolute if the underlying OS file system
            considers it absolute.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Wyam.Common.IO.FilePath.#ctor(System.String,Wyam.Common.IO.PathKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Wyam.Common.IO.FilePath"/> class..
            </summary>
            <param name="path">The path.</param>
            <param name="pathKind">Specifies whether the path is relative, absolute, or indeterminate.</param>
        </member>
        <member name="M:Wyam.Common.IO.FilePath.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Wyam.Common.IO.FilePath" /> class
            with the specified file provider.
            The path will be considered absolute if the underlying OS file system
            considers it absolute.
            </summary>
            <param name="fileProvider">The file provider.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Wyam.Common.IO.FilePath.#ctor(System.String,System.String,Wyam.Common.IO.PathKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Wyam.Common.IO.FilePath" /> class
            with the specified file provider.
            </summary>
            <param name="fileProvider">The file provider.</param>
            <param name="path">The path.</param>
            <param name="pathKind">Specifies whether the path is relative, absolute, or indeterminate.</param>
        </member>
        <member name="M:Wyam.Common.IO.FilePath.#ctor(System.Uri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Wyam.Common.IO.FilePath" /> class
            with the specified file provider.
            The path will be considered absolute if the underlying OS file system
            considers it absolute.
            </summary>
            <param name="fileProvider">The file provider.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Wyam.Common.IO.FilePath.#ctor(System.Uri,System.String,Wyam.Common.IO.PathKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Wyam.Common.IO.FilePath" /> class
            with the specified file provider.
            </summary>
            <param name="fileProvider">The file provider.</param>
            <param name="path">The path.</param>
            <param name="pathKind">Specifies whether the path is relative, absolute, or indeterminate.</param>
        </member>
        <member name="M:Wyam.Common.IO.FilePath.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Wyam.Common.IO.FilePath" /> class
            with the specified file provider and/or path.
            </summary>
            <param name="path">The path (and file provider if this is an absolute URI).</param>
        </member>
        <member name="P:Wyam.Common.IO.FilePath.HasExtension">
            <summary>
            Gets a value indicating whether this path has a file extension.
            </summary>
            <value>
            <c>true</c> if this file path has a file extension; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Wyam.Common.IO.FilePath.Directory">
            <summary>
            Gets the directory part of the path.
            </summary>
            <value>The directory part of the path.</value>
        </member>
        <member name="P:Wyam.Common.IO.FilePath.RootRelative">
            <summary>
            Gets the file path relative to it's root path.
            </summary>
        </member>
        <member name="P:Wyam.Common.IO.FilePath.FileName">
            <summary>
            Gets the filename.
            </summary>
            <value>The filename.</value>
        </member>
        <member name="P:Wyam.Common.IO.FilePath.FileNameWithoutExtension">
            <summary>
            Gets the filename without it's extension.
            </summary>
            <value>The filename without it's extension, or <c>null</c> if the file has no name.</value>
        </member>
        <member name="P:Wyam.Common.IO.FilePath.Extension">
            <summary>
            Gets the file extension (including the preceding ".").
            </summary>
            <value>The file extension (including the preceding ".").</value>
        </member>
        <member name="M:Wyam.Common.IO.FilePath.ChangeExtension(System.String)">
            <summary>
            Changes the file extension of the path.
            </summary>
            <param name="extension">The new extension.</param>
            <returns>A new <see cref="T:Wyam.Common.IO.FilePath"/> with a new extension.</returns>
        </member>
        <member name="M:Wyam.Common.IO.FilePath.AppendExtension(System.String)">
            <summary>
            Appends a file extension to the path.
            </summary>
            <param name="extension">The extension.</param>
            <returns>A new <see cref="T:Wyam.Common.IO.FilePath"/> with an appended extension.</returns>
        </member>
        <member name="M:Wyam.Common.IO.FilePath.InsertSuffix(System.String)">
            <summary>
            Inserts a suffix into the file name before the extension.
            </summary>
            <param name="suffix">The suffix to insert.</param>
            <returns>A new <see cref="T:Wyam.Common.IO.FilePath"/> with the specified suffix.</returns>
        </member>
        <member name="M:Wyam.Common.IO.FilePath.InsertPrefix(System.String)">
            <summary>
            Inserts a prefix into the file name.
            </summary>
            <param name="prefix">The prefix to insert.</param>
            <returns>A new <see cref="T:Wyam.Common.IO.FilePath"/> with the specified prefix.</returns>
        </member>
        <member name="M:Wyam.Common.IO.FilePath.Collapse">
            <summary>
            Collapses a <see cref="T:Wyam.Common.IO.FilePath"/> containing ellipses.
            </summary>
            <returns>A collapsed <see cref="T:Wyam.Common.IO.FilePath"/>.</returns>
        </member>
        <member name="M:Wyam.Common.IO.FilePath.op_Implicit(System.String)~Wyam.Common.IO.FilePath">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Wyam.Common.IO.FilePath"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Wyam.Common.IO.FilePath"/>.</returns>
        </member>
        <member name="M:Wyam.Common.IO.FilePath.FromString(System.String)">
            <summary>
            Performs a conversion from <see cref="T:System.String"/> to <see cref="T:Wyam.Common.IO.FilePath"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Wyam.Common.IO.FilePath"/>.</returns>
        </member>
        <member name="M:Wyam.Common.IO.FilePath.op_Implicit(System.Uri)~Wyam.Common.IO.FilePath">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Uri"/> to <see cref="T:Wyam.Common.IO.FilePath"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Wyam.Common.IO.FilePath"/>.</returns>
        </member>
        <member name="M:Wyam.Common.IO.FilePath.FromUri(System.Uri)">
            <summary>
            Performs a conversion from <see cref="T:System.Uri"/> to <see cref="T:Wyam.Common.IO.FilePath"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Wyam.Common.IO.FilePath"/>.</returns>
        </member>
        <member name="T:Wyam.Common.IO.IDirectory">
            <summary>
            Represents a directory. Not all implementations will support all
            available methods and may throw <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Wyam.Common.IO.IDirectory.Path">
            <summary>
            Gets the path to the directory.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Wyam.Common.IO.IDirectory.Parent">
            <summary>
            Gets the parent directory or <c>null</c> if the directory is a root.
            </summary>
        </member>
        <member name="M:Wyam.Common.IO.IDirectory.Create">
            <summary>
            Creates the directory, including any necessary parent directories.
            </summary>
        </member>
        <member name="M:Wyam.Common.IO.IDirectory.Delete(System.Boolean)">
            <summary>
            Deletes the directory.
            </summary>
            <param name="recursive">Will perform a recursive delete if set to <c>true</c>.</param>
        </member>
        <member name="M:Wyam.Common.IO.IDirectory.GetDirectories(System.IO.SearchOption)">
            <summary>
            Gets directories matching the specified filter and scope.
            </summary>
            <param name="searchOption">
            Specifies whether the operation should include only
            the current directory or should include all subdirectories.
            </param>
            <returns>Directories matching the filter and scope.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IDirectory.GetFiles(System.IO.SearchOption)">
            <summary>
            Gets files matching the specified filter and scope.
            </summary>
            <param name="searchOption">
            Specifies whether the operation should include only
            the current directory or should include all subdirectories.
            </param>
            <returns>Files matching the specified filter and scope.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IDirectory.GetDirectory(Wyam.Common.IO.DirectoryPath)">
            <summary>
            Gets a directory by combining it's path with the current directory's path.
            The specified directory path must be relative.
            </summary>
            <param name="directory">The path of the directory.</param>
            <returns>The directory.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IDirectory.GetFile(Wyam.Common.IO.FilePath)">
            <summary>
            Gets a file by combining it's path with the current directory's path.
            The specified file path must be relative.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>The file.</returns>
        </member>
        <member name="T:Wyam.Common.IO.IFile">
            <summary>
            Represents a file. Not all implementations will support all
            available methods and may throw <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Wyam.Common.IO.IFile.Path">
            <summary>
            Gets the path to the file.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Wyam.Common.IO.IFile.Directory">
            <summary>
            Gets the directory of the file.
            </summary>
            <value>
            The directory of the file.
            </value>
        </member>
        <member name="P:Wyam.Common.IO.IFile.Length">
            <summary>
            Gets the length of the file.
            </summary>
            <value>The length of the file.</value>
        </member>
        <member name="M:Wyam.Common.IO.IFile.CopyTo(Wyam.Common.IO.IFile,System.Boolean,System.Boolean)">
            <summary>
            Copies the file to the specified destination file.
            </summary>
            <param name="destination">The destination file.</param>
            <param name="overwrite">Will overwrite existing destination file if set to <c>true</c>.</param>
            <param name="createDirectory">Will create any needed directories that don't already exist if set to <c>true</c>.</param>
        </member>
        <member name="M:Wyam.Common.IO.IFile.MoveTo(Wyam.Common.IO.IFile)">
            <summary>
            Moves the file to the specified destination file.
            </summary>
            <param name="destination">The destination file.</param>
        </member>
        <member name="M:Wyam.Common.IO.IFile.Delete">
            <summary>
            Deletes the file.
            </summary>
        </member>
        <member name="M:Wyam.Common.IO.IFile.ReadAllText">
            <summary>
            Reads all text from the file.
            </summary>
            <returns>All text in the file.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IFile.WriteAllText(System.String,System.Boolean)">
            <summary>
            Writes the specified text to a file.
            </summary>
            <param name="contents">The text to write.</param>
            <param name="createDirectory">Will create any needed directories that don't already exist if set to <c>true</c>.</param>
        </member>
        <member name="M:Wyam.Common.IO.IFile.OpenRead">
            <summary>
            Opens the file for reading. If it does not exist, an exception
            will be thrown.
            </summary>
            <returns>The stream.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IFile.OpenWrite(System.Boolean)">
            <summary>
            Opens the file for writing. This will either create the file
            if it doesn't exist or overwrite it if it does.
            </summary>
            <param name="createDirectory">Will create any needed directories that don't already exist if set to <c>true</c>.</param>
            <returns>The stream.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IFile.OpenAppend(System.Boolean)">
            <summary>
            Opens the file for writing. This will either create the file
            if it doesn't exist or append to it if it does.
            </summary>
            <param name="createDirectory">Will create any needed directories that don't already exist if set to <c>true</c>.</param>
            <returns>The stream.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IFile.Open(System.Boolean)">
            <summary>
            Opens the file for reading and writing. This will either create the file
            if it doesn't exist or overwrite it if it does.
            </summary>
            <param name="createDirectory">Will create any needed directories that don't already exist if set to <c>true</c>.</param>
            <returns>The stream.</returns>
        </member>
        <member name="T:Wyam.Common.IO.IFileProvider">
            <summary>
            A provider that can instantiate <see cref="T:Wyam.Common.IO.IFile"/> and <see cref="T:Wyam.Common.IO.IDirectory"/>
            objects from their paths.
            </summary>
        </member>
        <member name="M:Wyam.Common.IO.IFileProvider.GetFile(Wyam.Common.IO.FilePath)">
            <summary>
            Gets a file from a specified path.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The file.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IFileProvider.GetDirectory(Wyam.Common.IO.DirectoryPath)">
            <summary>
            Gets a directory from a specified path.
            </summary>
            <param name="path">The path to the directory.</param>
            <returns>The directory.</returns>
        </member>
        <member name="T:Wyam.Common.IO.IFileProviderCollection">
            <summary>
            A collection of file providers mapped to schemes.
            </summary>
        </member>
        <member name="M:Wyam.Common.IO.IFileProviderCollection.Add(System.String,Wyam.Common.IO.IFileProvider)">
            <summary>
            Adds a file provider.
            </summary>
            <param name="scheme">The scheme the file provider supports.</param>
            <param name="provider">The file provider.</param>
        </member>
        <member name="M:Wyam.Common.IO.IFileProviderCollection.Remove(System.String)">
            <summary>
            Removes a file provider by scheme.
            </summary>
            <param name="scheme">The scheme to remove.</param>
            <returns><c>true</c> if the provider was found and removed,
            <c>false</c> if the provider was not found.</returns>
        </member>
        <member name="T:Wyam.Common.IO.IFileSystem">
            <summary>
            A file system that can be configured.
            </summary>
        </member>
        <member name="P:Wyam.Common.IO.IFileSystem.FileProviders">
            <summary>
            Gets the file providers.
            </summary>
            <value>
            The file providers.
            </value>
        </member>
        <member name="P:Wyam.Common.IO.IFileSystem.RootPath">
            <summary>
            Gets or sets the root path.
            </summary>
            <value>
            The root path.
            </value>
        </member>
        <member name="P:Wyam.Common.IO.IFileSystem.InputPaths">
            <summary>
            Gets the input paths collection which can be used
            to add or remove input paths.
            </summary>
            <value>
            The input paths.
            </value>
        </member>
        <member name="P:Wyam.Common.IO.IFileSystem.OutputPath">
            <summary>
            Gets or sets the output path.
            </summary>
            <value>
            The output path.
            </value>
        </member>
        <member name="P:Wyam.Common.IO.IFileSystem.TempPath">
            <summary>
            Gets or sets the temporary file path.
            </summary>
        </member>
        <member name="T:Wyam.Common.IO.IFileSystemEntry">
            <summary>
            Represents an entry in the file system
            </summary>
        </member>
        <member name="P:Wyam.Common.IO.IFileSystemEntry.Path">
            <summary>
            Gets the path to the entry.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Wyam.Common.IO.IFileSystemEntry.Exists">
            <summary>
            Gets a value indicating whether this <see cref="T:Wyam.Common.IO.IFileSystemEntry"/> exists.
            </summary>
            <value>
              <c>true</c> if the entry exists; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Wyam.Common.IO.IReadOnlyFileProviderCollection">
            <summary>
            A read-only collection of file providers mapped to schemes.
            </summary>
        </member>
        <member name="P:Wyam.Common.IO.IReadOnlyFileProviderCollection.Providers">
            <summary>
            Gets the current file providers.
            </summary>
            <value>
            The current file providers.
            </value>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileProviderCollection.Get(System.String)">
            <summary>
            Gets the requested file provider. Throws <see cref="T:System.Collections.Generic.KeyNotFoundException"/>
            if the provider couldn't be found.
            </summary>
            <param name="scheme">The scheme the provider supports.</param>
            <returns>The requested <see cref="T:Wyam.Common.IO.IFileProvider"/>.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileProviderCollection.TryGet(System.String,Wyam.Common.IO.IFileProvider@)">
            <summary>
            Tries to get the requested file provider.
            </summary>
            <param name="scheme">The scheme the provider supports.</param>
            <param name="fileProvider">The file provider.</param>
            <returns><c>true</c> if the provider was found, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Wyam.Common.IO.IReadOnlyFileSystem">
            <summary>
            Represents a file system.
            </summary>
        </member>
        <member name="P:Wyam.Common.IO.IReadOnlyFileSystem.FileProviders">
            <summary>
            Gets the file providers.
            </summary>
            <value>
            The file providers.
            </value>
        </member>
        <member name="P:Wyam.Common.IO.IReadOnlyFileSystem.RootPath">
            <summary>
            Gets the root path.
            </summary>
            <value>
            The root path.
            </value>
        </member>
        <member name="P:Wyam.Common.IO.IReadOnlyFileSystem.InputPaths">
            <summary>
            Gets the input paths. These are searched in reverse order for
            files and directories. For example, given input paths "A", "B",
            and "C" in that order, "C" will be checked for a requested file
            or directory first, and then if it doesn't exist in "C", "B"
            will be checked, and then "A". If none of the input paths contain
            the requested file or directory, the last input path (in this case,
            "C") will be used as the location of the requested non-existent file
            or directory. If you attempt to create it at this point, it will be
            created under path "C".
            </summary>
            <value>
            The input paths.
            </value>
        </member>
        <member name="P:Wyam.Common.IO.IReadOnlyFileSystem.OutputPath">
            <summary>
            Gets the output path.
            </summary>
            <value>
            The output path.
            </value>
        </member>
        <member name="P:Wyam.Common.IO.IReadOnlyFileSystem.TempPath">
            <summary>
            Gets the temporary file path.
            </summary>
            <value>
            The temporary file path.
            </value>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetInputFile(Wyam.Common.IO.FilePath)">
            <summary>
            Gets a file representing an input.
            </summary>
            <param name="path">
            The path of the input file. If this is an absolute path,
            then a file representing the specified path is returned.
            If it's a relative path, then operations will search all
            current input paths.
            </param>
            <returns>An input file.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetInputFiles(System.String[])">
            <summary>
            Gets matching input files based on globbing patterns and/or absolute paths. If any absolute paths
            are provided, only those that actually exist are returned.
            </summary>
            <param name="patterns">The globbing patterns and/or absolute paths.</param>
            <returns>All input files that match the globbing patterns and/or absolute paths.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetInputFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets matching input files based on globbing patterns and/or absolute paths. If any absolute paths
            are provided, only those that actually exist are returned.
            </summary>
            <param name="patterns">The globbing patterns and/or absolute paths.</param>
            <returns>All input files that match the globbing patterns and/or absolute paths.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetInputDirectory(Wyam.Common.IO.DirectoryPath)">
            <summary>
            Gets a directory representing an input.
            </summary>
            <param name="path">
            The path of the input directory. If this is an absolute path,
            then a directory representing the specified path is returned.
            If it's a relative path, then the returned directory will
            be a virtual directory that aggregates all input
            paths. If this is <c>null</c> then a virtual
            directory aggregating all input paths is returned.
            </param>
            <returns>An input directory.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetInputDirectories">
            <summary>
            Gets all absolute input directories.
            </summary>
            <returns>The absolute input directories.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetContainingInputPath(Wyam.Common.IO.NormalizedPath)">
            <summary>
            Gets the absolute input path that contains the specified file or directory. If the provided
            file or directory path is absolute, this returns the input path that contains the specified
            path (note that the specified file or directory does not need to exist and this just returns
            the input path that would contain the file or directory based only on path information). If
            the provided path is relative, this checks all input paths for the existence of the file
            or directory and returns the first one where it exists.
            </summary>
            <param name="path">The file path.</param>
            <returns>The input path that contains the specified file,
            or <c>null</c> if no input path does.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetOutputPath(Wyam.Common.IO.FilePath)">
            <summary>
            Gets an output file path by combining it with the root path and output path.
            </summary>
            <param name="path">The path to combine with the root path and output path.</param>
            <returns>The output file path.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetOutputPath(Wyam.Common.IO.DirectoryPath)">
            <summary>
            Gets an output directory path by combining it with the root path and output path.
            </summary>
            <param name="path">The path to combine with the root path and output path.
            If this is <c>null</c>, returns the root path combined with the output path.</param>
            <returns>The output directory path.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetOutputFile(Wyam.Common.IO.FilePath)">
            <summary>
            Gets a file representing an output.
            </summary>
            <param name="path">
            The path of the output file. If this is an absolute path,
            then a file representing the specified path is returned.
            If it's a relative path, then it will be combined with the
            current output path.
            </param>
            <returns>An output file.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetOutputDirectory(Wyam.Common.IO.DirectoryPath)">
            <summary>
            Gets a directory representing an output.
            </summary>
            <param name="path">
            The path of the output directory. If this is an absolute path,
            then a directory representing the specified path is returned.
            If it's a relative path, then it will be combined with the
            current output path. If this is <c>null</c> then the base
            output directory is returned.
            </param>
            <returns>An output directory.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetRootFile(Wyam.Common.IO.FilePath)">
            <summary>
            Gets a file representing a root file.
            </summary>
            <param name="path">
            The path of the root file. If this is an absolute path,
            then a file representing the specified path is returned.
            If it's a relative path, then it will be combined with the
            current root path.
            </param>
            <returns>A root file.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetRootDirectory(Wyam.Common.IO.DirectoryPath)">
            <summary>
            Gets a directory representing a root directory.
            </summary>
            <param name="path">
            The path of the root directory. If this is an absolute path,
            then a directory representing the specified path is returned.
            If it's a relative path, then it will be combined with the
            current root path. If this is <c>null</c> then the base
            root directory is returned.
            </param>
            <returns>A root directory.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetTempPath(Wyam.Common.IO.FilePath)">
            <summary>
            Gets a temp file path by combining it with the root path and temp path.
            </summary>
            <param name="path">The path to combine with the root path and temp path.</param>
            <returns>The temp file path.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetTempPath(Wyam.Common.IO.DirectoryPath)">
            <summary>
            Gets a temp directory path by combining it with the root path and temp path.
            </summary>
            <param name="path">The path to combine with the root path and temp path.
            If this is <c>null</c>, returns the root path combined with the temp path.</param>
            <returns>The temp directory path.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetTempFile(Wyam.Common.IO.FilePath)">
            <summary>
            Gets a file representing a temp file.
            </summary>
            <param name="path">
            If this is an absolute path,
            then a file representing the specified path is returned.
            If it's a relative path, then it will be combined with the
            current temp path.
            </param>
            <returns>A temp file.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetTempFile">
            <summary>
            Gets a file representing a temp file with a random file name.
            </summary>
            <returns>A temp file.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetTempDirectory(Wyam.Common.IO.DirectoryPath)">
            <summary>
            Gets a directory representing temp files.
            </summary>
            <param name="path">
            The path of the temp directory. If this is an absolute path,
            then a directory representing the specified path is returned.
            If it's a relative path, then it will be combined with the
            current temp path. If this is <c>null</c> then the base
            temp directory is returned.
            </param>
            <returns>A temp directory.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetFile(Wyam.Common.IO.FilePath)">
            <summary>
            Gets an absolute file.
            </summary>
            <param name="path">
            The absolute path of the file.
            </param>
            <returns>A file.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetDirectory(Wyam.Common.IO.DirectoryPath)">
            <summary>
            Gets an absolute directory.
            </summary>
            <param name="path">
            The absolute path of the directory.
            </param>
            <returns>A directory.</returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetFiles(System.String[])">
            <summary>
            Gets matching files based on globbing patterns from the root path or absolute paths.
            </summary>
            <param name="patterns">The globbing patterns and/or absolute paths.</param>
            <returns>
            All files in the specified directory that match the globbing patterns and/or absolute paths.
            </returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets matching files based on globbing patterns from the root path or absolute paths.
            </summary>
            <param name="patterns">The globbing patterns and/or absolute paths.</param>
            <returns>
            All files in the specified directory that match the globbing patterns and/or absolute paths.
            </returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetFiles(Wyam.Common.IO.IDirectory,System.String[])">
            <summary>
            Gets matching files based on globbing patterns and/or absolute paths. If any absolute paths
            are provided, only those that actually exist are returned.
            </summary>
            <param name="directory">The directory to search.</param>
            <param name="patterns">The globbing patterns and/or absolute paths.</param>
            <returns>
            All files in the specified directory that match the globbing patterns and/or absolute paths.
            </returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetFiles(Wyam.Common.IO.IDirectory,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets matching files based on globbing patterns and/or absolute paths. If any absolute paths
            are provided, only those that actually exist are returned.
            </summary>
            <param name="directory">The directory to search.</param>
            <param name="patterns">The globbing patterns and/or absolute paths.</param>
            <returns>
            All files in the specified directory that match the globbing patterns and/or absolute paths.
            </returns>
        </member>
        <member name="M:Wyam.Common.IO.IReadOnlyFileSystem.GetFileProvider(Wyam.Common.IO.NormalizedPath)">
            <summary>
            Gets the registered file provider for a specified path.
            </summary>
            <param name="path">The path to get the file provider for.</param>
            <returns>The file provider for the specified path.</returns>
        </member>
        <member name="T:Wyam.Common.IO.NormalizedPath">
            <summary>
            Provides properties and instance methods for working with paths.
            </summary>
        </member>
        <member name="F:Wyam.Common.IO.NormalizedPath.DefaultFileProvider">
            <summary>
            The default file provider.
            </summary>
        </member>
        <member name="M:Wyam.Common.IO.NormalizedPath.#ctor(System.String,Wyam.Common.IO.PathKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Wyam.Common.IO.NormalizedPath" /> class.
            </summary>
            <param name="path">The path.</param>
            <param name="pathKind">Specifies whether the path is relative, absolute, or indeterminate.</param>
        </member>
        <member name="M:Wyam.Common.IO.NormalizedPath.#ctor(System.String,System.String,Wyam.Common.IO.PathKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Wyam.Common.IO.NormalizedPath" /> class
            with the given provider.
            </summary>
            <param name="fileProvider">The provider for this path.</param>
            <param name="path">The path.</param>
            <param name="pathKind">Specifies whether the path is relative, absolute, or indeterminate.</param>
        </member>
        <member name="M:Wyam.Common.IO.NormalizedPath.#ctor(System.Uri,System.String,Wyam.Common.IO.PathKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Wyam.Common.IO.NormalizedPath" /> class
            with the given provider.
            </summary>
            <param name="fileProvider">The provider for this path.</param>
            <param name="path">The path.</param>
            <param name="pathKind">Specifies whether the path is relative, absolute, or indeterminate.</param>
        </member>
        <member name="M:Wyam.Common.IO.NormalizedPath.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Wyam.Common.IO.NormalizedPath" /> class. The new path
            will be absolute if the specified URI is absolute, otherwise it will be relative.
            </summary>
            <param name="path">The path as a URI.</param>
        </member>
        <member name="M:Wyam.Common.IO.NormalizedPath.#ctor(System.Tuple{System.Uri,System.String},System.Boolean,Wyam.Common.IO.PathKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Wyam.Common.IO.NormalizedPath" /> class.
            </summary>
            <param name="providerAndPath">The provider and path as a Tuple so it can
            be passed from both of the other constructors.</param>
            <param name="fullySpecified">If set to <c>true</c> indicates that this constructor was
            called from one where the provider and path were fully specified (as opposed to being inferred).</param>
            <param name="pathKind">Specifies whether the path is relative, absolute, or indeterminate.</param>
        </member>
        <member name="M:Wyam.Common.IO.NormalizedPath.GetFileProviderAndPath(System.Uri,System.String)">
            <summary>
            Gets the provider and path from a path string. Implemented as a static
            so it can be used in a constructor chain. Internal for testing.
            </summary>
            <param name="uriPath">The URI-based path.</param>
            <param name="stringPath">The string-based path.</param>
            <returns>The provider (item 1) and path (item 2).</returns>
        </member>
        <member name="P:Wyam.Common.IO.NormalizedPath.FullPath">
            <summary>
            Gets the full path.
            </summary>
            <value>The full path.</value>
        </member>
        <member name="P:Wyam.Common.IO.NormalizedPath.IsRelative">
            <summary>
            Gets a value indicating whether this path is relative.
            </summary>
            <value>
            <c>true</c> if this path is relative; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Wyam.Common.IO.NormalizedPath.IsAbsolute">
            <summary>
            Gets or sets a value indicating whether this path is absolute.
            </summary>
            <value>
            <c>true</c> if this path is absolute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Wyam.Common.IO.NormalizedPath.Segments">
            <summary>
            Gets the segments making up the path.
            </summary>
            <value>The segments making up the path.</value>
        </member>
        <member name="P:Wyam.Common.IO.NormalizedPath.FileProvider">
            <summary>
            Gets the file provider for this path. If this is a relative path,
            the file provider will always be <c>null</c>. If this is an absolute
            path and the file provider is <c>null</c> it indicates the path
            is not intended for use with an actual file provider.
            </summary>
            <value>
            The file provider for this path.
            </value>
        </member>
        <member name="P:Wyam.Common.IO.NormalizedPath.Root">
            <summary>
            Gets the root of this path or "." if this is a relative path
            or there is no root.
            </summary>
            <value>
            The root of this path.
            </value>
        </member>
        <member name="M:Wyam.Common.IO.NormalizedPath.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this path.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Wyam.Common.IO.NormalizedPath.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.IO.NormalizedPath.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.IO.NormalizedPath.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.IO.NormalizedPath.CompareTo(Wyam.Common.IO.NormalizedPath)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Common.IO.PathCollection`1">
            <summary>
            An ordered collection of unique <see cref="T:Wyam.Common.IO.NormalizedPath"/>.
            </summary>
            <typeparam name="TPath">The type of the path (file or directory).</typeparam>
        </member>
        <member name="M:Wyam.Common.IO.PathCollection`1.#ctor">
            <summary>
            Initializes a new path collection.
            </summary>
        </member>
        <member name="M:Wyam.Common.IO.PathCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new path collection.
            </summary>
            <param name="paths">The paths.</param>
        </member>
        <member name="M:Wyam.Common.IO.PathCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <c>IEnumerator&lt;TPath&gt;</c> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Wyam.Common.IO.PathCollection`1.Count">
            <summary>
            Gets the number of directories in the collection.
            </summary>
            <value>The number of directories in the collection.</value>
        </member>
        <member name="P:Wyam.Common.IO.PathCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Wyam.Common.IO.DirectoryPath" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:Wyam.Common.IO.DirectoryPath" /> at the specified index.
            </value>
            <param name="index">The index.</param>
            <returns>The path at the specified index.</returns>
        </member>
        <member name="M:Wyam.Common.IO.PathCollection`1.Add(`0)">
            <summary>
            Adds the specified path to the collection.
            </summary>
            <param name="path">The path to add.</param>
            <returns>
            <c>true</c> if the path was added; <c>false</c> if the path was already present.
            </returns>
        </member>
        <member name="M:Wyam.Common.IO.PathCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the specified paths to the collection.
            </summary>
            <param name="paths">The paths to add.</param>
        </member>
        <member name="M:Wyam.Common.IO.PathCollection`1.Clear">
            <summary>
            Clears all paths from the collection.
            </summary>
        </member>
        <member name="M:Wyam.Common.IO.PathCollection`1.Contains(`0)">
            <summary>
            Determines whether the collection contains the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns><c>true</c> if the collection contains the path, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Wyam.Common.IO.PathCollection`1.Remove(`0)">
            <summary>
            Removes the specified path.
            </summary>
            <param name="path">The path to remove.</param>
            <returns><c>true</c> if the collection contained the path, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Wyam.Common.IO.PathCollection`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the specified paths from the collection.
            </summary>
            <param name="paths">The paths to remove.</param>
        </member>
        <member name="M:Wyam.Common.IO.PathCollection`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns>The index of the specified path, or -1 if not found.</returns>
        </member>
        <member name="M:Wyam.Common.IO.PathCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the path at the specified index.
            </summary>
            <param name="index">The index where the path should be inserted.</param>
            <param name="path">The path to insert.</param>
            <returns><c>true</c> if the collection did not contain the path and it was inserted, otherwise <c>false</c></returns>
        </member>
        <member name="M:Wyam.Common.IO.PathCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the path at the specified index.
            </summary>
            <param name="index">The index where the path should be removed.</param>
        </member>
        <member name="T:Wyam.Common.IO.PathEqualityComparer">
            <summary>
            Compares <see cref="T:Wyam.Common.IO.NormalizedPath"/> instances.
            </summary>
        </member>
        <member name="M:Wyam.Common.IO.PathEqualityComparer.Equals(Wyam.Common.IO.NormalizedPath,Wyam.Common.IO.NormalizedPath)">
            <summary>
            Determines whether the specified <see cref="T:Wyam.Common.IO.NormalizedPath"/> instances are equal.
            </summary>
            <param name="x">The first <see cref="T:Wyam.Common.IO.NormalizedPath"/> to compare.</param>
            <param name="y">The second <see cref="T:Wyam.Common.IO.NormalizedPath"/> to compare.</param>
            <returns>
            True if the specified <see cref="T:Wyam.Common.IO.NormalizedPath"/> instances are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Wyam.Common.IO.PathEqualityComparer.GetHashCode(Wyam.Common.IO.NormalizedPath)">
            <summary>
            Returns a hash code for the specified <see cref="T:Wyam.Common.IO.NormalizedPath"/>.
            </summary>
            <param name="obj">The path.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Wyam.Common.IO.PathKind">
            <summary>
            The kind of the path.
            </summary>
        </member>
        <member name="F:Wyam.Common.IO.PathKind.Absolute">
            <summary>
            The path is absolute.
            </summary>
        </member>
        <member name="F:Wyam.Common.IO.PathKind.Relative">
            <summary>
            The path is relative.
            </summary>
        </member>
        <member name="F:Wyam.Common.IO.PathKind.RelativeOrAbsolute">
            <summary>
            The path can be either relative or absolute.
            </summary>
        </member>
        <member name="T:Wyam.Common.JavaScript.IJsEngine">
            <summary>
            A common interface to a JavaScript engine. Every JavaScript engine is
            obtained from a <see cref="T:Wyam.Common.JavaScript.IJsEnginePool"/> and will be returned to the
            pool when it is disposed. Therefore, you must dispose the engine when
            you are done with it.
            </summary>
        </member>
        <member name="P:Wyam.Common.JavaScript.IJsEngine.Name">
            <summary>
            Gets the name of JavaScript engine.
            </summary>
        </member>
        <member name="P:Wyam.Common.JavaScript.IJsEngine.Version">
            <summary>
            Gets the version of original JavaScript engine.
            </summary>
        </member>
        <member name="M:Wyam.Common.JavaScript.IJsEngine.Evaluate(System.String)">
            <summary>
            Evaluates an expression.
            </summary>
            <param name="expression">JavaScript expression.</param>
            <returns>Result of the expression.</returns>
        </member>
        <member name="M:Wyam.Common.JavaScript.IJsEngine.Evaluate``1(System.String)">
            <summary>
            Evaluates an expression.
            </summary>
            <typeparam name="T">Type of result.</typeparam>
            <param name="expression">JavaScript expression.</param>
            <returns>Result of the expression.</returns>
        </member>
        <member name="M:Wyam.Common.JavaScript.IJsEngine.Execute(System.String)">
            <summary>
            Executes JavaScript code.
            </summary>
            <param name="code">The JavaScript code to execute.</param>
        </member>
        <member name="M:Wyam.Common.JavaScript.IJsEngine.ExecuteFile(System.String,System.Text.Encoding)">
            <summary>
            Executes code from JavaScript file.
            </summary>
            <param name="path">Path to the JavaScript file.</param>
            <param name="encoding">Text encoding.</param>
        </member>
        <member name="M:Wyam.Common.JavaScript.IJsEngine.ExecuteResource(System.String,System.Type)">
            <summary>
            Executes code from embedded JavaScript resource.
            </summary>
            <param name="resourceName">The case-sensitive resource name without the namespace of the specified type.</param>
            <param name="type">The type, that determines the assembly and whose namespace is used to scope
            the resource name.</param>
        </member>
        <member name="M:Wyam.Common.JavaScript.IJsEngine.ExecuteResource(System.String,System.Reflection.Assembly)">
            <summary>
            Executes code from embedded JavaScript resource.
            </summary>
            <param name="resourceName">The case-sensitive resource name.</param>
            <param name="assembly">The assembly, which contains the embedded resource.</param>
        </member>
        <member name="M:Wyam.Common.JavaScript.IJsEngine.CallFunction(System.String,System.Object[])">
            <summary>
            Calls a JavaScript function.
            </summary>
            <param name="functionName">Function name.</param>
            <param name="args">Function arguments.</param>
            <returns>Result of the function execution.</returns>
        </member>
        <member name="M:Wyam.Common.JavaScript.IJsEngine.CallFunction``1(System.String,System.Object[])">
            <summary>
            Calls a JavaScript function.
            </summary>
            <typeparam name="T">Type of function result.</typeparam>
            <param name="functionName">Function name.</param>
            <param name="args">Function arguments.</param>
            <returns>Result of the function execution.</returns>
        </member>
        <member name="M:Wyam.Common.JavaScript.IJsEngine.HasVariable(System.String)">
            <summary>
            Сhecks for the existence of a variable.
            </summary>
            <param name="variableName">Variable name.</param>
            <returns><c>true</c> if the variable exists, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Wyam.Common.JavaScript.IJsEngine.GetVariableValue(System.String)">
            <summary>
            Gets the value of variable.
            </summary>
            <param name="variableName">Variable name.</param>
            <returns>Value of variable.</returns>
        </member>
        <member name="M:Wyam.Common.JavaScript.IJsEngine.GetVariableValue``1(System.String)">
            <summary>
            Gets the value of variable.
            </summary>
            <typeparam name="T">Type of variable.</typeparam>
            <param name="variableName">Variable name.</param>
            <returns>Value of variable.</returns>
        </member>
        <member name="M:Wyam.Common.JavaScript.IJsEngine.SetVariableValue(System.String,System.Object)">
            <summary>
            Sets the value of variable.
            </summary>
            <param name="variableName">Variable name.</param>
            <param name="value">Value of variable.</param>
        </member>
        <member name="M:Wyam.Common.JavaScript.IJsEngine.RemoveVariable(System.String)">
            <summary>
            Removes a variable.
            </summary>
            <param name="variableName">Variable name.</param>
        </member>
        <member name="M:Wyam.Common.JavaScript.IJsEngine.EmbedHostObject(System.String,System.Object)">
            <summary>
            Embeds a host object to script code.
            </summary>
            <param name="itemName">The name for the new global variable or function that will represent the object.</param>
            <param name="value">The object to expose.</param>
            <remarks>Allows to embed instances of simple classes (or structures) and delegates.</remarks>
        </member>
        <member name="M:Wyam.Common.JavaScript.IJsEngine.EmbedHostType(System.String,System.Type)">
            <summary>
            Embeds a host type to script code.
            </summary>
            <param name="itemName">The name for the new global variable that will represent the type.</param>
            <param name="type">The type to expose.</param>
            <remarks>
            Host types are exposed to script code in the form of objects whose properties and
            methods are bound to the type's static members.
            </remarks>
        </member>
        <member name="T:Wyam.Common.JavaScript.IJsEnginePool">
            <summary>
            Provides a shared pool of JavaScript engine instances. You should dispose the pool when
            no longer needed to properly dispose of any allocated engines.
            </summary>
        </member>
        <member name="M:Wyam.Common.JavaScript.IJsEnginePool.GetEngine(System.Nullable{System.TimeSpan})">
            <summary>
            Gets an engine from the pool. This engine should be disposed when you are finished with it.
            If an engine is free, this method returns immediately with the engine.
            If no engines are available but we have not reached the maximum number of engines
            yet, creates a new engine. If the maximum number of engines has been reached, blocks until an engine is
            available again.
            </summary>
            <param name="timeout">
            Maximum time to wait for a free engine. If not specified, defaults to the timeout
            specified when creating the pool.
            </param>
            <returns>A JavaScript engine.</returns>
        </member>
        <member name="M:Wyam.Common.JavaScript.IJsEnginePool.RecycleEngine(Wyam.Common.JavaScript.IJsEngine)">
            <summary>
            Disposes the specified engine and removes it from the pool. A new engine will be created in it's place.
            </summary>
            <param name="engine">The JavaScript engine.</param>
        </member>
        <member name="M:Wyam.Common.JavaScript.IJsEnginePool.RecycleAllEngines">
            <summary>
            Disposes all engines in this pool, and creates new engines in their place.
            </summary>
        </member>
        <member name="T:Wyam.Common.Meta.CachedDelegateMetadataValue">
            <summary>
            This class uses a delegate to get a metadata value. The result of the delegate
            will be cached and the cached value will be returned for subsequent calls to <see cref="M:Wyam.Common.Meta.CachedDelegateMetadataValue.Get(Wyam.Common.Meta.IMetadata)"/>.
            </summary>
        </member>
        <member name="M:Wyam.Common.Meta.CachedDelegateMetadataValue.#ctor(System.Func{Wyam.Common.Meta.IMetadata,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Wyam.Common.Meta.CachedDelegateMetadataValue"/> class.
            The specified delegate should be thread-safe.
            </summary>
            <param name="value">The delegate that returns the metadata value.</param>
        </member>
        <member name="M:Wyam.Common.Meta.CachedDelegateMetadataValue.Get(Wyam.Common.Meta.IMetadata)">
            <summary>
            Lazily loads a metadata value. This method will be called
            for each request and the return object will
            be processed like any other metadata value. The implementation
            of this method must be thread-safe.
            </summary>
            <param name="metadata">The metadata object requesting the value.</param>
            <returns>The object to use as the value.</returns>
        </member>
        <member name="T:Wyam.Common.Meta.DelegateMetadataValue">
            <summary>
            This class uses a delegate to get a metadata value.
            </summary>
        </member>
        <member name="M:Wyam.Common.Meta.DelegateMetadataValue.#ctor(System.Func{Wyam.Common.Meta.IMetadata,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Wyam.Common.Meta.DelegateMetadataValue"/> class.
            The specified delegate should be thread-safe.
            </summary>
            <param name="value">The delegate that returns the metadata value.</param>
        </member>
        <member name="M:Wyam.Common.Meta.DelegateMetadataValue.Get(Wyam.Common.Meta.IMetadata)">
            <summary>
            Lazily loads a metadata value. This method will be called
            for each request and the return object will
            be processed like any other metadata value. The implementation
            of this method must be thread-safe.
            </summary>
            <param name="metadata">The metadata object requesting the value.</param>
            <returns>The object to use as the value.</returns>
        </member>
        <member name="T:Wyam.Common.Meta.IMetadata">
            <summary>
            Contains a set of metadata with flexible runtime conversion methods. Metadata keys are case-insensitive.
            </summary>
        </member>
        <member name="M:Wyam.Common.Meta.IMetadata.MetadataAs``1">
            <summary>
            Presents metadata values as a specific type (see <see cref="T:Wyam.Common.Meta.IMetadata"/>).
            </summary>
            <typeparam name="T">The type metadata values should be converted to.</typeparam>
            <returns>A strongly-typed <see cref="T:Wyam.Common.Meta.IMetadata"/> object that returns values converted to type T.</returns>
        </member>
        <member name="M:Wyam.Common.Meta.IMetadata.Get(System.String,System.Object)">
            <summary>
            Gets the value for the specified key. This method never throws an exception. It will return the specified
            default value or null if the key is not found.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">The default value to use if the key is not found.</param>
            <returns>The value for the specified key or the specified default value.</returns>
        </member>
        <member name="M:Wyam.Common.Meta.IMetadata.GetRaw(System.String)">
            <summary>
            Gets the raw value for the specified key. This method will not materialize <see cref="T:Wyam.Common.Meta.IMetadataValue"/>
            values the way <see cref="M:Wyam.Common.Meta.IMetadata.Get(System.String,System.Object)"/> will. A <see cref="T:System.Collections.Generic.KeyNotFoundException"/> will be thrown
            for missing keys.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The raw value for the specified ke.y</returns>
        </member>
        <member name="M:Wyam.Common.Meta.IMetadata.Get``1(System.String)">
            <summary>
            Gets the value for the specified key converted to the specified type.
            This method never throws an exception. It will return default(T) if the key is not found
            or the value cannot be converted to T.
            </summary>
            <typeparam name="T">The desired return type.</typeparam>
            <param name="key">The key of the value to get.</param>
            <returns>The value for the specified key converted to type T or default(T) if the key is not found or cannot be converted to type T.</returns>
        </member>
        <member name="M:Wyam.Common.Meta.IMetadata.Get``1(System.String,``0)">
            <summary>
            Gets the value for the specified key. This method never throws an exception. It will return the specified
            default value if the key is not found.
            </summary>
            <typeparam name="T">The desired return type.</typeparam>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">The default value to use if the key is not found or cannot be converted to type T.</param>
            <returns>The value for the specified key converted to type T or the specified default value.</returns>
        </member>
        <member name="M:Wyam.Common.Meta.IMetadata.GetMetadata(System.String[])">
            <summary>
            Gets a new <see cref="T:Wyam.Common.Meta.IMetadata"/> containing only the specified keys and their values. If a key is not present in the current
            metadata, it will be ignored and will not be copied to the new metadata object.
            </summary>
            <param name="keys">The keys to include in the new metadata object.</param>
            <returns>A new <see cref="T:Wyam.Common.Meta.IMetadata"/> containing the specified keys and their values.</returns>
        </member>
        <member name="T:Wyam.Common.Meta.IMetadata`1">
            <summary>
            Contains a set of metadata converted to type <typeparamref name="T"/>.
            The conversion is designed to be flexible and several different methods of type
            conversion are tried. Only those values that can be converted to type <typeparamref name="T"/>
            are actually included in the dictionary.
            </summary>
            <typeparam name="T">The type all metadata values should be converted to.</typeparam>
        </member>
        <member name="M:Wyam.Common.Meta.IMetadata`1.Get(System.String)">
            <summary>Gets the value associated with the specified key converted to <typeparamref name="T"/>.</summary>
            <param name="key">The key of the value to get.</param>
            <returns>The converted value for the specified key or <c>default(T)</c> if not found.</returns>
        </member>
        <member name="M:Wyam.Common.Meta.IMetadata`1.Get(System.String,`0)">
            <summary>Gets the value associated with the specified key converted to <typeparamref name="T"/>.</summary>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">The default value to use if either the key is not found or the underlying type is not convertible.</param>
            <returns>The converted value for the specified key or <paramref name="defaultValue"/> if not found.</returns>
        </member>
        <member name="T:Wyam.Common.Meta.IMetadataDictionary">
            <summary>
            A mutable <see cref="T:Wyam.Common.Meta.IMetadata"/> implementation that works like a dictionary.
            </summary>
        </member>
        <member name="P:Wyam.Common.Meta.IMetadataDictionary.Count">
            <summary>
            The count of metadata.
            </summary>
        </member>
        <member name="M:Wyam.Common.Meta.IMetadataDictionary.ContainsKey(System.String)">
            <summary>
            Whether or not the metadata contains the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if the key is contained in metadata, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Wyam.Common.Meta.IMetadataDictionary.Keys">
            <summary>
            A collection of keys in the metadata.
            </summary>
        </member>
        <member name="P:Wyam.Common.Meta.IMetadataDictionary.Values">
            <summary>
            A collection of values in the metadata.
            </summary>
        </member>
        <member name="M:Wyam.Common.Meta.IMetadataDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            Attempts to get a value from metadata.
            </summary>
            <param name="key">The metadata key.</param>
            <param name="value">The metadata value.</param>
            <returns><c>true</c> if the key is contained in metadata, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Wyam.Common.Meta.IMetadataDictionary.Item(System.String)">
            <summary>
            Gets a metadata value given the specified metadata key.
            </summary>
            <param name="key">The metadata key.</param>
            <returns>The value at the specified key.</returns>
        </member>
        <member name="T:Wyam.Common.Meta.IMetadataValue">
            <summary>
            Implement this interface to provide lazy metadata values or values based on other metadata.
            </summary>
        </member>
        <member name="M:Wyam.Common.Meta.IMetadataValue.Get(Wyam.Common.Meta.IMetadata)">
            <summary>
            Lazily loads a metadata value. This method will be called
            for each request and the return object will
            be processed like any other metadata value. The implementation
            of this method must be thread-safe.
            </summary>
            <param name="metadata">The metadata object requesting the value.</param>
            <returns>The object to use as the value.</returns>
        </member>
        <member name="T:Wyam.Common.Meta.Keys">
            <summary>
            Common metadata keys for modules in the core library.
            </summary>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.Host">
            <summary>
            The host to use when generating links.
            </summary>
            <type><see cref="T:System.String"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.LinksUseHttps">
            <summary>
            Indicates if generated links should use HTTPS instead of HTTP as the scheme.
            </summary>
            <type><see cref="T:System.Boolean"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.LinkRoot">
            <summary>
            The default root path to use when generating links
            (for example, <code>"/virtual/directory"</code>).
            Note that you may also want to use the <code>--virtual-dir</code>
            argument on the command line when using this setting so that
            the preview server serves the site at the same path as the generated links
            (for example, <code>--virtual-dir "/virtual/directory"</code>).
            </summary>
            <type><see cref="T:System.String"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.LinkHideIndexPages">
            <summary>
            Indicates whether to hide index pages by default when generating links.
            </summary>
            <type><see cref="T:System.Boolean"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.LinkHideExtensions">
            <summary>
            Indicates whether to hide ".html" and ".htm" extensions by default when generating links.
            </summary>
            <type><see cref="T:System.Boolean"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.LinkLowercase">
            <summary>
            Indicates that links should always be rendered in lowercase.
            </summary>
            <type><see cref="T:System.Boolean"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.UseCache">
            <summary>
            Indicates whether caching should be used.
            </summary>
            <type><see cref="T:System.Boolean"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.CleanOutputPath">
            <summary>
            Indicates whether to clean the output path on each execution.
            </summary>
            <type><see cref="T:System.Boolean"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.DateTimeInputCulture">
            <summary>
            Indicates the culture to use for reading and interpreting dates as input.
            </summary>
            <type><see cref="T:System.String"/> or <see cref="T:System.Globalization.CultureInfo"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.DateTimeDisplayCulture">
            <summary>
            Indicates the culture to use for displaying dates in output.
            </summary>
            <type><see cref="T:System.String"/> or <see cref="T:System.Globalization.CultureInfo"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.SourceFileRoot">
            <summary>
            The absolute root search path without any nested directories
            (I.e., the path that was searched, and possibly descended, for the given pattern).
            </summary>
            <type><see cref="T:Wyam.Common.IO.DirectoryPath"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.SourceFileBase">
            <summary>
            The name of the original file without extension.
            </summary>
            <type><see cref="T:Wyam.Common.IO.FilePath"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.SourceFileExt">
            <summary>
            The extension of the original file (including the ".").
            </summary>
            <type><see cref="T:System.String"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.SourceFileName">
            <summary>
            The file name of the original file with extension.
            </summary>
            <type><see cref="T:Wyam.Common.IO.FilePath"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.SourceFileDir">
            <summary>
            The absolute path to the folder of the original file.
            </summary>
            <type><see cref="T:Wyam.Common.IO.DirectoryPath"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.SourceFilePath">
            <summary>
            The absolute path to the original file.
            </summary>
            <type><see cref="T:Wyam.Common.IO.FilePath"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.SourceFilePathBase">
            <summary>
            The absolute path to the original file without the file extension.
            </summary>
            <type><see cref="T:Wyam.Common.IO.FilePath"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.RelativeFilePath">
            <summary>
            The path to the file relative to the input folder. This metadata
            value is used when generating links to the document.
            </summary>
            <type><see cref="T:Wyam.Common.IO.FilePath"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.RelativeFilePathBase">
            <summary>
            The path to the file relative to the input folder without extension.
            </summary>
            <type><see cref="T:Wyam.Common.IO.FilePath"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.RelativeFileDir">
            <summary>
            The path to the folder containing the file relative to the input folder.
            </summary>
            <type><see cref="T:Wyam.Common.IO.DirectoryPath"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.DestinationFileBase">
            <summary>
            The file name without any extension. Equivalent
            to <c>Path.GetFileNameWithoutExtension(DestinationFilePath)</c>.
            </summary>
            <type><see cref="T:Wyam.Common.IO.FilePath"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.DestinationFileExt">
            <summary>
            The extension of the file. Equivalent
            to <c>Path.GetExtension(DestinationFilePath)</c>.
            </summary>
            <type><see cref="T:System.String"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.DestinationFileName">
            <summary>
            The full file name. Equivalent
            to <c>Path.GetFileName(DestinationFilePath)</c>.
            </summary>
            <type><see cref="T:Wyam.Common.IO.FilePath"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.DestinationFileDir">
            <summary>
            The full absolute directory of the file.
            Equivalent to <c>Path.GetDirectoryName(DestinationFilePath)</c>.
            </summary>
            <type><see cref="T:Wyam.Common.IO.DirectoryPath"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.DestinationFilePath">
            <summary>
            The full absolute path (including file name)
            of the destination file.
            </summary>
            <type><see cref="T:Wyam.Common.IO.FilePath"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.DestinationFilePathBase">
            <summary>
            The full absolute path (including file name)
            of the destination file without the file extension.
            </summary>
            <type><see cref="T:Wyam.Common.IO.FilePath"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.WriteExtension">
            <summary>
            The extension to use when writing the file.
            </summary>
            <type><see cref="T:System.String"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.WriteFileName">
            <summary>
            The file name to use when writing the file.
            </summary>
            <type><see cref="T:Wyam.Common.IO.FilePath"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.WritePath">
            <summary>
            The path to use when writing the file.
            </summary>
            <type><see cref="T:Wyam.Common.IO.FilePath"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.PageDocuments">
            <summary>
            Contains all the documents for the current page.
            </summary>
            <type><c>IEnumerable&lt;IDocument&gt;</c></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.CurrentPage">
            <summary>
            The index of the current page (1 based).
            </summary>
            <type><see cref="T:System.Int32"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.TotalPages">
            <summary>
            The total number of pages.
            </summary>
            <type><see cref="T:System.Int32"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.TotalItems">
            <summary>
            The total number of items across all pages.
            </summary>
            <type><see cref="T:System.Int32"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.HasNextPage">
            <summary>
            Whether there is another page after this one.
            </summary>
            <type><see cref="T:System.Boolean"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.HasPreviousPage">
            <summary>
            Whether there is another page before this one.
            </summary>
            <type><see cref="T:System.Boolean"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.NextPage">
            <summary>
            The next page.
            </summary>
            <type><see cref="T:Wyam.Common.Documents.IDocument"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.PreviousPage">
            <summary>
            The previous page.
            </summary>
            <type><see cref="T:Wyam.Common.Documents.IDocument"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.GroupDocuments">
            <summary>
            Contains all the documents for the current group.
            </summary>
            <type><c>IEnumerable&lt;IDocument&gt;</c></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.GroupKey">
            <summary>
            The key for the current group.
            </summary>
            <type><see cref="T:System.Object"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.Index">
            <summary>
            The one-based index of the current document relative to other documents in the pipeline.
            </summary>
            <type><see cref="T:System.Int32"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.SitemapItem">
            <summary>
            Contains a document-specific sitemap item for use when generating a sitemap.
            </summary>
            <type><see cref="T:Wyam.Common.Modules.Contents.SitemapItem"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.SourceUri">
            <summary>
            The URI where the document was downloaded from.
            </summary>
            <type><see cref="T:System.String"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.SourceHeaders">
            <summary>
            The web headers of the document.
            </summary>
            <type><c>Dictionary&lt;string, string&gt;</c></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.Parent">
            <summary>
            The parent of this node or <c>null</c> if it is a root.
            </summary>
            <type><see cref="T:Wyam.Common.Documents.IDocument"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.Children">
            <summary>
            All the children of this node.
            </summary>
            <type><see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.PreviousSibling">
            <summary>
            The previous sibling, that is the previous node in the children
            collection of the parent or <c>null</c> if this is the first node in the collection or the parent is null.
            </summary>
            <type><see cref="T:Wyam.Common.Documents.IDocument"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.NextSibling">
            <summary>
            The next sibling, that is the next node in the children collection
            of the parent or <c>null</c> if this is the last node in the collection or the parent is null.
            </summary>
            <type><see cref="T:Wyam.Common.Documents.IDocument"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.Next">
            <summary>
            The next node in the tree using a depth-first
            search or <c>null</c> if this was the last node.
            </summary>
            <type><see cref="T:Wyam.Common.Documents.IDocument"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.Previous">
            <summary>
            The previous node in the tree using a depth-first
            search or <c>null</c> if this was the first node.
            </summary>
            <type><see cref="T:Wyam.Common.Documents.IDocument"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.TreePath">
            <summary>
            The path that represents this node in the tree.
            </summary>
            <type><see cref="T:System.Array"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.Title">
            <summary>
            The calculated title of the document.
            </summary>
            <type><see cref="T:System.String"/></type>
        </member>
        <member name="F:Wyam.Common.Meta.Keys.RedirectFrom">
            <summary>
            The path(s) where the document should be redirected from.
            </summary>
            <type><see cref="T:Wyam.Common.IO.FilePath"/></type>
        </member>
        <member name="T:Wyam.Common.Meta.MetadataConversionExtensions">
            <summary>
            Extensions to make it easier to get typed information from metadata.
            </summary>
        </member>
        <member name="M:Wyam.Common.Meta.MetadataConversionExtensions.String(Wyam.Common.Meta.IMetadata,System.String,System.String)">
            <summary>
            Gets the value for the specified key converted to a string. This method never throws an exception. It will return the specified
            default value if the key is not found.
            </summary>
            <param name="metadata">The metadata containing the value.</param>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">The default value to use if the key is not found or cannot be converted to a string.</param>
            <returns>The value for the specified key converted to a string or the specified default value.</returns>
        </member>
        <member name="M:Wyam.Common.Meta.MetadataConversionExtensions.Bool(Wyam.Common.Meta.IMetadata,System.String,System.Boolean)">
            <summary>
            Gets the value for the specified key converted to a bool. This method never throws an exception. It will return the specified
            default value if the key is not found.
            </summary>
            <param name="metadata">The metadata containing the value.</param>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">The default value to use if the key is not found or cannot be converted to a bool.</param>
            <returns>The value for the specified key converted to a bool or the specified default value.</returns>
        </member>
        <member name="M:Wyam.Common.Meta.MetadataConversionExtensions.DateTime(Wyam.Common.Meta.IMetadata,System.String,System.DateTime)">
            <summary>
            Gets the value for the specified key converted to a <see cref="M:Wyam.Common.Meta.MetadataConversionExtensions.DateTime(Wyam.Common.Meta.IMetadata,System.String,System.DateTime)"/>. This method never throws an exception. It will return the specified
            default value if the key is not found.
            </summary>
            <param name="metadata">The metadata containing the value.</param>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">The default value to use if the key is not found or cannot be converted to a <see cref="M:Wyam.Common.Meta.MetadataConversionExtensions.DateTime(Wyam.Common.Meta.IMetadata,System.String,System.DateTime)"/>.</param>
            <returns>The value for the specified key converted to a <see cref="M:Wyam.Common.Meta.MetadataConversionExtensions.DateTime(Wyam.Common.Meta.IMetadata,System.String,System.DateTime)"/> or the specified default value.</returns>
        </member>
        <member name="M:Wyam.Common.Meta.MetadataConversionExtensions.FilePath(Wyam.Common.Meta.IMetadata,System.String,Wyam.Common.IO.FilePath)">
            <summary>
            Gets the value for the specified key converted to a <see cref="M:Wyam.Common.Meta.MetadataConversionExtensions.FilePath(Wyam.Common.Meta.IMetadata,System.String,Wyam.Common.IO.FilePath)"/>. This method never throws an exception. It will
            return the specified default value if the key is not found or if the string value can't be converted to a <see cref="M:Wyam.Common.Meta.MetadataConversionExtensions.FilePath(Wyam.Common.Meta.IMetadata,System.String,Wyam.Common.IO.FilePath)"/>.
            </summary>
            <param name="metadata">The metadata containing the value.</param>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">The default value to use if the key is not found or cannot be converted to a <see cref="M:Wyam.Common.Meta.MetadataConversionExtensions.FilePath(Wyam.Common.Meta.IMetadata,System.String,Wyam.Common.IO.FilePath)"/>.</param>
            <returns>The value for the specified key converted to a <see cref="M:Wyam.Common.Meta.MetadataConversionExtensions.FilePath(Wyam.Common.Meta.IMetadata,System.String,Wyam.Common.IO.FilePath)"/> or the specified default value.</returns>
        </member>
        <member name="M:Wyam.Common.Meta.MetadataConversionExtensions.DirectoryPath(Wyam.Common.Meta.IMetadata,System.String,Wyam.Common.IO.DirectoryPath)">
            <summary>
            Gets the value for the specified key converted to a <see cref="M:Wyam.Common.Meta.MetadataConversionExtensions.DirectoryPath(Wyam.Common.Meta.IMetadata,System.String,Wyam.Common.IO.DirectoryPath)"/>. This method never throws an exception. It will
            return the specified default value if the key is not found or if the string value can't be converted to a <see cref="M:Wyam.Common.Meta.MetadataConversionExtensions.DirectoryPath(Wyam.Common.Meta.IMetadata,System.String,Wyam.Common.IO.DirectoryPath)"/>.
            </summary>
            <param name="metadata">The metadata containing the value.</param>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">The default value to use if the key is not found or cannot be converted to a <see cref="M:Wyam.Common.Meta.MetadataConversionExtensions.DirectoryPath(Wyam.Common.Meta.IMetadata,System.String,Wyam.Common.IO.DirectoryPath)"/>.</param>
            <returns>The value for the specified key converted to a <see cref="M:Wyam.Common.Meta.MetadataConversionExtensions.DirectoryPath(Wyam.Common.Meta.IMetadata,System.String,Wyam.Common.IO.DirectoryPath)"/> or the specified default value.</returns>
        </member>
        <member name="M:Wyam.Common.Meta.MetadataConversionExtensions.List``1(Wyam.Common.Meta.IMetadata,System.String,System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Gets the value for the specified key converted to a <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>. This method never throws an exception. It will return the specified
            default value if the key is not found. Note that if the value is atomic, the conversion operation will succeed and return a list with one item.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="metadata">The metadata containing the value.</param>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">The default value to use if the key is not found or cannot be converted to a list.</param>
            <returns>The value for the specified key converted to a list or the specified default value.</returns>
        </member>
        <member name="M:Wyam.Common.Meta.MetadataConversionExtensions.Document(Wyam.Common.Meta.IMetadata,System.String,Wyam.Common.Documents.IDocument)">
            <summary>
            Gets the value for the specified key converted to a <see cref="T:Wyam.Common.Documents.IDocument"/>. This method never throws an exception.
            It will return null if the key is not found.
            </summary>
            <param name="metadata">The metadata containing the value.</param>
            <param name="key">The key of the document to get.</param>
            <param name="defaultValue">The default value to use if the key is not found or cannot be converted to a document.</param>
            <returns>The value for the specified key converted to a string or null.</returns>
        </member>
        <member name="M:Wyam.Common.Meta.MetadataConversionExtensions.DocumentList(Wyam.Common.Meta.IMetadata,System.String,System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument})">
            <summary>
            Gets the value for the specified key converted to a <c>IReadOnlyList&lt;IDocument&gt;</c>. This method never throws an exception.
            It will return null if the key is not found and an empty list if the key is found but contains no items that can be converted to <see cref="T:Wyam.Common.Documents.IDocument"/>.
            </summary>
            <param name="metadata">The metadata containing the value.</param>
            <param name="key">The key of the documents to get.</param>
            <param name="defaultValue">The default value to use if the key is not found or cannot be converted to a document list.</param>
            <returns>The value for the specified key converted to a list or null.</returns>
        </member>
        <member name="M:Wyam.Common.Meta.MetadataConversionExtensions.Dynamic(Wyam.Common.Meta.IMetadata,System.String,System.Object)">
            <summary>
            Gets the value associated with the specified key as a dynamic object. This is equivalent
            to calling <c>as dynamic</c> to cast the value.
            </summary>
            <param name="metadata">The metadata containing the value.</param>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">The default value to use if either the key is not found or the
            underlying value is null (since the dynamic runtime binder can't bind null values).</param>
            <returns>A dynamic value for the specific key or default value.</returns>
        </member>
        <member name="T:Wyam.Common.Meta.MetadataItem">
            <summary>
            Provides slightly nicer syntax than <c>KeyValuePair&lt;string, object&gt;</c> for working
            with metadata. Also contains a constructor that makes adding delegate-based metadata easier.
            </summary>
        </member>
        <member name="P:Wyam.Common.Meta.MetadataItem.Pair">
            <summary>
            Gets the underlying <c>KeyValuePair&lt;TKey, TValue&gt;</c>.
            </summary>
        </member>
        <member name="P:Wyam.Common.Meta.MetadataItem.Key">
            <summary>
            Gets the key of the item.
            </summary>
        </member>
        <member name="P:Wyam.Common.Meta.MetadataItem.Value">
            <summary>
            Gets the value of the item.
            </summary>
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItem.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Creates a new metadata item with a specified key-value pair.
            </summary>
            <param name="pair">The key-value pair.</param>
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItem.#ctor(System.String,System.Object)">
            <summary>
            Creates a new metadata item with the specified key and value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItem.#ctor(System.String,System.Func{Wyam.Common.Meta.IMetadata,System.Object},System.Boolean)">
            <summary>
            This creates a new metadata value based on the specified delegate that will get
            evaluated on every value request. Note that the delegate function should be thread-safe.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value delegate.</param>
            <param name="cacheValue">if set to <c>true</c>, cache the value after the first request.</param>
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItem.op_Implicit(System.Collections.Generic.KeyValuePair{System.String,System.Object})~Wyam.Common.Meta.MetadataItem">
            <summary>
            Converts a key-value pair to a <see cref="T:Wyam.Common.Meta.MetadataItem"/>.
            </summary>
            <param name="pair">The key-value pair to convert.</param>
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItem.op_Implicit(Wyam.Common.Meta.MetadataItem)~System.Collections.Generic.KeyValuePair{System.String,System.Object}">
            <summary>
            Converts a <see cref="T:Wyam.Common.Meta.MetadataItem"/> to a key-value pair.
            </summary>
            <param name="item">The metadata item to convert.</param>
        </member>
        <member name="T:Wyam.Common.Meta.MetadataItems">
            <summary>
            A collection of metadata items.
            </summary>
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItems.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItems.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItems.Add(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItems.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItems.Add(System.String,System.Func{Wyam.Common.Meta.IMetadata,System.Object},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItems.Add(Wyam.Common.Meta.MetadataItem)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItems.AddRange(System.Collections.Generic.IEnumerable{Wyam.Common.Meta.MetadataItem})">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItems.Clear">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItems.Contains(Wyam.Common.Meta.MetadataItem)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItems.CopyTo(Wyam.Common.Meta.MetadataItem[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItems.Remove(Wyam.Common.Meta.MetadataItem)">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Common.Meta.MetadataItems.Count">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Common.Meta.MetadataItems.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItems.IndexOf(Wyam.Common.Meta.MetadataItem)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItems.Insert(System.Int32,Wyam.Common.Meta.MetadataItem)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItems.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Common.Meta.MetadataItems.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItems.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItems.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItems.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItems.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItems.IndexOf(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Meta.MetadataItems.Insert(System.Int32,System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Common.Meta.MetadataItems.System#Collections#Generic#IList{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Common.Modules.ContainerModule">
            <summary>
            A base class for modules that contain a collection of child modules.
            </summary>
        </member>
        <member name="M:Wyam.Common.Modules.ContainerModule.#ctor(System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule})">
            <summary>
            Creates a new container module with the specified child modules.
            Any <c>null</c> items in the sequence of modules will be discarded.
            </summary>
            <param name="modules">The child modules.</param>
        </member>
        <member name="M:Wyam.Common.Modules.ContainerModule.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ContainerModule.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ContainerModule.Add(Wyam.Common.Modules.IModule)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ContainerModule.Clear">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ContainerModule.Contains(Wyam.Common.Modules.IModule)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ContainerModule.CopyTo(Wyam.Common.Modules.IModule[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ContainerModule.Remove(Wyam.Common.Modules.IModule)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ContainerModule.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Common.Modules.ContainerModule.Count">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ContainerModule.Add(Wyam.Common.Modules.IModule[])">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ContainerModule.Insert(System.Int32,Wyam.Common.Modules.IModule[])">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ContainerModule.IndexOf(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Common.Modules.ContainerModule.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ContainerModule.IndexOf(Wyam.Common.Modules.IModule)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ContainerModule.Insert(System.Int32,Wyam.Common.Modules.IModule)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ContainerModule.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Common.Modules.ContainerModule.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ContainerModule.Contains(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ContainerModule.TryGetValue(System.String,Wyam.Common.Modules.IModule@)">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Common.Modules.ContainerModule.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ContainerModule.Add(System.String,Wyam.Common.Modules.IModule)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ContainerModule.Insert(System.Int32,System.String,Wyam.Common.Modules.IModule)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ContainerModule.AsKeyValuePairs">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Common.Modules.ContentModule">
            <summary>
            This class can be used as a base class for modules that operate on arbitrary content (as represented by an object).
            </summary>
        </member>
        <member name="M:Wyam.Common.Modules.ContentModule.#ctor(System.Object)">
            <summary>
            Creates a new content module with the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Wyam.Common.Modules.ContentModule.#ctor(Wyam.Common.Configuration.ContextConfig)">
            <summary>
            Creates a new content module with the specified content delegate.
            </summary>
            <param name="content">The content delegate.</param>
        </member>
        <member name="M:Wyam.Common.Modules.ContentModule.#ctor(Wyam.Common.Configuration.DocumentConfig)">
            <summary>
            Creates a new content module with the specified content delegate.
            </summary>
            <param name="content">The content delegate.</param>
        </member>
        <member name="M:Wyam.Common.Modules.ContentModule.#ctor(Wyam.Common.Modules.IModule[])">
            <summary>
            Creates a new content module with the content determined by child modules.
            </summary>
            <remarks>
            If only one input document is available, it will be used as the initial document for the specified modules.
            If more than one document is available, an empty initial document will be used.
            To force usage of each input document in a set (I.e., A, B, and C input documents specify a unique "template" metadata value and you want to append
            some result of operating on that template value to each), make the content module a child of the ForEach module.
            Each input will be applied against each result from the specified modules (I.e., if 2 inputs and the module chain results in 2 outputs, there will be 4 total outputs).
            </remarks>
            <param name="modules">The child modules.</param>
        </member>
        <member name="M:Wyam.Common.Modules.ContentModule.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ContentModule.Execute(System.Object,Wyam.Common.Documents.IDocument,Wyam.Common.Execution.IExecutionContext)">
            <summary>
            Executes the module with the specified content against a single document.
            Note that content can be passed in as null, implementers should guard against that.
            </summary>
            <param name="content">The content.</param>
            <param name="input">The input document.</param>
            <param name="context">The execution context.</param>
            <returns>Result documents.</returns>
        </member>
        <member name="T:Wyam.Common.Modules.Contents.ChangeFrequency">
            <summary>
            The change frequency for each item in the site map.
            </summary>
        </member>
        <member name="F:Wyam.Common.Modules.Contents.ChangeFrequency.Always">
            <summary>
            The item always changes.
            </summary>
        </member>
        <member name="F:Wyam.Common.Modules.Contents.ChangeFrequency.Hourly">
            <summary>
            The item changes hourly.
            </summary>
        </member>
        <member name="F:Wyam.Common.Modules.Contents.ChangeFrequency.Daily">
            <summary>
            The item changes daily.
            </summary>
        </member>
        <member name="F:Wyam.Common.Modules.Contents.ChangeFrequency.Weekly">
            <summary>
            The item changes weekly.
            </summary>
        </member>
        <member name="F:Wyam.Common.Modules.Contents.ChangeFrequency.Monthly">
            <summary>
            The item changes monthly.
            </summary>
        </member>
        <member name="F:Wyam.Common.Modules.Contents.ChangeFrequency.Yearly">
            <summary>
            The item changes yearly.
            </summary>
        </member>
        <member name="F:Wyam.Common.Modules.Contents.ChangeFrequency.Never">
            <summary>
            The item never changes.
            </summary>
        </member>
        <member name="T:Wyam.Common.Modules.Contents.SitemapItem">
            <summary>
            Represents an item in the site map.
            </summary>
        </member>
        <member name="P:Wyam.Common.Modules.Contents.SitemapItem.Location">
            <summary>
            Gets or sets the location of the sitemap item.
            </summary>
        </member>
        <member name="P:Wyam.Common.Modules.Contents.SitemapItem.LastModUtc">
            <summary>
            Gets or sets the last modified time of the item in UTC.
            </summary>
        </member>
        <member name="P:Wyam.Common.Modules.Contents.SitemapItem.ChangeFrequency">
            <summary>
            Gets or sets the expected frequency of changes of the item.
            </summary>
        </member>
        <member name="P:Wyam.Common.Modules.Contents.SitemapItem.Priority">
            <summary>
            Gets or sets the priority of the item.
            </summary>
        </member>
        <member name="M:Wyam.Common.Modules.Contents.SitemapItem.#ctor(System.String)">
            <summary>
            Creates a new sitemap item at the specified location.
            </summary>
            <param name="location">The location of the sitemap item.</param>
        </member>
        <member name="T:Wyam.Common.Modules.IAsNewDocuments">
            <summary>
            Implement this interface for any module you want to support the <c>AsNewDocuments()</c>
            extension method, which overrides document creation within the module to always produce
            new documents instead of cloning existing ones.
            </summary>
        </member>
        <member name="T:Wyam.Common.Modules.IModule">
            <summary>
            The primary module interface for classes that can transform or otherwise operate on documents.
            </summary>
        </member>
        <member name="M:Wyam.Common.Modules.IModule.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <summary>
            This should not be called directly, instead call <c>IExecutionContext.Execute()</c> if you need to execute a module from within another module.
            </summary>
            <param name="inputs">The input documents to this module.</param>
            <param name="context">The execution context that can be used to access information about the environment and engine services.</param>
            <returns>A set of result documents (possibly the same as the input documents).</returns>
        </member>
        <member name="T:Wyam.Common.Modules.IModuleList">
            <summary>
            A collection of optionally named modules. Implementations should "unwrap" <see cref="T:Wyam.Common.Modules.NamedModule"/>
            objects to obtain the module name.
            </summary>
        </member>
        <member name="M:Wyam.Common.Modules.IModuleList.Add(System.String,Wyam.Common.Modules.IModule)">
            <summary>
            Adds a module to the list with a specified name.
            </summary>
            <param name="name">The name of the module to add.</param>
            <param name="module">The module to add.</param>
        </member>
        <member name="M:Wyam.Common.Modules.IModuleList.Add(Wyam.Common.Modules.IModule[])">
            <summary>
            Adds modules to the list.
            Any <c>null</c> items in the sequence of modules will be discarded.
            </summary>
            <param name="modules">The modules to add.</param>
        </member>
        <member name="M:Wyam.Common.Modules.IModuleList.Insert(System.Int32,System.String,Wyam.Common.Modules.IModule)">
            <summary>
            Inserts a module into the list with a specified name.
            </summary>
            <param name="index">The index at which to insert the module.</param>
            <param name="name">The name of the inserted module.</param>
            <param name="module">The module to insert/</param>
        </member>
        <member name="M:Wyam.Common.Modules.IModuleList.Insert(System.Int32,Wyam.Common.Modules.IModule[])">
            <summary>
            Inserts modules into the list.
            Any <c>null</c> items in the sequence of modules will be discarded.
            </summary>
            <param name="index">The index at which to insert the modules.</param>
            <param name="modules">The modules to insert.</param>
        </member>
        <member name="M:Wyam.Common.Modules.IModuleList.Remove(System.String)">
            <summary>
            Removes a module by name.
            </summary>
            <param name="name">The name of the module to remove.</param>
            <returns><c>true</c> if a module with the specified name was found and removed, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.IModuleList.IndexOf(System.String)">
            <summary>
            Gets the index of the module with the specified name.
            </summary>
            <param name="name">The name of the module.</param>
            <returns>The index of the module with the specified name.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.IModuleList.Contains(System.String)">
            <summary>
            Determines if the list contains a module with the specified name.
            </summary>
            <param name="name">The name of the module.</param>
            <returns><c>true</c> if a module exists with the specified name, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.IModuleList.TryGetValue(System.String,Wyam.Common.Modules.IModule@)">
            <summary>
            Attempts to get a module with the specified name.
            </summary>
            <param name="name">The name of the module.</param>
            <param name="value">The module with the specified name.</param>
            <returns><c>true</c> if a module was found with the specified name, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Wyam.Common.Modules.IModuleList.Item(System.String)">
            <summary>
            Gets the module with the specified name.
            </summary>
            <param name="name">The name of the module.</param>
            <returns>The module with the specified name.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.IModuleList.AsKeyValuePairs">
            <summary>
            Returns the list as a sequence of key-value pairs with the keys being
            the module names and the values being the module instances.
            </summary>
            <returns>The list as a sequence of key-value pairs.</returns>
        </member>
        <member name="T:Wyam.Common.Modules.IReadOnlyModuleList">
            <summary>
            A collection of optionally named modules.
            </summary>
        </member>
        <member name="T:Wyam.Common.Modules.ModuleList">
            <summary>
            A collection of optionally named modules.
            </summary>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleList.#ctor">
            <summary>
            Creates a new empty module list.
            </summary>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleList.#ctor(Wyam.Common.Modules.IModule[])">
            <summary>
            Creates a new module list with an initial set of modules.
            Any <c>null</c> items in the sequence of modules will be discarded.
            </summary>
            <param name="modules">The initial modules in the list.</param>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleList.#ctor(System.Collections.Generic.IEnumerable{Wyam.Common.Modules.IModule})">
            <summary>
            Creates a new module list with an initial set of modules.
            Any <c>null</c> items in the sequence of modules will be discarded.
            </summary>
            <param name="modules">The initial modules in the list.</param>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleList.Add(Wyam.Common.Modules.IModule[])">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ModuleList.Add(Wyam.Common.Modules.IModule)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ModuleList.Add(System.String,Wyam.Common.Modules.IModule)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ModuleList.Insert(System.Int32,Wyam.Common.Modules.IModule[])">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ModuleList.Insert(System.Int32,Wyam.Common.Modules.IModule)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ModuleList.Insert(System.Int32,System.String,Wyam.Common.Modules.IModule)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ModuleList.Remove(Wyam.Common.Modules.IModule)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ModuleList.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ModuleList.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Common.Modules.ModuleList.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Common.Modules.ModuleList.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Common.Modules.ModuleList.Count">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ModuleList.Clear">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ModuleList.Contains(Wyam.Common.Modules.IModule)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ModuleList.Contains(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ModuleList.CopyTo(Wyam.Common.Modules.IModule[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Wyam.Common.Modules.ModuleList.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ModuleList.IndexOf(Wyam.Common.Modules.IModule)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ModuleList.TryGetValue(System.String,Wyam.Common.Modules.IModule@)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ModuleList.IndexOf(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ModuleList.AsKeyValuePairs">
            <inheritdoc />
        </member>
        <member name="M:Wyam.Common.Modules.ModuleList.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Common.Modules.ModuleListExtensions">
            <summary>
            Extensions for use with <see cref="T:Wyam.Common.Modules.ModuleList"/>.
            </summary>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.Append``1(``0,Wyam.Common.Modules.IModule[])">
            <summary>
            Appends modules.
            </summary>
            <typeparam name="TModuleList">The type of the module list.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="modules">The modules to append.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.Append``1(``0,System.String,Wyam.Common.Modules.IModule)">
            <summary>
            Appends a named module.
            </summary>
            <typeparam name="TModuleList">The type of the module list.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="name">The name of the module to append.</param>
            <param name="module">The module to append.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.Prepend``1(``0,Wyam.Common.Modules.IModule[])">
            <summary>
            Prepends modules.
            </summary>
            <typeparam name="TModuleList">The type of the module list.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="modules">The modules to prepend.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.Prepend``1(``0,System.String,Wyam.Common.Modules.IModule)">
            <summary>
            Prepends a named module.
            </summary>
            <typeparam name="TModuleList">The type of the module list.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="name">The name of the module to prepend.</param>
            <param name="module">The module to prepend.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.InsertAfter``1(``0,System.String,Wyam.Common.Modules.IModule[])">
            <summary>
            Inserts modules after the module with the specified name.
            </summary>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="afterName">The name of the module at which to insert the specified modules.</param>
            <param name="modules">The modules to insert.</param>
            <typeparam name="TModuleList">The type of the module list.</typeparam>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.InsertAfter``1(``0,System.String,System.String,Wyam.Common.Modules.IModule)">
            <summary>
            Inserts modules after the module with the specified name.
            </summary>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="afterName">The name of the module at which to insert the specified modules.</param>
            <param name="name">The name of the module to insert.</param>
            <param name="module">The module to insert.</param>
            <typeparam name="TModuleList">The type of the module list.</typeparam>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.InsertBefore``1(``0,System.String,Wyam.Common.Modules.IModule[])">
            <summary>
            Inserts modules before the module with the specified name.
            </summary>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="beforeName">The name of the module at which to insert the specified modules.</param>
            <param name="modules">The modules to insert.</param>
            <typeparam name="TModuleList">The type of the module list.</typeparam>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.InsertBefore``1(``0,System.String,System.String,Wyam.Common.Modules.IModule)">
            <summary>
            Inserts modules before the module with the specified name.
            </summary>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="beforeName">The name of the module at which to insert the specified modules.</param>
            <param name="name">The name of the module to insert.</param>
            <param name="module">The module to insert.</param>
            <typeparam name="TModuleList">The type of the module list.</typeparam>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.InsertBeforeFirst``1(Wyam.Common.Modules.IModuleList,Wyam.Common.Modules.IModule[])">
            <summary>
            Inserts modules before the first module in the list of the specified type.
            </summary>
            <typeparam name="T">The type of the module at which to insert the specified modules.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="modules">The modules to insert.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.InsertBeforeFirst``1(Wyam.Common.Modules.IModuleList,System.String,Wyam.Common.Modules.IModule)">
            <summary>
            Inserts modules before the first module in the list of the specified type.
            </summary>
            <typeparam name="T">The type of the module at which to insert the specified modules.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="name">The name of the module to insert.</param>
            <param name="module">The module to insert.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.InsertBeforeFirst``1(Wyam.Common.Modules.IModuleList,System.Predicate{``0},Wyam.Common.Modules.IModule[])">
            <summary>
            Inserts modules before the first module in the list of the specified type that satisfies a predicate.
            </summary>
            <typeparam name="T">The type of the module at which to insert the modules.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="filter">A predicate determining at which module to insert the specified modules.</param>
            <param name="modules">The modules to insert.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.InsertBeforeFirst``1(Wyam.Common.Modules.IModuleList,System.Predicate{``0},System.String,Wyam.Common.Modules.IModule)">
            <summary>
            Inserts modules before the first module in the list of the specified type that satisfies a predicate.
            </summary>
            <typeparam name="T">The type of the module at which to insert the modules.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="filter">A predicate determining at which module to insert the specified modules.</param>
            <param name="name">The name of the module to insert.</param>
            <param name="module">The module to insert.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.InsertAfterFirst``1(Wyam.Common.Modules.IModuleList,Wyam.Common.Modules.IModule[])">
            <summary>
            Inserts modules after the first module in the list of the specified type.
            </summary>
            <typeparam name="T">The type of the module at which to insert the specified modules.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="modules">The modules to insert.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.InsertAfterFirst``1(Wyam.Common.Modules.IModuleList,System.String,Wyam.Common.Modules.IModule)">
            <summary>
            Inserts modules after the first module in the list of the specified type.
            </summary>
            <typeparam name="T">The type of the module at which to insert the specified modules.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="name">The name of the module to insert.</param>
            <param name="module">The module to insert.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.InsertAfterFirst``1(Wyam.Common.Modules.IModuleList,System.Predicate{``0},Wyam.Common.Modules.IModule[])">
            <summary>
            Inserts modules after the first module in the list of the specified type that satisfies a predicate.
            </summary>
            <typeparam name="T">The type of the module at which to insert the modules.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="filter">A predicate determining at which module to insert the specified modules.</param>
            <param name="modules">The modules to insert.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.InsertAfterFirst``1(Wyam.Common.Modules.IModuleList,System.Predicate{``0},System.String,Wyam.Common.Modules.IModule)">
            <summary>
            Inserts modules after the first module in the list of the specified type that satisfies a predicate.
            </summary>
            <typeparam name="T">The type of the module at which to insert the modules.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="filter">A predicate determining at which module to insert the specified modules.</param>
            <param name="name">The name of the module to insert.</param>
            <param name="module">The module to insert.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.InsertBeforeLast``1(Wyam.Common.Modules.IModuleList,Wyam.Common.Modules.IModule[])">
            <summary>
            Inserts modules before the last module in the list of the specified type.
            </summary>
            <typeparam name="T">The type of the module at which to insert the specified modules.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="modules">The modules to insert.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.InsertBeforeLast``1(Wyam.Common.Modules.IModuleList,System.String,Wyam.Common.Modules.IModule)">
            <summary>
            Inserts modules before the last module in the list of the specified type.
            </summary>
            <typeparam name="T">The type of the module at which to insert the specified modules.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="name">The name of the module to insert.</param>
            <param name="module">The module to insert.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.InsertBeforeLast``1(Wyam.Common.Modules.IModuleList,System.Predicate{``0},Wyam.Common.Modules.IModule[])">
            <summary>
            Inserts modules before the last module in the list of the specified type that satisfies a predicate.
            </summary>
            <typeparam name="T">The type of the module at which to insert the modules.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="filter">A predicate determining at which module to insert the specified modules.</param>
            <param name="modules">The modules to insert.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.InsertBeforeLast``1(Wyam.Common.Modules.IModuleList,System.Predicate{``0},System.String,Wyam.Common.Modules.IModule)">
            <summary>
            Inserts modules before the last module in the list of the specified type that satisfies a predicate.
            </summary>
            <typeparam name="T">The type of the module at which to insert the modules.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="filter">A predicate determining at which module to insert the specified modules.</param>
            <param name="name">The name of the module to insert.</param>
            <param name="module">The module to insert.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.InsertAfterLast``1(Wyam.Common.Modules.IModuleList,Wyam.Common.Modules.IModule[])">
            <summary>
            Inserts modules after the last module in the list of the specified type.
            </summary>
            <typeparam name="T">The type of the module at which to insert the specified modules.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="modules">The modules to insert.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.InsertAfterLast``1(Wyam.Common.Modules.IModuleList,System.String,Wyam.Common.Modules.IModule)">
            <summary>
            Inserts modules after the last module in the list of the specified type.
            </summary>
            <typeparam name="T">The type of the module at which to insert the specified modules.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="name">The name of the module to insert.</param>
            <param name="module">The module to insert.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.InsertAfterLast``1(Wyam.Common.Modules.IModuleList,System.Predicate{``0},Wyam.Common.Modules.IModule[])">
            <summary>
            Inserts modules after the last module in the list of the specified type that satisfies a predicate.
            </summary>
            <typeparam name="T">The type of the module at which to insert the modules.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="filter">A predicate determining at which module to insert the specified modules.</param>
            <param name="modules">The modules to insert.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.InsertAfterLast``1(Wyam.Common.Modules.IModuleList,System.Predicate{``0},System.String,Wyam.Common.Modules.IModule)">
            <summary>
            Inserts modules after the last module in the list of the specified type that satisfies a predicate.
            </summary>
            <typeparam name="T">The type of the module at which to insert the modules.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="filter">A predicate determining at which module to insert the specified modules.</param>
            <param name="name">The name of the module to insert.</param>
            <param name="module">The module to insert.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.ReplaceFirst``1(Wyam.Common.Modules.IModuleList,Wyam.Common.Modules.IModule,System.String)">
            <summary>
            Replaces the first module in the list of the specified type.
            </summary>
            <typeparam name="T">The type of the module to replace.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="module">The replacement module.</param>
            <param name="name">The name of the replacement module.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.ReplaceFirst``1(Wyam.Common.Modules.IModuleList,System.Predicate{``0},Wyam.Common.Modules.IModule,System.String)">
            <summary>
            Replaces the first module in the list of the specified type that satisfies a predicate.
            </summary>
            <typeparam name="T">The type of the module to replace.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="filter">A predicate determining which module to replace.</param>
            <param name="module">The replacement module.</param>
            <param name="name">The name of the replacement module.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.ReplaceLast``1(Wyam.Common.Modules.IModuleList,Wyam.Common.Modules.IModule,System.String)">
            <summary>
            Replaces the last module in the list of the specified type.
            </summary>
            <typeparam name="T">The type of the module to replace.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="module">The replacement module.</param>
            <param name="name">The name of the replacement module.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.ReplaceLast``1(Wyam.Common.Modules.IModuleList,System.Predicate{``0},Wyam.Common.Modules.IModule,System.String)">
            <summary>
            Replaces the last module in the list of the specified type that satisfies a predicate.
            </summary>
            <typeparam name="T">The type of the module to replace.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="filter">A predicate determining which module to replace.</param>
            <param name="module">The replacement module.</param>
            <param name="name">The name of the replacement module.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.Replace``1(``0,System.String,Wyam.Common.Modules.IModule,System.String)">
            <summary>
            Replaces a module with the specified name. The replacement module will have the same name
            as the module being replaced unless an alternate name is specified.
            </summary>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="replaceName">The name of the module to replace.</param>
            <param name="module">The replacement module.</param>
            <param name="name">The name of the replacement module.</param>
            <typeparam name="TModuleList">The type of the module list.</typeparam>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.Replace``1(``0,System.Int32,Wyam.Common.Modules.IModule,System.String)">
            <summary>
            Replaces a module at the specified index.
            </summary>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="index">The index of the module to replace.</param>
            <param name="module">The replacement module.</param>
            <param name="name">An optional name of the replacement module.</param>
            <typeparam name="TModuleList">The type of the module list.</typeparam>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.Modify``1(``0,System.String,System.Action{Wyam.Common.Modules.IModule})">
            <summary>
            Modifies an inner module with the specified name.
            </summary>
            <typeparam name="TModuleList">The type of the module list.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="modifyName">The name of the inner module to modify.</param>
            <param name="action">The action to apply to the inner module.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ModuleListExtensions.Modify``1(``0,System.Int32,System.Action{Wyam.Common.Modules.IModule})">
            <summary>
            Modifies an inner module list with the specified index.
            </summary>
            <typeparam name="TModuleList">The type of the module list.</typeparam>
            <param name="moduleList">The <see cref="T:Wyam.Common.Modules.ModuleList"/>.</param>
            <param name="index">The index of the inner module to modify.</param>
            <param name="action">The action to apply to the inner module.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="T:Wyam.Common.Modules.NamedModule">
            <summary>
            Wraps a module and gives it a name for use with <see cref="T:Wyam.Common.Modules.ModuleList"/>.
            </summary>
            <category>Extensibility</category>
        </member>
        <member name="P:Wyam.Common.Modules.NamedModule.Name">
            <summary>
            The name of the module.
            </summary>
        </member>
        <member name="P:Wyam.Common.Modules.NamedModule.Module">
            <summary>
            The wrapped module.
            </summary>
        </member>
        <member name="M:Wyam.Common.Modules.NamedModule.#ctor(System.String,Wyam.Common.Modules.IModule)">
            <summary>
            Wraps a module and gives it the specified name.
            </summary>
            <param name="name">The name of the module.</param>
            <param name="module">The wrapped module.</param>
        </member>
        <member name="M:Wyam.Common.Modules.NamedModule.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
            <summary>
            Passes execution to the wrapped module.
            </summary>
        </member>
        <member name="T:Wyam.Common.Modules.ReadDataModule`2">
            <summary>
            A base class for modules that read documents from data that can be turned into a Dictionary&lt;string,object&gt;.
            </summary>
            <typeparam name="TModule">
            The current module type, allows fluent methods defined in the base class to return the properly typed derived class.
            </typeparam>
            <typeparam name="TItem">
            The type of items this module is designed to process.
            </typeparam>
        </member>
        <member name="M:Wyam.Common.Modules.ReadDataModule`2.WithContentKey(System.String)">
            <summary>
            Specifies which metakey should be used for the document content
            </summary>
            <param name="contentKey">The name of the content property.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ReadDataModule`2.AddKeyConversion(System.String,System.String)">
            <summary>
            Allows renaming of keys during document creation: "If you find key X, create it as key Y instead."
            </summary>
            <param name="originalKeyName">The name of the original key to convert.</param>
            <param name="newKeyName">The name you want to convert the key to.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ReadDataModule`2.IncludeKeys(System.String[])">
            <summary>
            Allows creation of a list of keys to keep. If this list any members, any keys other than those in this list will be discarded.
            </summary>
            <param name="keys">The keys to keep.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ReadDataModule`2.ExcludeKeys(System.String[])">
            <summary>
            Allows creation of a list of keys to discard.
            </summary>
            <param name="keys">The keys to discard.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ReadDataModule`2.WithLimit(System.Int32)">
            <summary>
            Limits the number of created documents.
            </summary>
            <param name="limit">The number of objects to create documents from.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ReadDataModule`2.GetItems(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <summary>
            Gets the items to convert to documents. The <see cref="M:Wyam.Common.Modules.ReadDataModule`2.GetDictionary(`1)"/> method
            is used to convert each item into a series of key-value pairs that is then used for
            document creation.
            </summary>
            <param name="inputs">The input documents.</param>
            <param name="context">The current execution context.</param>
            <returns>The objects to create documents from.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ReadDataModule`2.GetDictionary(`1)">
            <summary>
            Used to convert each object from <see cref="M:Wyam.Common.Modules.ReadDataModule`2.GetItems(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)"/> into a IDictionary&lt;string, object&gt;.
            The base implementation checks if the object implements IDictionary&lt;string, object&gt; and just
            performs a cast is if it does. If not, reflection is used to construct a IDictionary&lt;string, object&gt;
            from all of the object's properties. Override this method to provide an alternate way of getting
            key-value pairs for each object.
            </summary>
            <param name="item">The object to convert to a IDictionary&lt;string, object&gt;.</param>
            <returns>A IDictionary&lt;string, object&gt; containing the data used for document creation.</returns>
        </member>
        <member name="M:Wyam.Common.Modules.ReadDataModule`2.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
        <member name="T:Wyam.Common.Tracing.Trace">
            <summary>
            Provides access to tracing functionality. This class is thread safe.
            </summary>
        </member>
        <member name="T:Wyam.Common.Util.ActionDisposable">
            <summary>
            A simple disposable that calls an action on disposal. This class
            will also throw an exception on subsiquent disposals.
            </summary>
        </member>
        <member name="M:Wyam.Common.Util.ActionDisposable.#ctor(System.Action)">
            <summary>
            Create a disposable instance.
            </summary>
            <param name="action">The action to call on disposal.</param>
        </member>
        <member name="M:Wyam.Common.Util.ActionDisposable.Dispose">
            <summary>
            Calls the action.
            </summary>
        </member>
        <member name="M:Wyam.Common.Util.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a range of values to a collection.
            </summary>
            <param name="collection">The collection to add values to.</param>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:Wyam.Common.Util.CollectionExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all items that match a predicate from a collection.
            </summary>
            <param name="collection">The collection to remove items from.</param>
            <param name="match">The predicate (return <c>true</c> to remove the item).</param>
            <returns>The number of items removed.</returns>
        </member>
        <member name="T:Wyam.Common.Util.EmptyDisposable">
            <summary>
            A disposable class that does nothing.
            </summary>
        </member>
        <member name="M:Wyam.Common.Util.EmptyDisposable.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="T:Wyam.Common.Util.GroupByExtensions">
            <summary>
            Extensions for performing grouping operations.
            </summary>
        </member>
        <member name="M:Wyam.Common.Util.GroupByExtensions.GroupByMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            that returns a sequence of keys.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <returns>A sequence of groups.</returns>
        </member>
        <member name="M:Wyam.Common.Util.GroupByExtensions.GroupByMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            that returns a sequence of keys
            and compares the keys by using a specified comparer.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="comparer">The comparer.</param>
            <returns>A sequence of groups.</returns>
        </member>
        <member name="M:Wyam.Common.Util.GroupByExtensions.GroupByMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``2})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            that returns a sequence of keys
            and projects the elements for each group by using a specified function.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="elementSelector">The element selector.</param>
            <returns>A sequence of groups.</returns>
        </member>
        <member name="M:Wyam.Common.Util.GroupByExtensions.GroupByMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            that returns a sequence of keys.
            The keys are compared by using a comparer and each group's elements
            are projected by using a specified function.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="elementSelector">The element selector.</param>
            <param name="comparer">The comparer.</param>
            <returns>A sequence of groups.</returns>
        </member>
        <member name="M:Wyam.Common.Util.GroupByExtensions.GroupByManyToMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,System.Collections.Generic.IEnumerable{``2}})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            that returns a sequence of keys
            and projects the elements for each group by using a specified function
            that returns a sequence of elements.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="elementSelector">The element selector.</param>
            <returns>A sequence of groups.</returns>
        </member>
        <member name="M:Wyam.Common.Util.GroupByExtensions.GroupByManyToMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,System.Collections.Generic.IEnumerable{``2}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            that returns a sequence of keys.
            The keys are compared by using a comparer and each group's elements
            are projected by using a specified function
            that returns a sequence of elements.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="elementSelector">The element selector.</param>
            <param name="comparer">The comparer.</param>
            <returns>A sequence of groups.</returns>
        </member>
        <member name="M:Wyam.Common.Util.LinkGenerator.GetLink(Wyam.Common.IO.NormalizedPath,System.String,Wyam.Common.IO.DirectoryPath,System.String,System.String[],System.String[],System.Boolean)">
            <summary>
            Generates a normalized link given a path and other conditions.
            </summary>
            <param name="path">The path to get a link for.</param>
            <param name="host">The host for the link (or <c>null</c> to omit the host).</param>
            <param name="root">The root path for the link (or <c>null</c> for no root path).</param>
            <param name="scheme">The scheme for the link (or <c>null</c> for "http").</param>
            <param name="hidePages">An array of page names to hide (or <c>null</c> to not hide any pages).</param>
            <param name="hideExtensions">An array of file extensions to hide (or <c>null</c> to not hide extensions or an empty array to hide all file extensions).</param>
            <param name="lowercase">Indicates that the link should be rendered in all lowercase.</param>
            <returns>A generated link.</returns>
        </member>
        <member name="T:Wyam.Common.Util.SourceInfoAttribute">
            <summary>
            A clever trick to get source info for declarations during reflection.
            From http://stackoverflow.com/a/17998371/807064.
            </summary>
        </member>
        <member name="M:Wyam.Common.Util.SourceInfoAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="filePath">The automatically populated file path (don't supply this manually)</param>
            <param name="lineNumber">The automatically populated source file line number (don't supply this manually)</param>
        </member>
        <member name="P:Wyam.Common.Util.SourceInfoAttribute.LineNumber">
            <summary>
            The line number of the attribute in the source file.
            </summary>
        </member>
        <member name="P:Wyam.Common.Util.SourceInfoAttribute.FilePath">
            <summary>
            The file path of the source file.
            </summary>
        </member>
        <member name="T:Wyam.Common.Util.StreamExtensions">
            <summary>
            Extension methods for use with <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:Wyam.Common.Util.StreamExtensions.GetWriter(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a <see cref="T:System.IO.StreamWriter"/> for the specified stream. The
            biggest difference between this and creating a <see cref="T:System.IO.StreamWriter"/>
            directly is that the new <see cref="T:System.IO.StreamWriter"/> will default to
            leaving the underlying stream open on disposal. Remember to flush the
            returned writer after all data have been written.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="leaveOpen"><c>true</c> to leave the underlying stream open on disposal.</param>
            <returns>A new <see cref="T:System.IO.StreamWriter"/> for the specified stream.</returns>
        </member>
        <member name="M:Wyam.Common.Util.ToLookupExtensions.ToLookupMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Creates a lookup from a sequence according to a specified key selector function
            that returns a sequence of keys.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <returns>A lookup.</returns>
        </member>
        <member name="M:Wyam.Common.Util.ToLookupExtensions.ToLookupMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a lookup from a sequence according to a specified key selector function
            that returns a sequence of keys
            and compares the keys by using a specified comparer.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="comparer">The comparer.</param>
            <returns>A lookup.</returns>
        </member>
        <member name="M:Wyam.Common.Util.ToLookupExtensions.ToLookupMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``2})">
            <summary>
            Creates a lookup from a sequence according to a specified key selector function
            that returns a sequence of keys
            and projects the elements for each group by using a specified function.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="elementSelector">The element selector.</param>
            <returns>A lookup.</returns>
        </member>
        <member name="M:Wyam.Common.Util.ToLookupExtensions.ToLookupMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a lookup from a sequence according to a specified key selector function
            that returns a sequence of keys.
            The keys are compared by using a comparer and each group's elements
            are projected by using a specified function.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="elementSelector">The element selector.</param>
            <param name="comparer">The comparer.</param>
            <returns>A lookup.</returns>
        </member>
        <member name="M:Wyam.Common.Util.ToLookupExtensions.ToLookupManyToMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,System.Collections.Generic.IEnumerable{``2}})">
            <summary>
            Creates a lookup from a sequence according to a specified key selector function
            that returns a sequence of keys
            and projects the elements for each group by using a specified function
            that returns a sequence of elements.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="elementSelector">The element selector.</param>
            <returns>A lookup.</returns>
        </member>
        <member name="M:Wyam.Common.Util.ToLookupExtensions.ToLookupManyToMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,System.Collections.Generic.IEnumerable{``2}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a lookup from a sequence according to a specified key selector function
            that returns a sequence of keys.
            The keys are compared by using a comparer and each group's elements
            are projected by using a specified function
            that returns a sequence of elements.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="elementSelector">The element selector.</param>
            <param name="comparer">The comparer.</param>
            <returns>A lookup.</returns>
        </member>
    </members>
</doc>
