<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>Mike's programming and architecture blog</title>
		<link>https://mikeska.tech/</link>
		<description>Programming blog about Software Architecture, Angular.io, .NET, ASP.NET, Typescript, programming Comic strips and more</description>
		<copyright>2019</copyright>
		<pubDate>Wed, 09 Oct 2019 20:19:03 GMT</pubDate>
		<lastBuildDate>Wed, 09 Oct 2019 20:19:03 GMT</lastBuildDate>
		<item>
			<title>Create a programming blog without any database or CMS by a static site generator</title>
			<link>https://mikeska.tech/posts/create-programming-blog-without-database-cms-static-site-generator</link>
			<description>&lt;p&gt;I spent most of my evenings in the last month setting up this blog. A programming blog is a bit a specific kind of blog and I'd like to share with you this fresh knowledge.&lt;/p&gt;</description>
			<enclosure url="https://mikeska.tech/title-if.jpg" length="0" type="image" />
			<guid>https://mikeska.tech/posts/create-programming-blog-without-database-cms-static-site-generator</guid>
			<pubDate>Fri, 05 Oct 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h3 id="have-just-setup-a-blog"&gt;Have just setup a blog...&lt;/h3&gt;
&lt;p&gt;I spent most of my evenings in the last month setting up this blog. A programming blog is a bit a specific kind of blog and I'd like to share with you this fresh knowledge.&lt;/p&gt;
&lt;p&gt;When I was querying the internet, the only articles which popped-up were these about Webhostings, Wordpress or similar CMS. I couldn't find any article how to setup my blog in one day and the next one start to work on the content right away.&lt;/p&gt;
&lt;h3 id="id-like-to-share-with-you-how-to-setup-a-blog-technically"&gt;...I'd like to share with you how to setup a blog technically&lt;/h3&gt;
&lt;p&gt;The desired article I was seeking shouldn't have helped me with the content. The article should have helped me with the creation and technical setup.
The most important part of a blog is the content, so don't lose time on a flashy design.
Most successful blogs usually doesn't have very attractive design. Their design usually didn't experience a change in the last decade :)
This blog post aims at programmers seeking the info how to create the blog technically.&lt;/p&gt;
&lt;h3 id="what-do-you-want"&gt;What do you want&lt;/h3&gt;
&lt;p&gt;Your blog should have a second level domain with HTTPS (like myblog.com), minimal setup, minimal maintenance, perfect content editor and running costs as low as possible.&lt;/p&gt;
&lt;h3 id="this-post-helps-you-to-make-a-setup-like-this"&gt;This post helps you to make a setup like this&lt;/h3&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;aspect&lt;/th&gt;
&lt;th&gt;solution&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;url&lt;/td&gt;
&lt;td&gt;Second level domain, HTTPS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;features&lt;/td&gt;
&lt;td&gt;Comments under article, Sharing buttons and Full Markdown support&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setup and deployment&lt;/td&gt;
&lt;td&gt;Everything in one Sunday&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;security&lt;/td&gt;
&lt;td&gt;Cannot be hacked, completly care-less&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;maintenance&lt;/td&gt;
&lt;td&gt;None at all&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;backups&lt;/td&gt;
&lt;td&gt;Without any effor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hosting cost&lt;/td&gt;
&lt;td&gt;Completly for free&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;cost over all&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Just your domain, $4 or less&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="the-options-you-have"&gt;The options you have&lt;/h2&gt;
&lt;p&gt;I see some possible directions you could go to create a blog about programming.
If you believe I found the best one, skip next several chapters and go to the &lt;strong&gt;Static Site Generator&lt;/strong&gt;.
If you want to know a bit more about my journey, just keep reading continually.&lt;/p&gt;
&lt;h3 id="popular-cms-like-wordpress-or-ghost"&gt;Popular CMS like Wordpress or GHost&lt;/h3&gt;
&lt;p&gt;This is where my jurney initialy begun. Chose one of the popular CMS seemed like the right way to go. You just register and begin with the content right away, no excessive development, deployment and configuration. Just couple of clicks and your blog is 90% ready.&lt;/p&gt;
&lt;p&gt;Sounds good, but as I later found out,  these last 10% is not an easy piece.&lt;/p&gt;
&lt;p&gt;On top of that, I was surprised by the super-crazy pricing policy of these services. Wordpress.com costs around $400 a year, Ghost is even slighly more pricy. So to create an account directly in a branded CMS was not a way due to the very high price for a non-profit blog.&lt;/p&gt;
&lt;p&gt;Altough at this point it was already clear that if to use any of the open source CMS, it would be Wordpress. Other CMS didn't have any promissing Markdown plugins, on the Wordpress I found at least one.&lt;/p&gt;
&lt;p&gt;Branded accouts are too expensive, but there can be found hosting providers on the market which offers deploying a custom instance for much acceptable price, around $180 a year.&lt;/p&gt;
&lt;p&gt;Seemed like that could be it, houndreds of blog templates available, thousands of plug-ins. And after couple of clicks you can start to work on your content right away.&lt;/p&gt;
&lt;p&gt;As I already implied above, the last 10% of customization can result in a terrible pain. It multiplies if you are not a PHP guy :).
The biggest blocker out of all was the lack of good and working Markdown plugin.&lt;/p&gt;
&lt;p&gt;Well, I found a one after all, not perfect, but a very good one. Some of the 3rd party sources it was referencing couldn't get along with my plans to run my website on HTTPS.
On top of that, the development of this plug-in was discontinued.&lt;/p&gt;
&lt;p&gt;Also customizing templates and overall tweeking the application was resulting into the big time waste with every little modification.&lt;/p&gt;
&lt;p&gt;At this point I realized that completly custom solution based on technologies much closer to my knowledge could be a better choice. I was nearly there, but made a manager decision to drop the Wordpress completly.&lt;/p&gt;
&lt;p&gt;It's possibly a good platform if you want to blog about clothes or lipsticks, but for a blog about programming is it not.&lt;/p&gt;
&lt;h2 id="owncustom-project"&gt;Own/Custom project&lt;/h2&gt;
&lt;p&gt;Well, it's a bit of work, but you are a software developer, you should be able to develop a blog of your own.&lt;/p&gt;
&lt;p&gt;Spoiler: It's not the way, skip to the next chapter, or keep reading if you want to review my steps.&lt;/p&gt;
&lt;p&gt;You need a good in Markdown editor as a Javascript component, simple layer on a web server converting the Markdown into HTML and of couse a database for your content. The very last step would be to give it a design.&lt;/p&gt;
&lt;p&gt;From the development point of view could be all this achived quite easy, but deployment, maintenance and running costs complicates the situation.&lt;/p&gt;
&lt;p&gt;If you chose to deploy your database and webserver into an own server, this is gonna be cheapest solution.
You could end up on $100 a year or maybe even a bit less. But the mayor pitfall is the time you'll spend on the configuration and maintenance.
You'll have to take care of all the security updates, sometimes is it all gonna go offline because your hosting provider restarts server and your services are might not come back. Sometimes an update after couple of years cause incompatibility with your code and so on.&lt;/p&gt;
&lt;p&gt;More care-free solution would be to use cloud services. It's configuration-less and care-free. One DB service and one Web app do the trick, fast deployed and no care. But you are going to end up on something like $25 a month and this is really a lot for a blog.&lt;/p&gt;
&lt;p&gt;But then I came across one technology...&lt;/p&gt;
&lt;h2 id="static-site-generator"&gt;Static Site Generator&lt;/h2&gt;
&lt;p&gt;I couldn't belive I didn't know about this technology.
I realized how much I'm trapped in the world of the enterprise software development a have no clue that there is an enitre field about Static site generators.&lt;/p&gt;
&lt;p&gt;Jekyll, the platform I came across is the leader and most popular in the field. Looked very promissing, but have poor support on Windows, so I decided to chose a technology based on a platform which is much closer to my knowlede, the .NET.&lt;/p&gt;
&lt;p&gt;Wyam, the technology I used and the rest of article is going to be affected by it.
But even if you decide for any other Static site generator, the principal should be prety much the same.&lt;/p&gt;
&lt;h4 id="markdown-the-base-of-content"&gt;Markdown - the base of content&lt;/h4&gt;
&lt;p&gt;There must happen two things with the content you write. It must be somehow written and it must be somehow rendered.
The rendering at the end is going to be in HTML, there is not any other choise.&lt;/p&gt;
&lt;p&gt;Beside using Markdown you could have two more choices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Write directly in HTML&lt;/strong&gt; - your HTML should have a good structure then, but then you are losing possiblity to make global changes to the articles, when you later decide for resturcturing or redesing. It would be heavy going as well.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use a WYSIWYG editor&lt;/strong&gt; - it's easy to write, but outputted HTML will be never good enough. On top of that the actual result displayed on the page will never look as good as the one in the editor.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you decide for Markdown, you become 100% platform independent and you can transpile your content into HTML by houndreds render engines available.
You can move your content to any other platform with ease.&lt;/p&gt;
&lt;h4 id="setting-up-the-wyam-project"&gt;Setting up the Wyam project&lt;/h4&gt;
&lt;p&gt;I won't be very chatty at this point, the project &lt;a href="https://wyam.io"&gt;Wyam&lt;/a&gt; is very well documented and out there can be found dozen greate articles about the setup in detail.&lt;/p&gt;
&lt;p&gt;The setup consist of following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download the latest &lt;a href="https://github.com/Wyamio/Wyam/releases"&gt;release&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Initializaton, it downloads itself some dependant nuget packages&lt;/li&gt;
&lt;li&gt;You choose template of the page (receipe and theme). Receipe is the template type, it's gonna be &lt;code&gt;Blog&lt;/code&gt;in our case. The template for this blog is slightly modified &lt;code&gt;CleanBlog&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Write your content in Markdown into &lt;code&gt;.md&lt;/code&gt; files in &lt;code&gt;Input&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;Build by a console command, static HTML files outputs into the &lt;code&gt;Output&lt;/code&gt; folder.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="writting-in-markdown"&gt;Writting in Markdown&lt;/h4&gt;
&lt;p&gt;There is a dozen of Markdown editors on the Market and most of them for free. All of them provide feature of immediate preview.&lt;/p&gt;
&lt;p&gt;I personally use online editor &lt;a href="https://stackedit.io"&gt;Stackedit&lt;/a&gt; which can directly sync with the GitHub, where my files are stored.&lt;/p&gt;
&lt;p&gt;When offline, I use &lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt; IDE.
But you don't really have to stick to any of these, don't hesitate to make your own research in this field.&lt;/p&gt;
&lt;p&gt;todo: picture sturcture of this two repositories&lt;/p&gt;
&lt;h4 id="setting-up-your-repository-on-github"&gt;Setting up your repository on GitHub&lt;/h4&gt;
&lt;p&gt;Github is going to play significant role in your blog. It stores your .md content files. We are even going to deploy the entire project onto GitHub, more about that in the next step.&lt;/p&gt;
&lt;p&gt;The solution to store the content files I chose, includes the binaries as well. It simplifies the setup on a new computer. You just download your entire repository into the computer and you can build your project right away with just a one console command.&lt;/p&gt;
&lt;h4 id="deploying-to-the-github-pages-for-free"&gt;Deploying to the GitHub pages for free&lt;/h4&gt;
&lt;p&gt;Maybe you don't know, but there is a possiblity to host a static HTML page on the Github for free !!! Of course on a second level domain (like myblog.com).&lt;/p&gt;
&lt;p&gt;The content of the repository is exactly the content of your website. This way it hosts your static HTML files created by the Wyam build.&lt;/p&gt;
&lt;p&gt;You don't even have to hide it in a private repository, as all the content of the repository is meant to be displayed to the internet. Well, just have a look on mine :) &lt;a href="https://github.com/vmikeska/vmikeska.github.io"&gt;vmikeska.github.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The complete setup guide is very well described in the article on the Github &lt;a href="https://guides.github.com/features/pages/"&gt;Getting Started with GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id="setting-up-the-second-level-domain"&gt;Setting up the second level domain&lt;/h4&gt;
&lt;p&gt;Well, no one could describe this process better than the Github itself. So the root article can be found &lt;a href="https://help.github.com/articles/quick-start-setting-up-a-custom-domain/"&gt;here&lt;/a&gt;.
You'll be most possibly setting an apex domain (like example.com). The article for this case can be found &lt;a href="https://help.github.com/articles/quick-start-setting-up-a-custom-domain/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I had myself a bit issues to make sense of the official documentation, so here is the apex domain configuration values I used:
| Record | Value |
|--|--|
| A | 185.199.108.153 |
| A | 185.199.109.153 |
| A | 185.199.110.153 |
| A | 185.199.111.153 |
| ALIAS | your-github-repository-name.github.io |
| DNS | your-github-repository-name.github.io |&lt;/p&gt;
&lt;p&gt;advantages
you can just grab your content and migrate to another platform based on Markdown within hours&lt;/p&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTE4NDgxODA4MywtMzIyOTIzNTU2LC0xND
MwOTU2MjYwLDExNTc2Nzg3NDIsLTkxMjU5NDU3MywtMjA4NzA5
OTY3Nyw5ODAzMjIyNCw0NzcwNjMwMzUsMTQwNTYwNDYxLDE0Mz
Y5MzYyMTIsMTc0MTEzMzYxLDE5ODIyNTEwMDYsLTIwODg3ODgw
MywtNjcyNjMwMzYzLDQ0MzA1ODAwOCwxOTU1MjcwOTQ5LDExMz
gyMDgzMDMsLTEzMzc4ODY1MDIsMTMwMTkzMjQwMiwxNzY2MjM4
NTgxXX0=
--&gt;
</content:encoded>
		</item>
		<item>
			<title>Comic 1 Your method to override</title>
			<link>https://mikeska.tech/posts/comic1-your-method-to-override</link>
			<description>&lt;p&gt;Do you also wonder why requirements to some of the positions are sometimes so high when it’s often just a junior job?&lt;/p&gt;</description>
			<enclosure url="https://mikeska.tech/title-comic1.png" length="0" type="image" />
			<guid>https://mikeska.tech/posts/comic1-your-method-to-override</guid>
			<pubDate>Sun, 30 Sep 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Do you also wonder why requirements to some of the positions are sometimes so high when it’s often just a junior job?&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/images/strips/your-method-to-override-1.png" class="img-fluid" alt="picture not found" title="Strip your method to override" /&gt;&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Why you should never evaluate conditional statements inline</title>
			<link>https://mikeska.tech/posts/never-evaluate-conditional-statements-inline</link>
			<description>&lt;p&gt;The conditional statement, conditional expression, conditional construct or commonly known the IF - a fundamental feature of every programming language.&lt;/p&gt;</description>
			<enclosure url="https://mikeska.tech/title-if.jpg" length="0" type="image" />
			<guid>https://mikeska.tech/posts/never-evaluate-conditional-statements-inline</guid>
			<pubDate>Wed, 26 Sep 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;The conditional statement, conditional expression, conditional construct or commonly known the IF - a fundamental feature of every programming language.&lt;/p&gt;
&lt;p&gt;Its right usage doesn't bring benefits just only to you, but also to all the other people participating in the project. Even the programmers whose seniority cannot be put in doubts can author a line of code like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;if (this.carType === 'Truck' &amp;amp;&amp;amp; (this.state === this.acitveState || this.item === this.selectedItem)
    &amp;amp;&amp;amp; _.find(this.itemList, {state: 'active'}) &amp;amp;&amp;amp; this.year &amp;gt; 2000)
{
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is wrong with such a line of code? Well, basically everything. It's difficult to read, maintain, debug, refactor or generally make sense of it.&lt;/p&gt;
&lt;p&gt;Consider following dummy code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;public execute1() {
        //here would be typicaly placed a comment trying to describe what
        //is going on in this crazy IF
        if (this.carType === 'Truck' 
            &amp;amp;&amp;amp; (this.state === this.acitveState || this.item === this.selectedItem)
            &amp;amp;&amp;amp; _.find(this.itemList, {state: 'active'}) &amp;amp;&amp;amp; this.year &amp;gt; 2000) 
        {
            this.updateCar();
            this.saveCar();
            this.broadCastUpdates();
        }

        //executing evaluations methods in the if statement is a very bad
        //practice. it's practically undebuggable and if you use it again 
        //in the IF body as a parameter, it might return another value
        if (this.notificationRequired() &amp;amp;&amp;amp; this.matchNotificationRules() 
            &amp;amp;&amp;amp; this.canNotify())
        {
            this.notifyGroup(this.canNotify());
        }

        //this line is maybe not so long and unclear, but doesn't provide 
        //the actual information to the reader, why is the condition 
        //passing or not
        if (['VW', 'AUDI'].includes(this.brand)) {
            this.notifyConcern();
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In an entry like this &lt;code&gt;year &amp;gt; 2000&lt;/code&gt; is obvious that to pass the evaluation, the &lt;code&gt;year&lt;/code&gt; must be higher than &lt;code&gt;2000&lt;/code&gt;. And this is exactly the only information provided by the entry.&lt;/p&gt;
&lt;p&gt;The best way how to provide such a information is to encapsulate the evaluation logic into a named method or assign it into a property.&lt;/p&gt;
&lt;p&gt;When a user sees something like &lt;code&gt;let isNotAnOldtimer = year &amp;gt; 2000;&lt;/code&gt;, he is aware that to pass the evaluation, the car must not be an oldtimer. That is significantly more beneficial to the consumer of the method than the plain &lt;code&gt;year &amp;gt; 2000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So let's begin the refactoring by splitting the excessive conditional statements into several short logical parts and give them a name.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;public execute2() {
        //each of these evaluations has one single named results
        //it introduces some new lines to the code, but brings
        //some more sense into it
        let isTruck = this.carType === 'Truck';
        let isActive = this.state === this.acitveState;
        let isSelected = this.item === this.selectedItem;
        let hasItem = !!this.carList.find(this.itemList, {state: 'active'});
        let isNotAnOldtimer = this.year &amp;gt; 2000;

        let canUpdateCar = isTruck &amp;amp;&amp;amp; (isActive || isSelected) &amp;amp;&amp;amp; hasItem &amp;amp;&amp;amp; isNotAnOldtimer;
        if (canUpdateCar)
        {
            this.updateCar();
            this.saveCar();
            this.broadCastUpdates();
        }
        
        //evaluate methods outside the condional statement is a must.
        //you should also consider properties (gets), if you use them in the
        //method body. Their value might change during execution
        let isRequired = this.notificationRequired(); 
        let matchesRule = this.matchNotificationRules() 
        let canNotify = this.canNotify();

        let shouldNotifyGroup = isRequired &amp;amp;&amp;amp; matchesRule &amp;amp;&amp;amp; canNotify;
        if (shouldNotifyGroup) {
            this.notifyGroup();
        }

        //it's better to encapulate even such a single evaluations
        //the statement might be clear to you, but doesn't have to be
        //clear to the others
        let belongsToConcern = ['VW', 'AUDI'].includes(this.brand);
        if (belongsToConcern) {
            this.notifyConcern();
        }
        
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when it has been broken into the several lines, each of them representing one single block of logic, we can read in it like in a book.
You can literally read what is going on in there and while debugging, comfortably step line by line and see the result of each block.&lt;/p&gt;
&lt;p&gt;The new code we introduced during the refactoring might give you an excessive impression. And yes, you are most possibly right.
But our refactoring is not over yet.
One, two, maybe three lines we could keep, but when this threshold reached, the code should be encapsulated into a well-named method.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;public execute3() {
        //after we put it all into a well name method, user can immediately 
        //see why this condition has passed or not
        let canUpdateCar = this.canUpdateCar();
        if (canUpdateCar) 
        {
            this.updateCar();
            this.saveCar();
            this.broadCastUpdates();
        }

        //while debugging, it really helps to find the bug quick
        let shouldNotifyGroup = this.shouldNotifyGroup();
        if (shouldNotifyGroup) {
            this.notifyGroup();
        }

        //well, no more work to be done in this one-liner, it's short and clear
        let belongsToConcern = ['VW', 'AUDI'].includes(this.brand);
        if (belongsToConcern) {
            this.notifyConcern();
        }
    }

    private canUpdateCar() {
        //inside of this encapsulation is then possible to find what exactly
        //is wrong
        let isTruck = this.carType === 'Truck';
        let isActive = this.state === this.acitveState;
        let isSelected = this.item === this.selectedItem;
        
        let item = !!this.carList.find(this.itemList, {state: 'active'});
        let isNotAnOldtimer = this.year &amp;gt; 2000;

        let canUpdateCar = isTruck &amp;amp;&amp;amp; (isActive || isSelected) &amp;amp;&amp;amp; hasItem &amp;amp;&amp;amp; isNotAnOldtimer;
        return canUpdateCar;
    }
    
    private shouldNotifyGroup() {
        let isRequired = this.notificationRequired(); 
        let matchesRule = this.matchNotificationRules();
        let canNotify = this.canNotify();

        let shouldNotifyGroup = isRequired &amp;amp;&amp;amp; matchesRule &amp;amp;&amp;amp; canNotify;
    }

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, there can't be found anything wrong, I admit a was a bit wordy programmer in this example.
But if you manage to stick to this rule for maybe 80-90% of your code, it brings some seniority into your outputs.&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;It's necessary to realize that code you input is not made exclusively for you. You should turn your geeky infinite one-liners into something that makes sense to the future consumers of your code.&lt;/p&gt;
&lt;p&gt;Let's go once more through and point out the major benefits.&lt;/p&gt;
&lt;h3 id="better-sense-of-the-code"&gt;Better sense of the code&lt;/h3&gt;
&lt;p&gt;The user should be able at first sight find out what's the logic flow in your methods. In order to achieve that, naming and encapsulating values inputting the conditional constructs is a must.&lt;/p&gt;
&lt;h3 id="easier-debugging"&gt;Easier debugging&lt;/h3&gt;
&lt;p&gt;It's always a bit tricky to deal with bugs, but well written conditional constructs help to find them. Bugs are not always being made just on the technical level, they occur on the level of business logic as well. Therefore when dealing with well named and formatted code, to fix your business logic is much easier.&lt;/p&gt;
&lt;h3 id="self-documenting-code"&gt;Self-documenting code&lt;/h3&gt;
&lt;p&gt;Encapsulation and right naming produce self-documented code. With such a code is much easier to drag other developers without a deep project knowledge into the project.&lt;/p&gt;
&lt;h3 id="solid-fundament-for-future-refactorings"&gt;Solid fundament for future refactorings&lt;/h3&gt;
&lt;p&gt;Well encapsulated and named code gets you rid of the hassle you might face when the time of refactoring comes. Before you begin to shift your code over the application, it's always better to start with an instant overview about the happening in there.&lt;/p&gt;
</content:encoded>
		</item>
	</channel>
</rss>